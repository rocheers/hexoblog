<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>X space</title>
  
  <subtitle>Yuan Home</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yuannow.com/"/>
  <updated>2017-10-06T06:00:58.000Z</updated>
  <id>http://yuannow.com/</id>
  
  <author>
    <name>Yuan Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Data analysis in Python by Pandas</title>
    <link href="http://yuannow.com/2017/10/02/Data-analysis-in-Python-by-Pandas/"/>
    <id>http://yuannow.com/2017/10/02/Data-analysis-in-Python-by-Pandas/</id>
    <published>2017-10-02T07:03:37.000Z</published>
    <updated>2017-10-06T06:00:58.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Python在数据科学领域的应用真的是越来越普及，得益于Python相对来讲通俗易懂的语言风格，语法简单且容易入门的特性，给很多数据科学领域的朋友，减轻了一部分学习编程语言的繁重。&lt;code&gt;Pandas&lt;/code&gt; + &lt;code&gt;NumPy&lt;/code&gt; + &lt;code&gt;Matplotlib&lt;/code&gt;，这三者的结合基本可以胜任任意简单的数据分析和可视化的任务。复杂一点的可能还会需要&lt;code&gt;SciPy&lt;/code&gt;的帮助。&lt;/p&gt;
&lt;h1 id=&quot;本文目的&quot;&gt;&lt;a href=&quot;#本文目的&quot; class=&quot;headerlink&quot; title=&quot;本文目的&quot;&gt;&lt;/a&gt;本文目的&lt;/h1&gt;&lt;p&gt;这次，我打算用一篇长文来记录一下自己是如何利用Pandas进行数据分析的。网上有很多的&lt;code&gt;Pandas&lt;/code&gt;入门教程，因此我这里并不打算针对所有Pandas的基础操作描述的那么清楚，还是希望更多的表达一些对于数据分析的想法和实现。&lt;/p&gt;
&lt;p&gt;广义上，数据分析其实包含了从导入数据-&amp;gt;清洗数据-&amp;gt;&lt;strong&gt;分析数据&lt;/strong&gt;-&amp;gt;展示数据，这一从头到尾的流程。狭义上，数据分析指的就是中间分析数据这一块内容。本文按照广义上的数据分析的过程来一步步探讨。&lt;/p&gt;
&lt;p&gt;接下来我们就正式开始本次数据分析之旅。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;&lt;p&gt;下面的这一段代码主要是包的调用和一些环境配置，&lt;code&gt;Seaborn&lt;/code&gt;是也是一个plot包，可用来画出比&lt;code&gt;Matplotlib&lt;/code&gt;更漂亮的图，它本身是基于&lt;code&gt;Matplotlib&lt;/code&gt;设计的，对&lt;code&gt;NumPy&lt;/code&gt;和&lt;code&gt;Pandas&lt;/code&gt;都有很好的支持。这里我就不做过多解释了，对&lt;code&gt;Seaborn&lt;/code&gt;有兴趣的朋友可以留言咨询或者自行探索。
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; matplotlib &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; seaborn &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; sns&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;%matplotlib inline&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sns.set(rc=&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;figure.figsize&quot;&lt;/span&gt;: (&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6.25&lt;/span&gt;)&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sns.set_style(&lt;span class=&quot;string&quot;&gt;&quot;darkgrid&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;colors = [&lt;span class=&quot;string&quot;&gt;&quot;windows blue&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;amber&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;faded green&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;greyish&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;dusty purple&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;red violet&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;marine&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;jungle green&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;chocolate brown&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;dull pink&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;reddish orange&quot;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sns.set_palette(sns.xkcd_palette(colors))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;导入数据&quot;&gt;&lt;a href=&quot;#导入数据&quot; class=&quot;headerlink&quot; title=&quot;导入数据&quot;&gt;&lt;/a&gt;导入数据&lt;/h2&gt;&lt;p&gt;我这次用的数据是IGN上近20年来的各种平台的游戏，来源于&lt;a href=&quot;https://www.kaggle.com/egrinstein/20-years-of-games&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;reviews = pd.read_csv(&lt;span class=&quot;string&quot;&gt;&quot;ign.csv&quot;&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;数据读入之后，我们来看一下这里都有些什么内容。
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;reviews.head()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Data analysis" scheme="http://yuannow.com/categories/Data-analysis/"/>
    
    
      <category term="Python" scheme="http://yuannow.com/tags/Python/"/>
    
      <category term="Pandas" scheme="http://yuannow.com/tags/Pandas/"/>
    
      <category term="Data analysis" scheme="http://yuannow.com/tags/Data-analysis/"/>
    
  </entry>
  
  <entry>
    <title>用Python在Hadoop上跑MapReduce</title>
    <link href="http://yuannow.com/2017/09/29/Map-reduce-works-perfectly-with-Python/"/>
    <id>http://yuannow.com/2017/09/29/Map-reduce-works-perfectly-with-Python/</id>
    <published>2017-09-29T23:15:51.000Z</published>
    <updated>2017-10-05T00:15:47.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;本文目的&quot;&gt;&lt;a href=&quot;#本文目的&quot; class=&quot;headerlink&quot; title=&quot;本文目的&quot;&gt;&lt;/a&gt;本文目的&lt;/h1&gt;&lt;p&gt;这篇文章主要会给大家介绍一下如何将Python和Hadoop结合起来工作。有接触过MapReduce的朋友都知道，Hadoop的运行环境主要是Java，一般介绍Hadoop和MapReduce的教程和书籍也都是基于Java的。因为我个人对Java并不太感冒，一直以来钟情于Python的简洁实用理念，同时又对MapReduce有兴趣，因此萌生了Python的MapReduce结合的想法。本文也是我经过Google学习他人教程，以及自己实际练习得出来的一些心得，在此分享给各位。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h1&gt;&lt;p&gt;首先，你需要有个Hadoop的运行环境，还有Python运行环境。本文主要目的不在分享安装环境，因此有从零开始的朋友，可以先去百度或者Google上搜一下相关教程。下面分享几个相关的教程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/SingleCluster.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hadoop: Setting up a Single Node Cluster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.powerxing.com/install-hadoop/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hadoop安装教程_单机/伪分布式配置_Hadoop2.6.0/Ubuntu14.04&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tashan10.com/yong-dockerda-jian-hadoopwei-fen-bu-shi-ji-qun/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用Docker在本地搭建Hadoop分布式集群&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Big Data" scheme="http://yuannow.com/categories/Big-Data/"/>
    
    
      <category term="Hadoop" scheme="http://yuannow.com/tags/Hadoop/"/>
    
      <category term="Python" scheme="http://yuannow.com/tags/Python/"/>
    
      <category term="Docker" scheme="http://yuannow.com/tags/Docker/"/>
    
      <category term="MapReduce" scheme="http://yuannow.com/tags/MapReduce/"/>
    
  </entry>
  
  <entry>
    <title>Migrated from Heroku to Netlify</title>
    <link href="http://yuannow.com/2017/09/28/Netlify/"/>
    <id>http://yuannow.com/2017/09/28/Netlify/</id>
    <published>2017-09-29T00:25:25.000Z</published>
    <updated>2017-10-05T00:16:16.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;之前学习ruby on rails的时候，开始接触的Heroku。这次部署个人博客，想着Heroku应该是个不错的选择吧，但试用了几天的Heroku之后，我决定还是转到其他地方部署我的blog，为什么呢？原因有二：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;免费的Heroku App，如果搁置时间长了一直无人访问的话，再次访问是需要一定时间等待激活的，就像是电脑睡眠了等着叫醒一样。付费的话太贵，对于只是搭载个人博客而言不太划算；&lt;/li&gt;
&lt;li&gt;Heroku服务器是在美国和欧洲，而且一个App只能存在在某一个区域，不可变。所以对于国内的朋友，登录我的博客有时会有不小的延迟，虽然对于一个静态网站，本来也无需很快的响应速度，但配合第一条，这个时间有时真的让人无语……&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="general" scheme="http://yuannow.com/categories/general/"/>
    
    
      <category term="Netlify" scheme="http://yuannow.com/tags/Netlify/"/>
    
      <category term="migrate" scheme="http://yuannow.com/tags/migrate/"/>
    
      <category term="Heroku" scheme="http://yuannow.com/tags/Heroku/"/>
    
      <category term="static site" scheme="http://yuannow.com/tags/static-site/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yuannow.com/2017/09/26/hello-world/"/>
    <id>http://yuannow.com/2017/09/26/hello-world/</id>
    <published>2017-09-27T01:25:13.000Z</published>
    <updated>2017-10-05T00:15:27.000Z</updated>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;终于将个人博客搭建起来了……虽然听说Hexo搭建博客十分容易，但对于前端完全不了解的我，颇费了一番功夫。&lt;/p&gt;
&lt;p&gt;Hexo初始化这个博
      
    
    </summary>
    
      <category term="general" scheme="http://yuannow.com/categories/general/"/>
    
    
      <category term="First" scheme="http://yuannow.com/tags/First/"/>
    
      <category term="Blog" scheme="http://yuannow.com/tags/Blog/"/>
    
  </entry>
  
</feed>
