{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/output_14_0.png","path":"images/output_14_0.png","modified":1,"renderable":0},{"_id":"source/images/output_13_0.png","path":"images/output_13_0.png","modified":1,"renderable":0},{"_id":"source/images/output_19_0.png","path":"images/output_19_0.png","modified":1,"renderable":0},{"_id":"themes/material-flow/source/style.less","path":"style.less","modified":1,"renderable":1},{"_id":"source/images/autocomplete/autocomplete.png","path":"images/autocomplete/autocomplete.png","modified":1,"renderable":0},{"_id":"source/images/autocomplete/test.png","path":"images/autocomplete/test.png","modified":1,"renderable":0},{"_id":"source/images/autocomplete/ggif.gif","path":"images/autocomplete/ggif.gif","modified":1,"renderable":0},{"_id":"themes/material-flow/source/fonts/icomoon.svg","path":"fonts/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/material-flow/source/fonts/selection.json","path":"fonts/selection.json","modified":1,"renderable":1},{"_id":"themes/material-flow/source/fonts/icomoon.eot","path":"fonts/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/material-flow/source/fonts/icomoon.ttf","path":"fonts/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/material-flow/source/fonts/icomoon.woff","path":"fonts/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/material-flow/source/js/app.js","path":"js/app.js","modified":1,"renderable":1},{"_id":"themes/material-flow/source/js/jquery.fitvids.js","path":"js/jquery.fitvids.js","modified":1,"renderable":1},{"_id":"themes/material-flow/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/material-flow/source/images/favicon.png","path":"images/favicon.png","modified":1,"renderable":1},{"_id":"themes/material-flow/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/material-flow/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"source/images/drag_deploy.png","path":"images/drag_deploy.png","modified":1,"renderable":0},{"_id":"source/images/photos/firefox_resize.jpg","path":"images/photos/firefox_resize.jpg","modified":1,"renderable":0},{"_id":"source/images/photos/Sunset_resize.jpg","path":"images/photos/Sunset_resize.jpg","modified":1,"renderable":0},{"_id":"source/images/photos/cheetah_resize.jpg","path":"images/photos/cheetah_resize.jpg","modified":1,"renderable":0},{"_id":"source/images/photos/studyroom1_resize.jpg","path":"images/photos/studyroom1_resize.jpg","modified":1,"renderable":0},{"_id":"source/images/autocomplete/database.png","path":"images/autocomplete/database.png","modified":1,"renderable":0},{"_id":"source/images/photos/Hearst_Castle_resize.jpg","path":"images/photos/Hearst_Castle_resize.jpg","modified":1,"renderable":0},{"_id":"source/images/photos/beaver_resize.jpg","path":"images/photos/beaver_resize.jpg","modified":1,"renderable":0},{"_id":"source/images/photos/milkyway_resize.jpg","path":"images/photos/milkyway_resize.jpg","modified":1,"renderable":0},{"_id":"source/images/photos/CA1_resize.jpg","path":"images/photos/CA1_resize.jpg","modified":1,"renderable":0},{"_id":"source/images/photos/Gray_Whale_Cove_Beach_resize.jpg","path":"images/photos/Gray_Whale_Cove_Beach_resize.jpg","modified":1,"renderable":0},{"_id":"source/images/photos/Tree_resize.jpg","path":"images/photos/Tree_resize.jpg","modified":1,"renderable":0},{"_id":"source/images/photos/craterlake1_resize.jpg","path":"images/photos/craterlake1_resize.jpg","modified":1,"renderable":0},{"_id":"source/images/crawl/website.png","path":"images/crawl/website.png","modified":1,"renderable":0},{"_id":"source/images/crawl/menu.png","path":"images/crawl/menu.png","modified":1,"renderable":0},{"_id":"source/images/crawl/crawl_menu.png","path":"images/crawl/crawl_menu.png","modified":1,"renderable":0},{"_id":"source/images/crawl/crawl_book.png","path":"images/crawl/crawl_book.png","modified":1,"renderable":0},{"_id":"source/images/crawl/md_files.png","path":"images/crawl/md_files.png","modified":1,"renderable":0},{"_id":"source/images/crawl/md_file.png","path":"images/crawl/md_file.png","modified":1,"renderable":0},{"_id":"source/images/crawl/md_result.png","path":"images/crawl/md_result.png","modified":1,"renderable":0}],"Cache":[{"_id":"themes/material-flow/LICENSE","hash":"44409ab0bcd7853e2ac93faad84e57299711e6bf","modified":1506498005000},{"_id":"themes/material-flow/README.md","hash":"2f14b9c1e7ad23e03da0599a9f348d61c79c474f","modified":1506498005000},{"_id":"themes/material-flow/_config.yml","hash":"af88bd5da05488dd9e46864863784f666d9ea1f6","modified":1507345349000},{"_id":"themes/material-flow/.DS_Store","hash":"34801d8d72395c68c77f3fba48fe70876413e132","modified":1506498373000},{"_id":"source/.DS_Store","hash":"96c2e0b6aba4b025abf37976383beb0c3ce8c2a8","modified":1507624801000},{"_id":"source/_posts/Data-analysis-in-Python-by-Pandas.md","hash":"b4530febac2863e7de6697fce6d24981d1d0e40e","modified":1507626892000},{"_id":"source/_posts/Implement-Search-Auto-Complete-by-Python-Hadoop.md","hash":"9340f8d0a398a652d2954c17b97685492bdbec1e","modified":1507626759000},{"_id":"source/_posts/Map-reduce-works-perfectly-with-Python.md","hash":"53334bcc8fbbb9011f3a08129ce99dc711e6d2aa","modified":1509492524000},{"_id":"source/_posts/Netlify.md","hash":"c6800d8c7beb4749ed494d66dd004697c689b865","modified":1507162576000},{"_id":"source/_posts/Python-Books-Crawler.md","hash":"b1d002a8938c010a72f1421c5468f7ced0e1d9ce","modified":1510008500000},{"_id":"source/_posts/hello-world.md","hash":"f1a9a89d19672734104a0618d4310c5357afe96e","modified":1507162527000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1507107471000},{"_id":"source/about/index.md","hash":"d910a0b65cd744846119d1f71763718d8cc6098e","modified":1506488882000},{"_id":"source/gallary/index.md","hash":"e581d5322c67236b7ec08032299c4d2381420850","modified":1506726502000},{"_id":"source/images/.DS_Store","hash":"3d7e269ee809999bf37aa9b23db0a072bc94a82a","modified":1507624801000},{"_id":"source/images/output_14_0.png","hash":"d7ffc2ed912dc691b8996dd4b5e0caa0bff8fcab","modified":1507107260000},{"_id":"source/links/index.md","hash":"4c42dea337f1aca594ec732e473538f0e7cd3642","modified":1506748636000},{"_id":"themes/material-flow/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1506498005000},{"_id":"themes/material-flow/.git/config","hash":"82381cee1ab01284f0764b866b459e10a56a791b","modified":1506498005000},{"_id":"source/images/output_13_0.png","hash":"b17bbbdda8c41b2b6a0d0b620dc70ba7fabb130c","modified":1507107260000},{"_id":"source/images/output_19_0.png","hash":"4fdbd84797d559e0be03b5f687ed772d53918b6c","modified":1507107260000},{"_id":"themes/material-flow/.git/index","hash":"425533fabdd6d378097daf93f20c71d21572b570","modified":1506548454000},{"_id":"themes/material-flow/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1506498004000},{"_id":"themes/material-flow/.git/packed-refs","hash":"4b73b813f44c59541ad5caaba80ac82920ee3c0c","modified":1506498005000},{"_id":"themes/material-flow/layout/archive.ejs","hash":"735e6c0b1f8f837617b3a4119ac321a84f4ec5f7","modified":1506498005000},{"_id":"themes/material-flow/layout/category.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1506498005000},{"_id":"themes/material-flow/layout/index.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1506498005000},{"_id":"themes/material-flow/layout/layout.ejs","hash":"c137d708da9c5339dbcdf2e45c4851c08899a457","modified":1506498005000},{"_id":"themes/material-flow/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1506498005000},{"_id":"themes/material-flow/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1506498005000},{"_id":"themes/material-flow/layout/tag.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1506498005000},{"_id":"themes/material-flow/source/style.less","hash":"ad50444f75534f36001872d4c90e1d839614402b","modified":1506498005000},{"_id":"themes/material-flow/source/.DS_Store","hash":"6c8b380ae8232d2ab6d48ef8b5c3d693a09a4251","modified":1506501780000},{"_id":"source/images/autocomplete/autocomplete.png","hash":"56fd13628a760233cfd3139576a74b602a2f2777","modified":1507596535000},{"_id":"source/images/autocomplete/test.png","hash":"88bf9eddff9bbb3af71a8bd7e7f989106ee9aaf2","modified":1507623866000},{"_id":"source/images/autocomplete/ggif.gif","hash":"211a506c13d49f3222f0732c43c0af2c63c37b05","modified":1507624748000},{"_id":"source/images/photos/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1506399934000},{"_id":"themes/material-flow/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1506498004000},{"_id":"themes/material-flow/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1506498004000},{"_id":"themes/material-flow/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1506498004000},{"_id":"themes/material-flow/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1506498004000},{"_id":"themes/material-flow/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1506498004000},{"_id":"themes/material-flow/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1506498004000},{"_id":"themes/material-flow/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1506498004000},{"_id":"themes/material-flow/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1506498004000},{"_id":"themes/material-flow/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1506498004000},{"_id":"themes/material-flow/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1506498004000},{"_id":"themes/material-flow/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1506498004000},{"_id":"themes/material-flow/layout/_partial/archive.ejs","hash":"7d811a088748b758c0664645629adbebdd8d1c3f","modified":1506498005000},{"_id":"themes/material-flow/layout/_partial/categories.ejs","hash":"761fda43c385e81324b628dfab6377b82bfdf82a","modified":1506498005000},{"_id":"themes/material-flow/layout/_partial/footer.ejs","hash":"6d90930cd786b3d111e0318ca3dee3fbb7981648","modified":1506500986000},{"_id":"themes/material-flow/layout/_partial/head.ejs","hash":"eba709bd4589d6e15b64324c1c122804088cc315","modified":1507347228000},{"_id":"themes/material-flow/layout/_partial/loading.ejs","hash":"9c5721d5a5cff00860f2775b12dd73fe62375201","modified":1506498005000},{"_id":"themes/material-flow/layout/_partial/article.ejs","hash":"434bdd65beed6343fe93f9027e09f7091dad2d0f","modified":1506555473000},{"_id":"themes/material-flow/layout/_partial/header.ejs","hash":"7ee2448ebb96c206e449ea6641d5ba5cc1a6c9d2","modified":1506498005000},{"_id":"themes/material-flow/layout/_partial/post.ejs","hash":"16d695e09c9d73e3e01b78f8b5385690d45d98a1","modified":1506498005000},{"_id":"themes/material-flow/layout/_partial/side.ejs","hash":"fe78dea06ac3a4ce2efcfd6171aea8fb3f64ebe7","modified":1506498005000},{"_id":"themes/material-flow/layout/_partial/scripts.ejs","hash":"1d19d4c34a937697a41f9c3eefd80f8ccd28fea1","modified":1506554953000},{"_id":"themes/material-flow/layout/_widget/about.ejs","hash":"d0da8bdb37b861f19e22b79afff667b2f26758ef","modified":1506499404000},{"_id":"themes/material-flow/layout/_widget/categories.ejs","hash":"2be2c85e4c5275d08e524fabdb38f046054b874a","modified":1506498005000},{"_id":"themes/material-flow/layout/_widget/links.ejs","hash":"2d6c7fc92b0330a7a79b8b680cf9f4286fdf0291","modified":1506498005000},{"_id":"themes/material-flow/layout/_widget/tagcloud.ejs","hash":"914698bcc4210b5f984e12166eca3c86de631968","modified":1506498005000},{"_id":"themes/material-flow/source/fonts/icomoon.svg","hash":"37a9d40dfcd7d156cf452db75c425e797351e2b5","modified":1506498005000},{"_id":"themes/material-flow/.git/logs/HEAD","hash":"38ef9b499ca9645b745ba8d45b2e0b504b105600","modified":1506498005000},{"_id":"themes/material-flow/source/fonts/selection.json","hash":"498b5ba0cafb2eb5fa20f9034527eb912fa41827","modified":1506498005000},{"_id":"themes/material-flow/source/fonts/icomoon.eot","hash":"931a892fd6307c0cfcbb71511ad4a38b3dd20edf","modified":1506498005000},{"_id":"themes/material-flow/source/fonts/icomoon.ttf","hash":"6192fb2b38c94f77d1fed08c1969fab5ffe9a30c","modified":1506498005000},{"_id":"themes/material-flow/source/fonts/icomoon.woff","hash":"0356e9be814a04187c641371fd95a7a8d9111200","modified":1506498005000},{"_id":"themes/material-flow/source/js/app.js","hash":"17aca227d841b932ac33af4c9e02a192832fdc85","modified":1506498005000},{"_id":"themes/material-flow/source/js/jquery.fitvids.js","hash":"57946a22c79654014eb00fb548f727d302221873","modified":1506498005000},{"_id":"themes/material-flow/source/js/search.js","hash":"632ce023094442d350dcd2895ca5f948364746cb","modified":1506498005000},{"_id":"themes/material-flow/source/less/_archive.less","hash":"0b15989a0d19ce550cf5d0021376c5ad1d4790b9","modified":1506498005000},{"_id":"themes/material-flow/source/less/_article.less","hash":"d9ba46e79e69b5d5d853987fab2c7fa487685b02","modified":1507269429000},{"_id":"themes/material-flow/source/less/_base.less","hash":"828efc946f54ce2bfd5970e1d8d7b08f8f515786","modified":1506498005000},{"_id":"themes/material-flow/source/less/_defines.less","hash":"6b8ffd4e1b478e046722487bae15a500f3fd3092","modified":1506498005000},{"_id":"themes/material-flow/source/less/_fonts.less","hash":"d9e56fa5affcdee1c530ee5d5268a7e07644c05a","modified":1506498005000},{"_id":"themes/material-flow/source/less/_footer.less","hash":"973b1f9c62159f345833db5c30db03c351c66c5c","modified":1506498005000},{"_id":"themes/material-flow/source/less/_header.less","hash":"36f32479c42be1ed503903e1cb88daca5b7792ca","modified":1506498005000},{"_id":"themes/material-flow/source/less/_main.less","hash":"6e2c43e15d1e05bcddbccc1d4830b4687261f1eb","modified":1506498005000},{"_id":"themes/material-flow/source/less/_normalize.less","hash":"8105754cbc9c4ff58f993ac1346bc919d114e944","modified":1506726348000},{"_id":"themes/material-flow/source/less/_pagination.less","hash":"165e2c369faf70858b731bb6d483d8991259887e","modified":1506498005000},{"_id":"themes/material-flow/source/less/_search.less","hash":"ab1e3d8fdd489adde30723c40726e5e8187a8b6c","modified":1506498005000},{"_id":"themes/material-flow/source/less/_side.less","hash":"210ffc4e3fc41a5202618e17fc744a8b2b6bc54e","modified":1506498005000},{"_id":"themes/material-flow/source/less/_toc.less","hash":"76729eb95cf89eb17436e13610847102d4795a63","modified":1506498005000},{"_id":"themes/material-flow/source/less/_tog.less","hash":"bff0ab3b06e14a3c171ccd53061f8ccddb1e2fc2","modified":1506498005000},{"_id":"themes/material-flow/source/less/_typo.less","hash":"8635fe95a08614f22833c6c159ebf6cf3d731e12","modified":1506498005000},{"_id":"themes/material-flow/source/less/_widget.less","hash":"a6fc757f2daf58089490eefe0701b9889a8bd4bd","modified":1506498005000},{"_id":"themes/material-flow/source/images/favicon.png","hash":"ee6b022c404928cadcd484c993ac26dc3169432f","modified":1506494140000},{"_id":"themes/material-flow/snapshots/phone.png","hash":"8e78f25ee179e3ff27fff101050792184935d319","modified":1506498005000},{"_id":"themes/material-flow/source/images/avatar.png","hash":"c7648fbfbbd10c48061d812c4583374672c60014","modified":1506493896000},{"_id":"themes/material-flow/source/images/logo.png","hash":"e1290d65d1cf722c1645045440ae59a3824bcb0b","modified":1506494056000},{"_id":"source/images/drag_deploy.png","hash":"8427b5e2d7d42166f649acbf58e8a2080cfe32fb","modified":1506646078000},{"_id":"source/images/photos/firefox_resize.jpg","hash":"245f1a1adb239c48ec181619067aa999939b2c3c","modified":1506396389000},{"_id":"themes/material-flow/snapshots/article.png","hash":"3f1aff6057a807b55edd2435421b59a1f4e82c40","modified":1506498005000},{"_id":"source/images/photos/Sunset_resize.jpg","hash":"26e4c3cad2ae0d1ceec82f7d781003074d668a81","modified":1506396398000},{"_id":"source/images/photos/cheetah_resize.jpg","hash":"4330632a269f4e131f07b35d7ce095d4fc0df129","modified":1506396386000},{"_id":"themes/material-flow/.git/objects/pack/pack-22b724843f7dc1c114c9c32dcf2877877f3e1cd8.idx","hash":"11d4e8afff8ebe7e425dfe59f42c378462367c5b","modified":1506498005000},{"_id":"themes/material-flow/.git/refs/heads/master","hash":"0717be1bbf800fb479e27aabba6a962571a7a0da","modified":1506498005000},{"_id":"source/images/photos/studyroom1_resize.jpg","hash":"c7cdd0650c5b6e5db4a4391677f7b40f72869094","modified":1506396397000},{"_id":"source/images/autocomplete/database.png","hash":"2288b5be8ed2101efca8a0eff695eb1d4f4df664","modified":1507626567000},{"_id":"source/images/photos/Hearst_Castle_resize.jpg","hash":"1aab24e2cc229d28bbbea1088327101300e82eab","modified":1506396391000},{"_id":"source/images/photos/beaver_resize.jpg","hash":"a477fc53425c4d1d3667ef6f601b2ed411c37532","modified":1506396383000},{"_id":"source/images/photos/milkyway_resize.jpg","hash":"92350544eb6b3b510f0da68cc831b8b35cf77973","modified":1506396393000},{"_id":"source/images/photos/CA1_resize.jpg","hash":"91df1c8d97ea8f5f00a3b63ef2e4ff28a234333e","modified":1506396386000},{"_id":"themes/material-flow/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1506498005000},{"_id":"themes/material-flow/.git/logs/refs/heads/master","hash":"38ef9b499ca9645b745ba8d45b2e0b504b105600","modified":1506498005000},{"_id":"source/images/photos/Gray_Whale_Cove_Beach_resize.jpg","hash":"346d72e99799f9ef61d7a278b8b3da77fd03978c","modified":1506396390000},{"_id":"source/images/photos/Tree_resize.jpg","hash":"da971b90d1368439e1b07b07c5c994387b28cc8d","modified":1506396400000},{"_id":"source/images/photos/craterlake1_resize.jpg","hash":"5dd34970c4794726537b78e5c3525d6662703407","modified":1506396388000},{"_id":"themes/material-flow/snapshots/index.png","hash":"a4aa937770d1573032f3e830be3cd75672a26036","modified":1506498005000},{"_id":"themes/material-flow/.git/logs/refs/remotes/origin/HEAD","hash":"38ef9b499ca9645b745ba8d45b2e0b504b105600","modified":1506498005000},{"_id":"themes/material-flow/.git/objects/pack/pack-22b724843f7dc1c114c9c32dcf2877877f3e1cd8.pack","hash":"77515a2954437157edf1ff61453ebc6be6f478e4","modified":1506498005000}],"Category":[{"name":"Data analysis","_id":"cj9os2v9w0004u8yu8pfkztph"},{"name":"Big Data","_id":"cj9os2va1000au8yuq9m922lo"},{"name":"general","_id":"cj9os2va6000gu8yufbaug7en"},{"name":"Web Application","_id":"cj9os2va7000mu8yunn1igdbq"}],"Data":[],"Page":[{"layout":"page","title":"About me","_content":"\n# Yuan Zhang","source":"about/index.md","raw":"---\nlayout: page\ntitle: About me\n---\n\n# Yuan Zhang","date":"2017-09-27T05:08:02.000Z","updated":"2017-09-27T05:08:02.000Z","path":"about/index.html","comments":1,"_id":"cj9os2v9t0001u8yuv8ectdqh","content":"<h1 id=\"Yuan-Zhang\"><a href=\"#Yuan-Zhang\" class=\"headerlink\" title=\"Yuan Zhang\"></a>Yuan Zhang</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Yuan-Zhang\"><a href=\"#Yuan-Zhang\" class=\"headerlink\" title=\"Yuan Zhang\"></a>Yuan Zhang</h1>"},{"title":"Gallary","date":"2017-09-29T21:41:03.000Z","_content":"\n# 第一波\n\n| ![beaver](/images/photos/beaver_resize.jpg) | ![study_cornor](/images/photos/studyroom1_resize.jpg) | ![tree](/images/photos/Tree_resize.jpg) |\n| --- | --- | --- |\n| | | |\n\n| ![crater_lake](/images/photos/craterlake1_resize.jpg) |\n| --- |\n| |\n\n| ![firefox](/images/photos/firefox_resize.jpg) | ![cheetah](/images/photos/cheetah_resize.jpg) |\n| --- | --- |\n| | |\n\n| ![gray_whale_cove_beach](/images/photos/Gray_Whale_Cove_Beach_resize.jpg) |\n| --- |\n| |\n\n| ![sunset](/images/photos/Sunset_resize.jpg) | ![stars](/images/photos/milkyway_resize.jpg) |\n| --- | --- |\n| | |\n\n| ![hearst_castle](/images/photos/Hearst_Castle_resize.jpg) |\n| --- |\n| |\n\n# 第二波\n*未完待续……*\n\n<!--\n<table>\n    <tr>\n        <td colspan=\"2\"><img src=\"/images/photos/beaver_resize.jpg\" alt=\"woodcarving beaver\" /></td>\n        <td colspan=\"2\"><img src=\"/images/photos/studyroom1_resize.jpg\" alt=\"study corner\" style=\"margin: 10px;\"/></td>\n        <td colspan=\"2\"><img src=\"/images/photos/Tree_resize.jpg\" alt=\"tree\" /></td>\n    </tr>\n    <tr>\n        <td colspan=\"6\"><img src=\"/images/photos/craterlake1_resize.jpg\" alt=\"crater lake\" /></td>\n    </tr>\n    <tr>\n        <td colspan=\"3\"><img src=\"/images/photos/firefox_resize.jpg\" alt=\"firefox\" /></td>\n        <td colspan=\"3\"><img src=\"/images/photos/cheetah_resize.jpg\" alt=\"cheetah\" /></td>\n    </tr>\n    <tr>\n        <td colspan=\"6\"><img src=\"/images/photos/Gray_Whale_Cove_Beach_resize.jpg\" alt=\"gray whale cove beach\" /></td>\n    </tr>\n    <tr>\n        <td colspan=\"3\"><img src=\"/images/photos/Sunset_resize.jpg\" alt=\"sunset\" /></td>\n        <td colspan=\"3\"><img src=\"/images/photos/milkyway_resize.jpg\" alt=\"silent hill\" /></td>\n    </tr>\n    <tr>\n        <td colspan=\"2\"><img src=\"/images/photos/CA1_resize.jpg\" alt=\"ca#1\" /></td>\n        <td colspan=\"3\"><img src=\"/images/photos/Hearst_Castle_resize.jpg\" alt=\"hearst castle\" /></td>\n    </tr>\n</table>-->","source":"gallary/index.md","raw":"---\ntitle: Gallary\ndate: 2017-09-29 14:41:03\n---\n\n# 第一波\n\n| ![beaver](/images/photos/beaver_resize.jpg) | ![study_cornor](/images/photos/studyroom1_resize.jpg) | ![tree](/images/photos/Tree_resize.jpg) |\n| --- | --- | --- |\n| | | |\n\n| ![crater_lake](/images/photos/craterlake1_resize.jpg) |\n| --- |\n| |\n\n| ![firefox](/images/photos/firefox_resize.jpg) | ![cheetah](/images/photos/cheetah_resize.jpg) |\n| --- | --- |\n| | |\n\n| ![gray_whale_cove_beach](/images/photos/Gray_Whale_Cove_Beach_resize.jpg) |\n| --- |\n| |\n\n| ![sunset](/images/photos/Sunset_resize.jpg) | ![stars](/images/photos/milkyway_resize.jpg) |\n| --- | --- |\n| | |\n\n| ![hearst_castle](/images/photos/Hearst_Castle_resize.jpg) |\n| --- |\n| |\n\n# 第二波\n*未完待续……*\n\n<!--\n<table>\n    <tr>\n        <td colspan=\"2\"><img src=\"/images/photos/beaver_resize.jpg\" alt=\"woodcarving beaver\" /></td>\n        <td colspan=\"2\"><img src=\"/images/photos/studyroom1_resize.jpg\" alt=\"study corner\" style=\"margin: 10px;\"/></td>\n        <td colspan=\"2\"><img src=\"/images/photos/Tree_resize.jpg\" alt=\"tree\" /></td>\n    </tr>\n    <tr>\n        <td colspan=\"6\"><img src=\"/images/photos/craterlake1_resize.jpg\" alt=\"crater lake\" /></td>\n    </tr>\n    <tr>\n        <td colspan=\"3\"><img src=\"/images/photos/firefox_resize.jpg\" alt=\"firefox\" /></td>\n        <td colspan=\"3\"><img src=\"/images/photos/cheetah_resize.jpg\" alt=\"cheetah\" /></td>\n    </tr>\n    <tr>\n        <td colspan=\"6\"><img src=\"/images/photos/Gray_Whale_Cove_Beach_resize.jpg\" alt=\"gray whale cove beach\" /></td>\n    </tr>\n    <tr>\n        <td colspan=\"3\"><img src=\"/images/photos/Sunset_resize.jpg\" alt=\"sunset\" /></td>\n        <td colspan=\"3\"><img src=\"/images/photos/milkyway_resize.jpg\" alt=\"silent hill\" /></td>\n    </tr>\n    <tr>\n        <td colspan=\"2\"><img src=\"/images/photos/CA1_resize.jpg\" alt=\"ca#1\" /></td>\n        <td colspan=\"3\"><img src=\"/images/photos/Hearst_Castle_resize.jpg\" alt=\"hearst castle\" /></td>\n    </tr>\n</table>-->","updated":"2017-09-29T23:08:22.000Z","path":"gallary/index.html","comments":1,"layout":"page","_id":"cj9os2v9v0003u8yuvkgjqn6q","content":"<h1 id=\"第一波\"><a href=\"#第一波\" class=\"headerlink\" title=\"第一波\"></a>第一波</h1><table>\n<thead>\n<tr>\n<th><img src=\"/images/photos/beaver_resize.jpg\" alt=\"beaver\"></th>\n<th><img src=\"/images/photos/studyroom1_resize.jpg\" alt=\"study_cornor\"></th>\n<th><img src=\"/images/photos/Tree_resize.jpg\" alt=\"tree\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th><img src=\"/images/photos/craterlake1_resize.jpg\" alt=\"crater_lake\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th><img src=\"/images/photos/firefox_resize.jpg\" alt=\"firefox\"></th>\n<th><img src=\"/images/photos/cheetah_resize.jpg\" alt=\"cheetah\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th><img src=\"/images/photos/Gray_Whale_Cove_Beach_resize.jpg\" alt=\"gray_whale_cove_beach\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th><img src=\"/images/photos/Sunset_resize.jpg\" alt=\"sunset\"></th>\n<th><img src=\"/images/photos/milkyway_resize.jpg\" alt=\"stars\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th><img src=\"/images/photos/Hearst_Castle_resize.jpg\" alt=\"hearst_castle\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"第二波\"><a href=\"#第二波\" class=\"headerlink\" title=\"第二波\"></a>第二波</h1><p><em>未完待续……</em></p>\n<!--\n<table>\n    <tr>\n        <td colspan=\"2\"><img src=\"/images/photos/beaver_resize.jpg\" alt=\"woodcarving beaver\" /></td>\n        <td colspan=\"2\"><img src=\"/images/photos/studyroom1_resize.jpg\" alt=\"study corner\" style=\"margin: 10px;\"/></td>\n        <td colspan=\"2\"><img src=\"/images/photos/Tree_resize.jpg\" alt=\"tree\" /></td>\n    </tr>\n    <tr>\n        <td colspan=\"6\"><img src=\"/images/photos/craterlake1_resize.jpg\" alt=\"crater lake\" /></td>\n    </tr>\n    <tr>\n        <td colspan=\"3\"><img src=\"/images/photos/firefox_resize.jpg\" alt=\"firefox\" /></td>\n        <td colspan=\"3\"><img src=\"/images/photos/cheetah_resize.jpg\" alt=\"cheetah\" /></td>\n    </tr>\n    <tr>\n        <td colspan=\"6\"><img src=\"/images/photos/Gray_Whale_Cove_Beach_resize.jpg\" alt=\"gray whale cove beach\" /></td>\n    </tr>\n    <tr>\n        <td colspan=\"3\"><img src=\"/images/photos/Sunset_resize.jpg\" alt=\"sunset\" /></td>\n        <td colspan=\"3\"><img src=\"/images/photos/milkyway_resize.jpg\" alt=\"silent hill\" /></td>\n    </tr>\n    <tr>\n        <td colspan=\"2\"><img src=\"/images/photos/CA1_resize.jpg\" alt=\"ca#1\" /></td>\n        <td colspan=\"3\"><img src=\"/images/photos/Hearst_Castle_resize.jpg\" alt=\"hearst castle\" /></td>\n    </tr>\n</table>-->","site":{"data":{}},"excerpt":"","more":"<h1 id=\"第一波\"><a href=\"#第一波\" class=\"headerlink\" title=\"第一波\"></a>第一波</h1><table>\n<thead>\n<tr>\n<th><img src=\"/images/photos/beaver_resize.jpg\" alt=\"beaver\"></th>\n<th><img src=\"/images/photos/studyroom1_resize.jpg\" alt=\"study_cornor\"></th>\n<th><img src=\"/images/photos/Tree_resize.jpg\" alt=\"tree\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th><img src=\"/images/photos/craterlake1_resize.jpg\" alt=\"crater_lake\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th><img src=\"/images/photos/firefox_resize.jpg\" alt=\"firefox\"></th>\n<th><img src=\"/images/photos/cheetah_resize.jpg\" alt=\"cheetah\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th><img src=\"/images/photos/Gray_Whale_Cove_Beach_resize.jpg\" alt=\"gray_whale_cove_beach\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th><img src=\"/images/photos/Sunset_resize.jpg\" alt=\"sunset\"></th>\n<th><img src=\"/images/photos/milkyway_resize.jpg\" alt=\"stars\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th><img src=\"/images/photos/Hearst_Castle_resize.jpg\" alt=\"hearst_castle\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"第二波\"><a href=\"#第二波\" class=\"headerlink\" title=\"第二波\"></a>第二波</h1><p><em>未完待续……</em></p>\n<!--\n<table>\n    <tr>\n        <td colspan=\"2\"><img src=\"/images/photos/beaver_resize.jpg\" alt=\"woodcarving beaver\" /></td>\n        <td colspan=\"2\"><img src=\"/images/photos/studyroom1_resize.jpg\" alt=\"study corner\" style=\"margin: 10px;\"/></td>\n        <td colspan=\"2\"><img src=\"/images/photos/Tree_resize.jpg\" alt=\"tree\" /></td>\n    </tr>\n    <tr>\n        <td colspan=\"6\"><img src=\"/images/photos/craterlake1_resize.jpg\" alt=\"crater lake\" /></td>\n    </tr>\n    <tr>\n        <td colspan=\"3\"><img src=\"/images/photos/firefox_resize.jpg\" alt=\"firefox\" /></td>\n        <td colspan=\"3\"><img src=\"/images/photos/cheetah_resize.jpg\" alt=\"cheetah\" /></td>\n    </tr>\n    <tr>\n        <td colspan=\"6\"><img src=\"/images/photos/Gray_Whale_Cove_Beach_resize.jpg\" alt=\"gray whale cove beach\" /></td>\n    </tr>\n    <tr>\n        <td colspan=\"3\"><img src=\"/images/photos/Sunset_resize.jpg\" alt=\"sunset\" /></td>\n        <td colspan=\"3\"><img src=\"/images/photos/milkyway_resize.jpg\" alt=\"silent hill\" /></td>\n    </tr>\n    <tr>\n        <td colspan=\"2\"><img src=\"/images/photos/CA1_resize.jpg\" alt=\"ca#1\" /></td>\n        <td colspan=\"3\"><img src=\"/images/photos/Hearst_Castle_resize.jpg\" alt=\"hearst castle\" /></td>\n    </tr>\n</table>-->"},{"title":"Links","layout":"page","_content":"","source":"links/index.md","raw":"---\ntitle: Links\nlayout: page\n---\n","date":"2017-09-30T05:17:16.000Z","updated":"2017-09-30T05:17:16.000Z","path":"links/index.html","comments":1,"_id":"cj9os2v9z0007u8yu6ofbpg51","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Data analysis in Python by Pandas","date":"2017-10-02T07:03:37.000Z","_content":"\nPython在数据科学领域的应用真的是越来越普及，得益于Python相对来讲通俗易懂的语言风格，语法简单且容易入门的特性，给很多数据科学领域的朋友，减轻了一部分学习编程语言的繁重。`Pandas` + `NumPy` + `Matplotlib`，这三者的结合基本可以胜任任意简单的数据分析和可视化的任务。复杂一点的可能还会需要`SciPy`的帮助。\n\n# 本文目的\n这次，我打算用一篇长文来记录一下自己是如何利用Pandas进行数据分析的。网上有很多的`Pandas`入门教程，因此我这里并不打算针对所有Pandas的基础操作描述的那么清楚，还是希望更多的表达一些对于数据分析的想法和实现。\n\n广义上，数据分析其实包含了从导入数据->清洗数据->**分析数据**->展示数据，这一从头到尾的流程。狭义上，数据分析指的就是中间分析数据这一块内容。本文按照广义上的数据分析的过程来一步步探讨。\n\n接下来我们就正式开始本次数据分析之旅。\n\n<!--more-->\n\n---\n# 正文\n下面的这一段代码主要是包的调用和一些环境配置，`Seaborn`是也是一个plot包，可用来画出比`Matplotlib`更漂亮的图，它本身是基于`Matplotlib`设计的，对`NumPy`和`Pandas`都有很好的支持。这里我就不做过多解释了，对`Seaborn`有兴趣的朋友可以留言咨询或者自行探索。\n```python\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n    \n%matplotlib inline\n    \nsns.set(rc={\"figure.figsize\": (10, 6.25)})\nsns.set_style(\"darkgrid\")\ncolors = [\"windows blue\", \"amber\", \"faded green\", \"greyish\", \"dusty purple\", \"red violet\", \"marine\", \"jungle green\", \"chocolate brown\", \"dull pink\", \"reddish orange\"]\nsns.set_palette(sns.xkcd_palette(colors))\n```\n\n---\n## 导入数据\n我这次用的数据是IGN上近20年来的各种平台的游戏，来源于[这里](https://www.kaggle.com/egrinstein/20-years-of-games)。\n\n```python\nreviews = pd.read_csv(\"ign.csv\")\n```\n\n数据读入之后，我们来看一下这里都有些什么内容。\n```python\nreviews.head()\n```\n\n<div>\n<table class=\"blueTable\">\n  <thead>\n    <tr style=\"text-align: center;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>score_phrase</th>\n      <th>title</th>\n      <th>url</th>\n      <th>platform</th>\n      <th>score</th>\n      <th>genre</th>\n      <th>editors_choice</th>\n      <th>release_year</th>\n      <th>release_month</th>\n      <th>release_day</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>Amazing</td>\n      <td>LittleBigPlanet PS Vita</td>\n      <td>/games/littlebigplanet-vita/vita-98907</td>\n      <td>PlayStation Vita</td>\n      <td>9.0</td>\n      <td>Platformer</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Amazing</td>\n      <td>LittleBigPlanet PS Vita -- Marvel Super Hero E...</td>\n      <td>/games/littlebigplanet-ps-vita-marvel-super-he...</td>\n      <td>PlayStation Vita</td>\n      <td>9.0</td>\n      <td>Platformer</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>Great</td>\n      <td>Splice: Tree of Life</td>\n      <td>/games/splice/ipad-141070</td>\n      <td>iPad</td>\n      <td>8.5</td>\n      <td>Puzzle</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/xbox-360-128182</td>\n      <td>Xbox 360</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/ps3-128181</td>\n      <td>PlayStation 3</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n这里先简单介绍一下每一列都代表什么吧：\n- score_phrase – IGN用一个词来评价当前游戏，与得分直接相关；\n- title – 游戏名称；\n- url – 完整评论的地址；\n- platform – 游戏平台（PS4, PC, Xbox, etc.）；\n- score – 游戏的具体评分，从1.0到10.0；\n- genre – 游戏分类；\n- editors_choice – 是否为IGN编辑推荐的游戏，与评分有关系。\n- release_year – 游戏发布年份；\n- release_month – 发布月份；\n- release_day – 发布日期。\n\n我们来看下总共多少个数据。\n```python\nreviews.shape\n```\n\n    (18625, 11)\n\n看来我们这次的数据里一共`18625`条数据，一共`11`列属性。\n\n---\n## 清洗数据\n源数据导入后一般来说是不能直接使用的，需要进行一定范围的数据清洗，不过本次的数据基本不需要清洗，收集这个数据的_Eric Grinstein_已经对数据进行了清洗工作。不过这里我们仍需要做一点简单的清洗工作，去除一些我们不需要的内容。\n\n```python\nreviews = reviews.iloc[:, 1:]\nreviews.head()\n```\n\n<div>\n<style>\n    .dataframe {\n      display: block;\n      overflow-x: auto;\n      white-space: nowrap;\n    }\n\n    .dataframe thead tr:only-child th {\n        text-align: center;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n</style>\n<table class=\"blueTable\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>score_phrase</th>\n      <th>title</th>\n      <th>url</th>\n      <th>platform</th>\n      <th>score</th>\n      <th>genre</th>\n      <th>editors_choice</th>\n      <th>release_year</th>\n      <th>release_month</th>\n      <th>release_day</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Amazing</td>\n      <td>LittleBigPlanet PS Vita</td>\n      <td>/games/littlebigplanet-vita/vita-98907</td>\n      <td>PlayStation Vita</td>\n      <td>9.0</td>\n      <td>Platformer</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Amazing</td>\n      <td>LittleBigPlanet PS Vita -- Marvel Super Hero E...</td>\n      <td>/games/littlebigplanet-ps-vita-marvel-super-he...</td>\n      <td>PlayStation Vita</td>\n      <td>9.0</td>\n      <td>Platformer</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Great</td>\n      <td>Splice: Tree of Life</td>\n      <td>/games/splice/ipad-141070</td>\n      <td>iPad</td>\n      <td>8.5</td>\n      <td>Puzzle</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/xbox-360-128182</td>\n      <td>Xbox 360</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/ps3-128181</td>\n      <td>PlayStation 3</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n---\n## 分析数据\n数据清洗之后，其实就是分析过程的正式开始。在开始分析过程之前，先说点题外话。我本身对于游戏是很热爱的，从小到大，游戏机，掌机，PC，也拥有过不少的游戏平台。从和父母斗智斗勇中各种争取时间玩的红白机，小霸王学习机，到后来可以躲在被子里玩的GameBoy，但偶尔还得探出头担心父母进屋里发现自己的小秘密；再往后的世嘉，所以又不得不和父母软磨硬泡恳求游戏时间。直至家里第一台PC的出现，基本其他的游戏平台就很少碰了，除了后来的PSP，那是我从GameBoy之后时隔很多年再次拿起掌机玩游戏。要说起游戏，游戏平台，游戏的历史，真的说上三天三夜也说不完，其实这也是我为什么选择这么IGN的这个数据作为数据分析的数据来源。我也很想看看这20年来电子游戏产业的发展和趋势。\n\n好了，咱们言归正传，就我个人而言，拿到这么多的数据之后，第一反应是：这么多的游戏，究竟是分布在了多少平台上呢？我亲身体验过的平台其实并不多，大概10个左右吧。那么这个数据集里究竟包含了多少平台呢？\n\n```python\nall_platforms = reviews[\"platform\"].unique()\nall_platforms\n```\n\n    array(['PlayStation Vita', 'iPad', 'Xbox 360', 'PlayStation 3',\n           'Macintosh', 'PC', 'iPhone', 'Nintendo DS', 'Nintendo 3DS',\n           'Android', 'Wii', 'PlayStation 4', 'Wii U', 'Linux',\n           'PlayStation Portable', 'PlayStation', 'Nintendo 64', 'Saturn',\n           'Lynx', 'Game Boy', 'Game Boy Color', 'NeoGeo Pocket Color',\n           'Game.Com', 'Dreamcast', 'Dreamcast VMU', 'WonderSwan', 'Arcade',\n           'Nintendo 64DD', 'PlayStation 2', 'WonderSwan Color',\n           'Game Boy Advance', 'Xbox', 'GameCube', 'DVD / HD Video Game',\n           'Wireless', 'Pocket PC', 'N-Gage', 'NES', 'iPod', 'Genesis',\n           'TurboGrafx-16', 'Super NES', 'NeoGeo', 'Master System',\n           'Atari 5200', 'TurboGrafx-CD', 'Atari 2600', 'Sega 32X', 'Vectrex',\n           'Commodore 64/128', 'Sega CD', 'Nintendo DSi', 'Windows Phone',\n           'Web Games', 'Xbox One', 'Windows Surface', 'Ouya',\n           'New Nintendo 3DS', 'SteamOS'], dtype=object)\n\n这么多的平台……说实话，这里有很多我听都没听过，像`Dreamcast`，`Atari 2600`，`Vectrex`等等，看来这20年，游戏产业的发展还是很多元化的，至少从游戏平台上就可以看出端倪。\n\n有了游戏平台的信息，自然而然地就会问，每个平台大概都出过多少游戏呢？\n```python\nreviews[\"platform\"].value_counts(dropna=False)\n```\n\n    PC                      3370\n    PlayStation 2           1686\n    Xbox 360                1631\n    Wii                     1366\n    PlayStation 3           1356\n    Nintendo DS             1045\n    PlayStation              952\n    Wireless                 910\n    iPhone                   842\n    Xbox                     821\n    PlayStation Portable     633\n    Game Boy Advance         623\n    GameCube                 509\n    Game Boy Color           356\n    Nintendo 64              302\n    Dreamcast                286\n    PlayStation 4            277\n    Nintendo DSi             254\n    Nintendo 3DS             225\n    Xbox One                 208\n    PlayStation Vita         155\n    Wii U                    114\n    iPad                      99\n    Lynx                      82\n    Macintosh                 81\n    Genesis                   58\n    NES                       49\n    TurboGrafx-16             40\n    Android                   39\n    Super NES                 33\n    NeoGeo Pocket Color       31\n    N-Gage                    30\n    Game Boy                  22\n    iPod                      17\n    Sega 32X                  16\n    Windows Phone             14\n    Master System             13\n    Arcade                    11\n    Linux                     10\n    NeoGeo                    10\n    Nintendo 64DD              7\n    Commodore 64/128           6\n    Saturn                     6\n    Atari 2600                 5\n    WonderSwan                 4\n    TurboGrafx-CD              3\n    Game.Com                   3\n    Atari 5200                 2\n    New Nintendo 3DS           2\n    Vectrex                    2\n    Pocket PC                  1\n    WonderSwan Color           1\n    Ouya                       1\n    Web Games                  1\n    SteamOS                    1\n    Dreamcast VMU              1\n    Windows Surface            1\n    DVD / HD Video Game        1\n    Sega CD                    1\n    Name: platform, dtype: int64\n\n从上面的统计来看，PC端无疑是最大的贡献者，这也可以理解，毕竟个人电脑从上个世纪末开始出现井喷，到后来虽然出货量开始下降，但一直都是人们学习生活娱乐中不可或缺的一部分，并且早期的个人电脑绝大部分都是以Windows为操作系统。不过让我没想到的是`Dreamcast`竟然还有286款游戏，看来是我孤陋寡闻了……\n\n下面来看看排名前十的平台都有哪些。\n\n```python\nplatforms = reviews[\"platform\"].value_counts()[:10].index.tolist()\nplatforms\n```\n\n    ['PC',\n    'PlayStation 2',\n    'Xbox 360',\n    'Wii',\n    'PlayStation 3',\n    'Nintendo DS',\n    'PlayStation',\n    'Wireless',\n    'iPhone',\n    'Xbox']\n\n既然前十的平台我已经知道了，那么下面来看看每个平台的游戏质量如何，虽然PC端的游戏最多，但不一定好游戏占比就是最多的，对吧？\n\n想知道每个平台的游戏质量如何，我得先从所有的数据中将只属于前十的平台的游戏提取出来。这里我创建一个filter，用来筛选游戏平台。\n```python\nfil = reviews[\"platform\"] == platforms[0]   # create a filter\nfil\n```\n\n    0        False\n    1        False\n    2        False\n    3        False\n    4        False\n    5        False\n    6        False\n    7         True\n    8        False\n    9         True\n              ...\n    18615    False\n    18616     True\n    18617    False\n    18618     True\n    18619     True\n    18620    False\n    18621    False\n    18622    False\n    18623    False\n    18624     True\n    Name: platform, Length: 18625, dtype: bool\n\n\n```python\nfor platform in platforms[1:]:\n    fil |= reviews[\"platform\"] == platform\n    \nfiltered_reviews = reviews[fil]\n```\n\n下面是提取出来的所有数据：\n```python\nfiltered_reviews\n```\n\n<div>\n<table class=\"blueTable\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>score_phrase</th>\n      <th>title</th>\n      <th>url</th>\n      <th>platform</th>\n      <th>score</th>\n      <th>genre</th>\n      <th>editors_choice</th>\n      <th>release_year</th>\n      <th>release_month</th>\n      <th>release_day</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/xbox-360-128182</td>\n      <td>Xbox 360</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/ps3-128181</td>\n      <td>PlayStation 3</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Awful</td>\n      <td>Double Dragon: Neon</td>\n      <td>/games/double-dragon-neon/xbox-360-131320</td>\n      <td>Xbox 360</td>\n      <td>3.0</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Amazing</td>\n      <td>Guild Wars 2</td>\n      <td>/games/guild-wars-2/pc-896298</td>\n      <td>PC</td>\n      <td>9.0</td>\n      <td>RPG</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Awful</td>\n      <td>Double Dragon: Neon</td>\n      <td>/games/double-dragon-neon/ps3-131321</td>\n      <td>PlayStation 3</td>\n      <td>3.0</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Good</td>\n      <td>Total War Battles: Shogun</td>\n      <td>/games/total-war-battles-shogun/pc-142564</td>\n      <td>PC</td>\n      <td>7.0</td>\n      <td>Strategy</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Good</td>\n      <td>Tekken Tag Tournament 2</td>\n      <td>/games/tekken-tag-tournament-2/ps3-124584</td>\n      <td>PlayStation 3</td>\n      <td>7.5</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Good</td>\n      <td>Tekken Tag Tournament 2</td>\n      <td>/games/tekken-tag-tournament-2/xbox-360-124581</td>\n      <td>Xbox 360</td>\n      <td>7.5</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Good</td>\n      <td>Wild Blood</td>\n      <td>/games/wild-blood/iphone-139363</td>\n      <td>iPhone</td>\n      <td>7.0</td>\n      <td>NaN</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Amazing</td>\n      <td>Mark of the Ninja</td>\n      <td>/games/mark-of-the-ninja-135615/xbox-360-129276</td>\n      <td>Xbox 360</td>\n      <td>9.0</td>\n      <td>Action, Adventure</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Amazing</td>\n      <td>Mark of the Ninja</td>\n      <td>/games/mark-of-the-ninja-135615/pc-143761</td>\n      <td>PC</td>\n      <td>9.0</td>\n      <td>Action, Adventure</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Okay</td>\n      <td>Home: A Unique Horror Adventure</td>\n      <td>/games/home-a-unique-horror-adventure/pc-137135</td>\n      <td>PC</td>\n      <td>6.5</td>\n      <td>Adventure</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>Great</td>\n      <td>Avengers Initiative</td>\n      <td>/games/avengers-initiative/iphone-141579</td>\n      <td>iPhone</td>\n      <td>8.0</td>\n      <td>Action</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>Mediocre</td>\n      <td>Way of the Samurai 4</td>\n      <td>/games/way-of-the-samurai-4/ps3-23516</td>\n      <td>PlayStation 3</td>\n      <td>5.5</td>\n      <td>Action, Adventure</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Good</td>\n      <td>JoJo's Bizarre Adventure HD</td>\n      <td>/games/jojos-bizarre-adventure/xbox-360-137717</td>\n      <td>Xbox 360</td>\n      <td>7.0</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>Good</td>\n      <td>JoJo's Bizarre Adventure HD</td>\n      <td>/games/jojos-bizarre-adventure/ps3-137896</td>\n      <td>PlayStation 3</td>\n      <td>7.0</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>Good</td>\n      <td>Mass Effect 3: Leviathan</td>\n      <td>/games/mass-effect-3-leviathan/xbox-360-138918</td>\n      <td>Xbox 360</td>\n      <td>7.5</td>\n      <td>RPG</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>31</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>Good</td>\n      <td>Mass Effect 3: Leviathan</td>\n      <td>/games/mass-effect-3-leviathan/ps3-138915</td>\n      <td>PlayStation 3</td>\n      <td>7.5</td>\n      <td>RPG</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>31</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>Good</td>\n      <td>Mass Effect 3: Leviathan</td>\n      <td>/games/mass-effect-3-leviathan/pc-138919</td>\n      <td>PC</td>\n      <td>7.5</td>\n      <td>RPG</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>31</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>Amazing</td>\n      <td>Dark Souls (Prepare to Die Edition)</td>\n      <td>/games/dark-souls-prepare-to-die-edition/pc-13...</td>\n      <td>PC</td>\n      <td>9.0</td>\n      <td>Action, RPG</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>31</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>Good</td>\n      <td>Symphony</td>\n      <td>/games/symphony/pc-136470</td>\n      <td>PC</td>\n      <td>7.0</td>\n      <td>Shooter</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>Good</td>\n      <td>Tom Clancy's Ghost Recon Phantoms</td>\n      <td>/games/tom-clancys-ghost-recon-online/pc-109114</td>\n      <td>PC</td>\n      <td>7.5</td>\n      <td>Shooter</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>29</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>Great</td>\n      <td>Thirty Flights of Loving</td>\n      <td>/games/thirty-flights-of-loving/pc-138374</td>\n      <td>PC</td>\n      <td>8.0</td>\n      <td>Adventure</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>29</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>Okay</td>\n      <td>Legasista</td>\n      <td>/games/legasista/ps3-127147</td>\n      <td>PlayStation 3</td>\n      <td>6.5</td>\n      <td>Action, RPG</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>Great</td>\n      <td>World of Warcraft: Mists of Pandaria</td>\n      <td>/games/world-of-warcraft-mists-of-pandaria/pc-...</td>\n      <td>PC</td>\n      <td>8.7</td>\n      <td>RPG</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>10</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>Bad</td>\n      <td>Hell Yeah! Wrath of the Dead Rabbit</td>\n      <td>/games/hell-yeah-wrath-of-the-dead-rabbit/ps3-...</td>\n      <td>PlayStation 3</td>\n      <td>4.9</td>\n      <td>Platformer</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>10</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>Amazing</td>\n      <td>Pokemon White Version 2</td>\n      <td>/games/pokemon-white-version-2/nds-129228</td>\n      <td>Nintendo DS</td>\n      <td>9.6</td>\n      <td>RPG</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>10</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>Good</td>\n      <td>War of the Roses</td>\n      <td>/games/war-of-the-roses-140577/pc-115849</td>\n      <td>PC</td>\n      <td>7.3</td>\n      <td>Action</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>10</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>Amazing</td>\n      <td>Pokemon Black Version 2</td>\n      <td>/games/pokemon-black-version-2/nds-129224</td>\n      <td>Nintendo DS</td>\n      <td>9.6</td>\n      <td>RPG</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>10</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>Okay</td>\n      <td>Drakerider</td>\n      <td>/games/drakerider/iphone-135745</td>\n      <td>iPhone</td>\n      <td>6.5</td>\n      <td>RPG</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>10</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>18546</th>\n      <td>Great</td>\n      <td>Devil Daggers</td>\n      <td>/games/devil-daggers/pc-20049771</td>\n      <td>PC</td>\n      <td>8.5</td>\n      <td>Shooter</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>2</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>18547</th>\n      <td>Good</td>\n      <td>Superhot</td>\n      <td>/games/superhot/pc-20018899</td>\n      <td>PC</td>\n      <td>7.5</td>\n      <td>Action</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>2</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>18549</th>\n      <td>Good</td>\n      <td>Battleborn</td>\n      <td>/games/battleborn/pc-20021225</td>\n      <td>PC</td>\n      <td>7.1</td>\n      <td>Shooter</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>5</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>18554</th>\n      <td>Good</td>\n      <td>The Park</td>\n      <td>/games/the-park/pc-20042102</td>\n      <td>PC</td>\n      <td>7.0</td>\n      <td>Adventure</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>5</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>18555</th>\n      <td>Great</td>\n      <td>Hitman: Episode 2</td>\n      <td>/games/hitman-episode-2/pc-20051629</td>\n      <td>PC</td>\n      <td>8.5</td>\n      <td>Shooter</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>4</td>\n      <td>29</td>\n    </tr>\n    <tr>\n      <th>18557</th>\n      <td>Amazing</td>\n      <td>Hearts of Iron IV</td>\n      <td>/games/hearts-of-iron-iv/pc-20012080</td>\n      <td>PC</td>\n      <td>9.0</td>\n      <td>Strategy</td>\n      <td>Y</td>\n      <td>2016</td>\n      <td>6</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>18559</th>\n      <td>Okay</td>\n      <td>Dangerous Golf</td>\n      <td>/games/dangerous-golf/pc-20048436</td>\n      <td>PC</td>\n      <td>6.0</td>\n      <td>Sports, Action</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>6</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>18567</th>\n      <td>Great</td>\n      <td>Offworld Trading Company</td>\n      <td>/games/offworld-trading-company/pc-20018639</td>\n      <td>PC</td>\n      <td>8.0</td>\n      <td>Strategy</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>4</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>18568</th>\n      <td>Okay</td>\n      <td>The Walking Dead: Michonne -- Episode 3: What ...</td>\n      <td>/games/the-walking-dead-michonne-episode-3/pc-...</td>\n      <td>PC</td>\n      <td>6.3</td>\n      <td>Adventure</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>4</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>18570</th>\n      <td>Good</td>\n      <td>Battlefleet Gothic: Armada</td>\n      <td>/games/battlefleet-gothic-armada/pc-20030300</td>\n      <td>PC</td>\n      <td>7.1</td>\n      <td>Strategy</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>4</td>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>18572</th>\n      <td>Amazing</td>\n      <td>Overwatch</td>\n      <td>/games/overwatch/pc-20027413</td>\n      <td>PC</td>\n      <td>9.4</td>\n      <td>Shooter</td>\n      <td>Y</td>\n      <td>2016</td>\n      <td>5</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>18575</th>\n      <td>Good</td>\n      <td>Fallout 4: Nuka World</td>\n      <td>/games/fallout-4-nuka-world/pc-20054761</td>\n      <td>PC</td>\n      <td>7.9</td>\n      <td>RPG</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <th>18578</th>\n      <td>Good</td>\n      <td>Master of Orion</td>\n      <td>/games/master-of-orion-wargaming/pc-20038452</td>\n      <td>PC</td>\n      <td>7.1</td>\n      <td>Strategy</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>18580</th>\n      <td>Great</td>\n      <td>Quadrilateral Cowboy</td>\n      <td>/games/quadrilateral-cowboy/pc-159788</td>\n      <td>PC</td>\n      <td>8.5</td>\n      <td>Puzzle</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>18581</th>\n      <td>Great</td>\n      <td>Fallout 4: Vault-Tec Workshop</td>\n      <td>/games/fallout-4-vault-tec-workshop/pc-20054769</td>\n      <td>PC</td>\n      <td>8.2</td>\n      <td>RPG</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>18583</th>\n      <td>Great</td>\n      <td>Kentucky Route Zero: Act 4</td>\n      <td>/games/kentucky-route-zero-act-4/pc-20046280</td>\n      <td>PC</td>\n      <td>8.5</td>\n      <td>Adventure</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>18586</th>\n      <td>Great</td>\n      <td>F1 2016</td>\n      <td>/games/f1-2016/pc-20054151</td>\n      <td>PC</td>\n      <td>8.8</td>\n      <td>Racing</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>24</td>\n    </tr>\n    <tr>\n      <th>18589</th>\n      <td>Amazing</td>\n      <td>Deus Ex: Mankind Divided</td>\n      <td>/games/deus-ex-mankind-divided/pc-20013794</td>\n      <td>PC</td>\n      <td>9.2</td>\n      <td>Action, RPG</td>\n      <td>Y</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>19</td>\n    </tr>\n    <tr>\n      <th>18595</th>\n      <td>Bad</td>\n      <td>Ghostbusters</td>\n      <td>/games/ghostbusters-the-movie/pc-20052317</td>\n      <td>PC</td>\n      <td>4.4</td>\n      <td>Action</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>16</td>\n    </tr>\n    <tr>\n      <th>18596</th>\n      <td>Okay</td>\n      <td>Necropolis</td>\n      <td>/games/necropolis/pc-20030346</td>\n      <td>PC</td>\n      <td>6.5</td>\n      <td>Action, Adventure</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>14</td>\n    </tr>\n    <tr>\n      <th>18598</th>\n      <td>Okay</td>\n      <td>Furi</td>\n      <td>/games/furi/pc-20044439</td>\n      <td>PC</td>\n      <td>6.8</td>\n      <td>Action</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>18600</th>\n      <td>Good</td>\n      <td>Hitman: Episode 4</td>\n      <td>/games/hitman-episode-4/pc-20051637</td>\n      <td>PC</td>\n      <td>7.4</td>\n      <td>Shooter</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>19</td>\n    </tr>\n    <tr>\n      <th>18603</th>\n      <td>Good</td>\n      <td>Grow Up</td>\n      <td>/games/grow-up/pc-20054824</td>\n      <td>PC</td>\n      <td>7.8</td>\n      <td>Platformer</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>18</td>\n    </tr>\n    <tr>\n      <th>18606</th>\n      <td>Okay</td>\n      <td>Starcraft II: Nova Covert Ops -- Mission Pack 2</td>\n      <td>/games/starcraft-ii-nova-covert-ops-mission-pa...</td>\n      <td>PC</td>\n      <td>6.4</td>\n      <td>Strategy</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>18607</th>\n      <td>Good</td>\n      <td>Pokemon Go</td>\n      <td>/games/pokemon-go/iphone-20042699</td>\n      <td>iPhone</td>\n      <td>7.0</td>\n      <td>Battle</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>18613</th>\n      <td>Great</td>\n      <td>XCOM 2: Shen's Last Gift</td>\n      <td>/games/xcom-2-shens-last-gift/pc-20055520</td>\n      <td>PC</td>\n      <td>8.0</td>\n      <td>Strategy</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>18616</th>\n      <td>Good</td>\n      <td>Batman: The Telltale Series -- Episode 1: Real...</td>\n      <td>/games/batman-the-telltale-series-episode-1-re...</td>\n      <td>PC</td>\n      <td>7.5</td>\n      <td>Adventure</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>18618</th>\n      <td>Amazing</td>\n      <td>Starbound</td>\n      <td>/games/starbound-2016/pc-128879</td>\n      <td>PC</td>\n      <td>9.1</td>\n      <td>Action</td>\n      <td>Y</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>18619</th>\n      <td>Good</td>\n      <td>Human Fall Flat</td>\n      <td>/games/human-fall-flat/pc-20051928</td>\n      <td>PC</td>\n      <td>7.9</td>\n      <td>Puzzle, Action</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>18624</th>\n      <td>Masterpiece</td>\n      <td>Inside</td>\n      <td>/games/inside-playdead/pc-20055740</td>\n      <td>PC</td>\n      <td>10.0</td>\n      <td>Adventure</td>\n      <td>Y</td>\n      <td>2016</td>\n      <td>6</td>\n      <td>28</td>\n    </tr>\n  </tbody>\n</table>\n<p>13979 rows × 10 columns</p>\n</div>\n\n---\n## 展示数据\n现在已经有了前十平台的数据，需要思考的就是如何来呈现每个平台的游戏质量呢？当然可以用每个平台的`score`的平均值来对比，但未免有点单薄了。数据属性中有一列是`score_phrase`，用一个单词来形容当前游戏的好坏，与`score`直接挂钩，用这个来展示应该会更容易理解和分析。\n\n这里可以用`Matplotlib.pyplot`的`bar`来画，也可以用`Seaborn`中的`countplot`，后者使用起来更容易方便。\n```python\nsns.countplot(x=\"platform\", hue=\"score_phrase\", data=filtered_reviews, palette=sns.xkcd_palette(colors));\n```\n\n![png](/images/output_13_0.png)\n\n展示的结果如上图所示，我们可以看到PC平台下，`Great`和`Good`这两栏下的游戏数量基本就占了大半，但我并不能说PC端的游戏质量就比其他平台高出一筹，因为我们依然无法判断每个平台下优秀的作品占比如何。这幅图只能直观地告诉我们每个平台下，所有分数的一个分布状况。\n\n所以，下面的工作，我要继续细化一下数据分析和展示的部分。\n\n---\n## 进一步分析与展示数据\n因为原先划分的`score_phrase`太多了，我决定将它们重新划为三个部分：好于`Good`的，差于`Okay`的，剩下的就是中间部分。我的这个标准可能比较严格，在我看来，评分`8.0`以上的才算的上是优秀的作品，也就是高于`Good`的；至于那些评分低于`6.0`的，也就是还不到`Okay`的，算作差劲也不算失礼吧。\n\n```python\nall_score_phrases = set(reviews[\"score_phrase\"].unique())\nbt_good = set(['Great', 'Amazing', 'Masterpiece'])\naverage = set(['Good', 'Okay'])\nwt_okay = all_score_phrases - bt_good - average\n    \ndef category_score_phrase(value):\n    if value in bt_good:\n        return \"Better than Good\"\n    elif value in wt_okay:\n        return \"Worse than Okay\"\n    else:\n        return \"Average\"\n        \nsizes = filtered_reviews[\"score_phrase\"].apply(category_score_phrase).value_counts()\nexplode = (0, 0.1, 0)\nplt.pie(sizes, labels=sizes.index, explode=explode, autopct='%1.2f%%', shadow=True, startangle=90);\n```\n\n![png](/images/output_14_0.png)\n\n这里我先用饼图来展示一下前十的平台，整体的游戏质量分布情况。\n\n这里，我创建了一个新列，叫`score_phrase_new`，为了区别原有的`score_phrase`。\n\n```python\nfiltered_reviews[\"score_phrase_new\"] = filtered_reviews[\"score_phrase\"].apply(category_score_phrase)\nfiltered_reviews.head()\n```\n\n<div>\n<table class=\"blueTable\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>score_phrase</th>\n      <th>title</th>\n      <th>url</th>\n      <th>platform</th>\n      <th>score</th>\n      <th>genre</th>\n      <th>editors_choice</th>\n      <th>release_year</th>\n      <th>release_month</th>\n      <th>release_day</th>\n      <th>score_phrase_new</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/xbox-360-128182</td>\n      <td>Xbox 360</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n      <td>Better than Good</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/ps3-128181</td>\n      <td>PlayStation 3</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n      <td>Better than Good</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Awful</td>\n      <td>Double Dragon: Neon</td>\n      <td>/games/double-dragon-neon/xbox-360-131320</td>\n      <td>Xbox 360</td>\n      <td>3.0</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n      <td>Worse than Okay</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Amazing</td>\n      <td>Guild Wars 2</td>\n      <td>/games/guild-wars-2/pc-896298</td>\n      <td>PC</td>\n      <td>9.0</td>\n      <td>RPG</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n      <td>Better than Good</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Awful</td>\n      <td>Double Dragon: Neon</td>\n      <td>/games/double-dragon-neon/ps3-131321</td>\n      <td>PlayStation 3</td>\n      <td>3.0</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n      <td>Worse than Okay</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n先来用数字直观地看一下每个平台下，每个评分阶段的数量。\n```python\nfiltered_reviews.groupby([\"platform\", \"score_phrase_new\"]).count()\n```\n\n<div>\n<table class=\"blueTable\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>score_phrase</th>\n      <th>title</th>\n      <th>url</th>\n      <th>score</th>\n      <th>genre</th>\n      <th>editors_choice</th>\n      <th>release_year</th>\n      <th>release_month</th>\n      <th>release_day</th>\n    </tr>\n    <tr>\n      <th>platform</th>\n      <th>score_phrase_new</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Nintendo DS</th>\n      <th>Average</th>\n      <td>462</td>\n      <td>462</td>\n      <td>462</td>\n      <td>462</td>\n      <td>462</td>\n      <td>462</td>\n      <td>462</td>\n      <td>462</td>\n      <td>462</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>207</td>\n      <td>207</td>\n      <td>207</td>\n      <td>207</td>\n      <td>207</td>\n      <td>207</td>\n      <td>207</td>\n      <td>207</td>\n      <td>207</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>376</td>\n      <td>376</td>\n      <td>376</td>\n      <td>376</td>\n      <td>375</td>\n      <td>376</td>\n      <td>376</td>\n      <td>376</td>\n      <td>376</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">PC</th>\n      <th>Average</th>\n      <td>1394</td>\n      <td>1394</td>\n      <td>1394</td>\n      <td>1394</td>\n      <td>1393</td>\n      <td>1394</td>\n      <td>1394</td>\n      <td>1394</td>\n      <td>1394</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>1323</td>\n      <td>1323</td>\n      <td>1323</td>\n      <td>1323</td>\n      <td>1322</td>\n      <td>1323</td>\n      <td>1323</td>\n      <td>1323</td>\n      <td>1323</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>653</td>\n      <td>653</td>\n      <td>653</td>\n      <td>653</td>\n      <td>652</td>\n      <td>653</td>\n      <td>653</td>\n      <td>653</td>\n      <td>653</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">PlayStation</th>\n      <th>Average</th>\n      <td>362</td>\n      <td>362</td>\n      <td>362</td>\n      <td>362</td>\n      <td>362</td>\n      <td>362</td>\n      <td>362</td>\n      <td>362</td>\n      <td>362</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>313</td>\n      <td>313</td>\n      <td>313</td>\n      <td>313</td>\n      <td>313</td>\n      <td>313</td>\n      <td>313</td>\n      <td>313</td>\n      <td>313</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>277</td>\n      <td>277</td>\n      <td>277</td>\n      <td>277</td>\n      <td>277</td>\n      <td>277</td>\n      <td>277</td>\n      <td>277</td>\n      <td>277</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">PlayStation 2</th>\n      <th>Average</th>\n      <td>716</td>\n      <td>716</td>\n      <td>716</td>\n      <td>716</td>\n      <td>716</td>\n      <td>716</td>\n      <td>716</td>\n      <td>716</td>\n      <td>716</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>542</td>\n      <td>542</td>\n      <td>542</td>\n      <td>542</td>\n      <td>542</td>\n      <td>542</td>\n      <td>542</td>\n      <td>542</td>\n      <td>542</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>428</td>\n      <td>428</td>\n      <td>428</td>\n      <td>428</td>\n      <td>426</td>\n      <td>428</td>\n      <td>428</td>\n      <td>428</td>\n      <td>428</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">PlayStation 3</th>\n      <th>Average</th>\n      <td>516</td>\n      <td>516</td>\n      <td>516</td>\n      <td>516</td>\n      <td>515</td>\n      <td>516</td>\n      <td>516</td>\n      <td>516</td>\n      <td>516</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>569</td>\n      <td>569</td>\n      <td>569</td>\n      <td>569</td>\n      <td>569</td>\n      <td>569</td>\n      <td>569</td>\n      <td>569</td>\n      <td>569</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>271</td>\n      <td>271</td>\n      <td>271</td>\n      <td>271</td>\n      <td>271</td>\n      <td>271</td>\n      <td>271</td>\n      <td>271</td>\n      <td>271</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Wii</th>\n      <th>Average</th>\n      <td>551</td>\n      <td>551</td>\n      <td>551</td>\n      <td>551</td>\n      <td>547</td>\n      <td>551</td>\n      <td>551</td>\n      <td>551</td>\n      <td>551</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>494</td>\n      <td>494</td>\n      <td>494</td>\n      <td>494</td>\n      <td>494</td>\n      <td>494</td>\n      <td>494</td>\n      <td>494</td>\n      <td>494</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Wireless</th>\n      <th>Average</th>\n      <td>473</td>\n      <td>473</td>\n      <td>473</td>\n      <td>473</td>\n      <td>471</td>\n      <td>473</td>\n      <td>473</td>\n      <td>473</td>\n      <td>473</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>308</td>\n      <td>308</td>\n      <td>308</td>\n      <td>308</td>\n      <td>306</td>\n      <td>308</td>\n      <td>308</td>\n      <td>308</td>\n      <td>308</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>129</td>\n      <td>129</td>\n      <td>129</td>\n      <td>129</td>\n      <td>129</td>\n      <td>129</td>\n      <td>129</td>\n      <td>129</td>\n      <td>129</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Xbox</th>\n      <th>Average</th>\n      <td>307</td>\n      <td>307</td>\n      <td>307</td>\n      <td>307</td>\n      <td>307</td>\n      <td>307</td>\n      <td>307</td>\n      <td>307</td>\n      <td>307</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>160</td>\n      <td>160</td>\n      <td>160</td>\n      <td>160</td>\n      <td>160</td>\n      <td>160</td>\n      <td>160</td>\n      <td>160</td>\n      <td>160</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Xbox 360</th>\n      <th>Average</th>\n      <td>631</td>\n      <td>631</td>\n      <td>631</td>\n      <td>631</td>\n      <td>631</td>\n      <td>631</td>\n      <td>631</td>\n      <td>631</td>\n      <td>631</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>646</td>\n      <td>646</td>\n      <td>646</td>\n      <td>646</td>\n      <td>646</td>\n      <td>646</td>\n      <td>646</td>\n      <td>646</td>\n      <td>646</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">iPhone</th>\n      <th>Average</th>\n      <td>412</td>\n      <td>412</td>\n      <td>412</td>\n      <td>412</td>\n      <td>405</td>\n      <td>412</td>\n      <td>412</td>\n      <td>412</td>\n      <td>412</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>315</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>109</td>\n      <td>109</td>\n      <td>109</td>\n      <td>109</td>\n      <td>108</td>\n      <td>109</td>\n      <td>109</td>\n      <td>109</td>\n      <td>109</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n事实上，上面的表格大部分内容也用不上，我们需要的其实就三列：**游戏平台**，**评分阶段**和**数量**。因此我就压缩一下原表格，让它变成下面的样子。\n```python\ncount_df = filtered_reviews.groupby([\"platform\", \"score_phrase_new\"]).count().reset_index().iloc[:, :3]\ncount_df.rename(columns={\"score_phrase\": \"count\"}, inplace=True)\ncount_df\n```\n\n<div>\n<table class=\"blueTable\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>platform</th>\n      <th>score_phrase_new</th>\n      <th>count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Nintendo DS</td>\n      <td>Average</td>\n      <td>462</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Nintendo DS</td>\n      <td>Better than Good</td>\n      <td>207</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Nintendo DS</td>\n      <td>Worse than Okay</td>\n      <td>376</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>PC</td>\n      <td>Average</td>\n      <td>1394</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>PC</td>\n      <td>Better than Good</td>\n      <td>1323</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>PC</td>\n      <td>Worse than Okay</td>\n      <td>653</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>PlayStation</td>\n      <td>Average</td>\n      <td>362</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>PlayStation</td>\n      <td>Better than Good</td>\n      <td>313</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>PlayStation</td>\n      <td>Worse than Okay</td>\n      <td>277</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>PlayStation 2</td>\n      <td>Average</td>\n      <td>716</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>PlayStation 2</td>\n      <td>Better than Good</td>\n      <td>542</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>PlayStation 2</td>\n      <td>Worse than Okay</td>\n      <td>428</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>PlayStation 3</td>\n      <td>Average</td>\n      <td>516</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>PlayStation 3</td>\n      <td>Better than Good</td>\n      <td>569</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>PlayStation 3</td>\n      <td>Worse than Okay</td>\n      <td>271</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Wii</td>\n      <td>Average</td>\n      <td>551</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Wii</td>\n      <td>Better than Good</td>\n      <td>321</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>Wii</td>\n      <td>Worse than Okay</td>\n      <td>494</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>Wireless</td>\n      <td>Average</td>\n      <td>473</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Wireless</td>\n      <td>Better than Good</td>\n      <td>308</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>Wireless</td>\n      <td>Worse than Okay</td>\n      <td>129</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>Xbox</td>\n      <td>Average</td>\n      <td>307</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>Xbox</td>\n      <td>Better than Good</td>\n      <td>354</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>Xbox</td>\n      <td>Worse than Okay</td>\n      <td>160</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>Xbox 360</td>\n      <td>Average</td>\n      <td>631</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>Xbox 360</td>\n      <td>Better than Good</td>\n      <td>646</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>Xbox 360</td>\n      <td>Worse than Okay</td>\n      <td>354</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>iPhone</td>\n      <td>Average</td>\n      <td>412</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>iPhone</td>\n      <td>Better than Good</td>\n      <td>321</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>iPhone</td>\n      <td>Worse than Okay</td>\n      <td>109</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n数据拿到手了，下面又该是用图形展示数据的时候。这次我们来看一下每一个评分阶段对于各自游戏平台占比究竟是多少。\n\n```python\nbar_width = 1\nbar_left = [i for i in range(len(count_df) // 3)]\ntick_pos = [i + (bar_width / 2) for i in bar_left]\ntotals = [i + j + k for i, j, k in zip(count_df[\"count\"][::3], count_df[\"count\"][1::3], count_df[\"count\"][2::3])]\nave_perc = [i / j * 100 for i, j in zip(count_df[\"count\"][::3], totals)]\nbt_good_perc = [i / j * 100 for i, j in zip(count_df[\"count\"][1::3], totals)]\nwt_okay_perc = [i / j * 100 for i, j in zip(count_df[\"count\"][2::3], totals)]\n```\n\n\n```python\nf, ax = plt.subplots(1)\n    \nax.bar(bar_left, \n       wt_okay_perc,\n       label=\"Worst than Okay\",\n       alpha=0.9,\n       width=bar_width,\n       edgecolor=\"white\")\n       \nax.bar(bar_left,\n       ave_perc,\n       bottom=wt_okay_perc,\n       label=\"Average\",\n       alpha=0.9,\n       width=bar_width,\n       edgecolor=\"white\")\n       \nax.bar(bar_left,\n       bt_good_perc,\n       bottom=[i+j for i, j in zip(wt_okay_perc, ave_perc)],\n       label=\"Better than Good\",\n       alpha=0.9,\n       width=bar_width,\n       edgecolor=\"white\")\n       \nplt.xticks(tick_pos, set(count_df[\"platform\"]))\nax.set_ylabel(\"Percentage\")\nax.set_xlabel(\"\")\nplt.legend(bbox_to_anchor=(1., 1.))\nplt.setp(plt.gca().get_xticklabels(), rotation=45, horizontalalignment=\"right\")\nplt.show()\n```\n\n![png](/images/output_19_0.png)\n\n我并没有直接把具体百分比的数值标记在上面，不过通过直观的图形依然可以看到一些信息。从图中可以看出来，相对来说，`PlayStation`，`PlayStation2`，`Wii`，`PC`和`Nintendo DS`的游戏质量都是很不错的，高质量游戏占比高，且低质量游戏占比低。`PlayStation3`虽然低质量游戏占比很小，但是高品质游戏也不算很多。`iPhone`和`Xbox`的表现算是最差的了，低质量游戏占比分属最高的一二，高品质游戏也是最低的两个平台。其实`iPhone`是这样的倒是不意外了，因为毕竟`iPhone`平台的起点相对于其他的平台要低很多，基本上三五个人，甚至一个人做出的游戏都有，这样很难保证游戏兼顾趣味性和剧情或者其他方面。在后期维护上面肯定也要比大公司开发的游戏差了很多。遗憾的是`Xbox`竟然也有如此差劲的表现，着实令我难以理解。\n\n---\n# 总结\n至此，我打算分析的内容就呈现完了，这就是我个人拿到数据之后一个简单的想法，然后试着去将这个想法用数据分析的方法展现出来，供自己去理解。后面我还会对这个数据集进一步的分析，比如去探讨一下年份和分数的关系，游戏类别和分数的关系。希望这篇文章可以起到抛砖引玉的作用，能让各位看完之后对于如何开始分析一份数据有自己的想法。\n\n各位看官对于本文有任何不明白的地方，欢迎提问，也欢迎指正和建议。\n\n---\n# Related Links\n1. [Pandas Tutorial: Data analysis with Python: Part 1](https://www.dataquest.io/blog/pandas-python-tutorial/)\n2. [Pandas Tutorial: Data analysis with Python: Part 2](https://www.dataquest.io/blog/pandas-tutorial-python-2/)\n3. [Stacked Percentage Bar Plot In MatPlotLib](https://chrisalbon.com/python/matplotlib_percentage_stacked_bar_plot.html)\n","source":"_posts/Data-analysis-in-Python-by-Pandas.md","raw":"---\ntitle: Data analysis in Python by Pandas\ndate: 2017-10-02 00:03:37\ntags:\n    - Python\n    - Pandas\n    - Data analysis\ncategories:\n    - Data analysis\n---\n\nPython在数据科学领域的应用真的是越来越普及，得益于Python相对来讲通俗易懂的语言风格，语法简单且容易入门的特性，给很多数据科学领域的朋友，减轻了一部分学习编程语言的繁重。`Pandas` + `NumPy` + `Matplotlib`，这三者的结合基本可以胜任任意简单的数据分析和可视化的任务。复杂一点的可能还会需要`SciPy`的帮助。\n\n# 本文目的\n这次，我打算用一篇长文来记录一下自己是如何利用Pandas进行数据分析的。网上有很多的`Pandas`入门教程，因此我这里并不打算针对所有Pandas的基础操作描述的那么清楚，还是希望更多的表达一些对于数据分析的想法和实现。\n\n广义上，数据分析其实包含了从导入数据->清洗数据->**分析数据**->展示数据，这一从头到尾的流程。狭义上，数据分析指的就是中间分析数据这一块内容。本文按照广义上的数据分析的过程来一步步探讨。\n\n接下来我们就正式开始本次数据分析之旅。\n\n<!--more-->\n\n---\n# 正文\n下面的这一段代码主要是包的调用和一些环境配置，`Seaborn`是也是一个plot包，可用来画出比`Matplotlib`更漂亮的图，它本身是基于`Matplotlib`设计的，对`NumPy`和`Pandas`都有很好的支持。这里我就不做过多解释了，对`Seaborn`有兴趣的朋友可以留言咨询或者自行探索。\n```python\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n    \n%matplotlib inline\n    \nsns.set(rc={\"figure.figsize\": (10, 6.25)})\nsns.set_style(\"darkgrid\")\ncolors = [\"windows blue\", \"amber\", \"faded green\", \"greyish\", \"dusty purple\", \"red violet\", \"marine\", \"jungle green\", \"chocolate brown\", \"dull pink\", \"reddish orange\"]\nsns.set_palette(sns.xkcd_palette(colors))\n```\n\n---\n## 导入数据\n我这次用的数据是IGN上近20年来的各种平台的游戏，来源于[这里](https://www.kaggle.com/egrinstein/20-years-of-games)。\n\n```python\nreviews = pd.read_csv(\"ign.csv\")\n```\n\n数据读入之后，我们来看一下这里都有些什么内容。\n```python\nreviews.head()\n```\n\n<div>\n<table class=\"blueTable\">\n  <thead>\n    <tr style=\"text-align: center;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>score_phrase</th>\n      <th>title</th>\n      <th>url</th>\n      <th>platform</th>\n      <th>score</th>\n      <th>genre</th>\n      <th>editors_choice</th>\n      <th>release_year</th>\n      <th>release_month</th>\n      <th>release_day</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>Amazing</td>\n      <td>LittleBigPlanet PS Vita</td>\n      <td>/games/littlebigplanet-vita/vita-98907</td>\n      <td>PlayStation Vita</td>\n      <td>9.0</td>\n      <td>Platformer</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Amazing</td>\n      <td>LittleBigPlanet PS Vita -- Marvel Super Hero E...</td>\n      <td>/games/littlebigplanet-ps-vita-marvel-super-he...</td>\n      <td>PlayStation Vita</td>\n      <td>9.0</td>\n      <td>Platformer</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>Great</td>\n      <td>Splice: Tree of Life</td>\n      <td>/games/splice/ipad-141070</td>\n      <td>iPad</td>\n      <td>8.5</td>\n      <td>Puzzle</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/xbox-360-128182</td>\n      <td>Xbox 360</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/ps3-128181</td>\n      <td>PlayStation 3</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n这里先简单介绍一下每一列都代表什么吧：\n- score_phrase – IGN用一个词来评价当前游戏，与得分直接相关；\n- title – 游戏名称；\n- url – 完整评论的地址；\n- platform – 游戏平台（PS4, PC, Xbox, etc.）；\n- score – 游戏的具体评分，从1.0到10.0；\n- genre – 游戏分类；\n- editors_choice – 是否为IGN编辑推荐的游戏，与评分有关系。\n- release_year – 游戏发布年份；\n- release_month – 发布月份；\n- release_day – 发布日期。\n\n我们来看下总共多少个数据。\n```python\nreviews.shape\n```\n\n    (18625, 11)\n\n看来我们这次的数据里一共`18625`条数据，一共`11`列属性。\n\n---\n## 清洗数据\n源数据导入后一般来说是不能直接使用的，需要进行一定范围的数据清洗，不过本次的数据基本不需要清洗，收集这个数据的_Eric Grinstein_已经对数据进行了清洗工作。不过这里我们仍需要做一点简单的清洗工作，去除一些我们不需要的内容。\n\n```python\nreviews = reviews.iloc[:, 1:]\nreviews.head()\n```\n\n<div>\n<style>\n    .dataframe {\n      display: block;\n      overflow-x: auto;\n      white-space: nowrap;\n    }\n\n    .dataframe thead tr:only-child th {\n        text-align: center;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n</style>\n<table class=\"blueTable\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>score_phrase</th>\n      <th>title</th>\n      <th>url</th>\n      <th>platform</th>\n      <th>score</th>\n      <th>genre</th>\n      <th>editors_choice</th>\n      <th>release_year</th>\n      <th>release_month</th>\n      <th>release_day</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Amazing</td>\n      <td>LittleBigPlanet PS Vita</td>\n      <td>/games/littlebigplanet-vita/vita-98907</td>\n      <td>PlayStation Vita</td>\n      <td>9.0</td>\n      <td>Platformer</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Amazing</td>\n      <td>LittleBigPlanet PS Vita -- Marvel Super Hero E...</td>\n      <td>/games/littlebigplanet-ps-vita-marvel-super-he...</td>\n      <td>PlayStation Vita</td>\n      <td>9.0</td>\n      <td>Platformer</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Great</td>\n      <td>Splice: Tree of Life</td>\n      <td>/games/splice/ipad-141070</td>\n      <td>iPad</td>\n      <td>8.5</td>\n      <td>Puzzle</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/xbox-360-128182</td>\n      <td>Xbox 360</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/ps3-128181</td>\n      <td>PlayStation 3</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n---\n## 分析数据\n数据清洗之后，其实就是分析过程的正式开始。在开始分析过程之前，先说点题外话。我本身对于游戏是很热爱的，从小到大，游戏机，掌机，PC，也拥有过不少的游戏平台。从和父母斗智斗勇中各种争取时间玩的红白机，小霸王学习机，到后来可以躲在被子里玩的GameBoy，但偶尔还得探出头担心父母进屋里发现自己的小秘密；再往后的世嘉，所以又不得不和父母软磨硬泡恳求游戏时间。直至家里第一台PC的出现，基本其他的游戏平台就很少碰了，除了后来的PSP，那是我从GameBoy之后时隔很多年再次拿起掌机玩游戏。要说起游戏，游戏平台，游戏的历史，真的说上三天三夜也说不完，其实这也是我为什么选择这么IGN的这个数据作为数据分析的数据来源。我也很想看看这20年来电子游戏产业的发展和趋势。\n\n好了，咱们言归正传，就我个人而言，拿到这么多的数据之后，第一反应是：这么多的游戏，究竟是分布在了多少平台上呢？我亲身体验过的平台其实并不多，大概10个左右吧。那么这个数据集里究竟包含了多少平台呢？\n\n```python\nall_platforms = reviews[\"platform\"].unique()\nall_platforms\n```\n\n    array(['PlayStation Vita', 'iPad', 'Xbox 360', 'PlayStation 3',\n           'Macintosh', 'PC', 'iPhone', 'Nintendo DS', 'Nintendo 3DS',\n           'Android', 'Wii', 'PlayStation 4', 'Wii U', 'Linux',\n           'PlayStation Portable', 'PlayStation', 'Nintendo 64', 'Saturn',\n           'Lynx', 'Game Boy', 'Game Boy Color', 'NeoGeo Pocket Color',\n           'Game.Com', 'Dreamcast', 'Dreamcast VMU', 'WonderSwan', 'Arcade',\n           'Nintendo 64DD', 'PlayStation 2', 'WonderSwan Color',\n           'Game Boy Advance', 'Xbox', 'GameCube', 'DVD / HD Video Game',\n           'Wireless', 'Pocket PC', 'N-Gage', 'NES', 'iPod', 'Genesis',\n           'TurboGrafx-16', 'Super NES', 'NeoGeo', 'Master System',\n           'Atari 5200', 'TurboGrafx-CD', 'Atari 2600', 'Sega 32X', 'Vectrex',\n           'Commodore 64/128', 'Sega CD', 'Nintendo DSi', 'Windows Phone',\n           'Web Games', 'Xbox One', 'Windows Surface', 'Ouya',\n           'New Nintendo 3DS', 'SteamOS'], dtype=object)\n\n这么多的平台……说实话，这里有很多我听都没听过，像`Dreamcast`，`Atari 2600`，`Vectrex`等等，看来这20年，游戏产业的发展还是很多元化的，至少从游戏平台上就可以看出端倪。\n\n有了游戏平台的信息，自然而然地就会问，每个平台大概都出过多少游戏呢？\n```python\nreviews[\"platform\"].value_counts(dropna=False)\n```\n\n    PC                      3370\n    PlayStation 2           1686\n    Xbox 360                1631\n    Wii                     1366\n    PlayStation 3           1356\n    Nintendo DS             1045\n    PlayStation              952\n    Wireless                 910\n    iPhone                   842\n    Xbox                     821\n    PlayStation Portable     633\n    Game Boy Advance         623\n    GameCube                 509\n    Game Boy Color           356\n    Nintendo 64              302\n    Dreamcast                286\n    PlayStation 4            277\n    Nintendo DSi             254\n    Nintendo 3DS             225\n    Xbox One                 208\n    PlayStation Vita         155\n    Wii U                    114\n    iPad                      99\n    Lynx                      82\n    Macintosh                 81\n    Genesis                   58\n    NES                       49\n    TurboGrafx-16             40\n    Android                   39\n    Super NES                 33\n    NeoGeo Pocket Color       31\n    N-Gage                    30\n    Game Boy                  22\n    iPod                      17\n    Sega 32X                  16\n    Windows Phone             14\n    Master System             13\n    Arcade                    11\n    Linux                     10\n    NeoGeo                    10\n    Nintendo 64DD              7\n    Commodore 64/128           6\n    Saturn                     6\n    Atari 2600                 5\n    WonderSwan                 4\n    TurboGrafx-CD              3\n    Game.Com                   3\n    Atari 5200                 2\n    New Nintendo 3DS           2\n    Vectrex                    2\n    Pocket PC                  1\n    WonderSwan Color           1\n    Ouya                       1\n    Web Games                  1\n    SteamOS                    1\n    Dreamcast VMU              1\n    Windows Surface            1\n    DVD / HD Video Game        1\n    Sega CD                    1\n    Name: platform, dtype: int64\n\n从上面的统计来看，PC端无疑是最大的贡献者，这也可以理解，毕竟个人电脑从上个世纪末开始出现井喷，到后来虽然出货量开始下降，但一直都是人们学习生活娱乐中不可或缺的一部分，并且早期的个人电脑绝大部分都是以Windows为操作系统。不过让我没想到的是`Dreamcast`竟然还有286款游戏，看来是我孤陋寡闻了……\n\n下面来看看排名前十的平台都有哪些。\n\n```python\nplatforms = reviews[\"platform\"].value_counts()[:10].index.tolist()\nplatforms\n```\n\n    ['PC',\n    'PlayStation 2',\n    'Xbox 360',\n    'Wii',\n    'PlayStation 3',\n    'Nintendo DS',\n    'PlayStation',\n    'Wireless',\n    'iPhone',\n    'Xbox']\n\n既然前十的平台我已经知道了，那么下面来看看每个平台的游戏质量如何，虽然PC端的游戏最多，但不一定好游戏占比就是最多的，对吧？\n\n想知道每个平台的游戏质量如何，我得先从所有的数据中将只属于前十的平台的游戏提取出来。这里我创建一个filter，用来筛选游戏平台。\n```python\nfil = reviews[\"platform\"] == platforms[0]   # create a filter\nfil\n```\n\n    0        False\n    1        False\n    2        False\n    3        False\n    4        False\n    5        False\n    6        False\n    7         True\n    8        False\n    9         True\n              ...\n    18615    False\n    18616     True\n    18617    False\n    18618     True\n    18619     True\n    18620    False\n    18621    False\n    18622    False\n    18623    False\n    18624     True\n    Name: platform, Length: 18625, dtype: bool\n\n\n```python\nfor platform in platforms[1:]:\n    fil |= reviews[\"platform\"] == platform\n    \nfiltered_reviews = reviews[fil]\n```\n\n下面是提取出来的所有数据：\n```python\nfiltered_reviews\n```\n\n<div>\n<table class=\"blueTable\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>score_phrase</th>\n      <th>title</th>\n      <th>url</th>\n      <th>platform</th>\n      <th>score</th>\n      <th>genre</th>\n      <th>editors_choice</th>\n      <th>release_year</th>\n      <th>release_month</th>\n      <th>release_day</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/xbox-360-128182</td>\n      <td>Xbox 360</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/ps3-128181</td>\n      <td>PlayStation 3</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Awful</td>\n      <td>Double Dragon: Neon</td>\n      <td>/games/double-dragon-neon/xbox-360-131320</td>\n      <td>Xbox 360</td>\n      <td>3.0</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Amazing</td>\n      <td>Guild Wars 2</td>\n      <td>/games/guild-wars-2/pc-896298</td>\n      <td>PC</td>\n      <td>9.0</td>\n      <td>RPG</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Awful</td>\n      <td>Double Dragon: Neon</td>\n      <td>/games/double-dragon-neon/ps3-131321</td>\n      <td>PlayStation 3</td>\n      <td>3.0</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Good</td>\n      <td>Total War Battles: Shogun</td>\n      <td>/games/total-war-battles-shogun/pc-142564</td>\n      <td>PC</td>\n      <td>7.0</td>\n      <td>Strategy</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Good</td>\n      <td>Tekken Tag Tournament 2</td>\n      <td>/games/tekken-tag-tournament-2/ps3-124584</td>\n      <td>PlayStation 3</td>\n      <td>7.5</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Good</td>\n      <td>Tekken Tag Tournament 2</td>\n      <td>/games/tekken-tag-tournament-2/xbox-360-124581</td>\n      <td>Xbox 360</td>\n      <td>7.5</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Good</td>\n      <td>Wild Blood</td>\n      <td>/games/wild-blood/iphone-139363</td>\n      <td>iPhone</td>\n      <td>7.0</td>\n      <td>NaN</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Amazing</td>\n      <td>Mark of the Ninja</td>\n      <td>/games/mark-of-the-ninja-135615/xbox-360-129276</td>\n      <td>Xbox 360</td>\n      <td>9.0</td>\n      <td>Action, Adventure</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Amazing</td>\n      <td>Mark of the Ninja</td>\n      <td>/games/mark-of-the-ninja-135615/pc-143761</td>\n      <td>PC</td>\n      <td>9.0</td>\n      <td>Action, Adventure</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Okay</td>\n      <td>Home: A Unique Horror Adventure</td>\n      <td>/games/home-a-unique-horror-adventure/pc-137135</td>\n      <td>PC</td>\n      <td>6.5</td>\n      <td>Adventure</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>Great</td>\n      <td>Avengers Initiative</td>\n      <td>/games/avengers-initiative/iphone-141579</td>\n      <td>iPhone</td>\n      <td>8.0</td>\n      <td>Action</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>Mediocre</td>\n      <td>Way of the Samurai 4</td>\n      <td>/games/way-of-the-samurai-4/ps3-23516</td>\n      <td>PlayStation 3</td>\n      <td>5.5</td>\n      <td>Action, Adventure</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Good</td>\n      <td>JoJo's Bizarre Adventure HD</td>\n      <td>/games/jojos-bizarre-adventure/xbox-360-137717</td>\n      <td>Xbox 360</td>\n      <td>7.0</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>Good</td>\n      <td>JoJo's Bizarre Adventure HD</td>\n      <td>/games/jojos-bizarre-adventure/ps3-137896</td>\n      <td>PlayStation 3</td>\n      <td>7.0</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>Good</td>\n      <td>Mass Effect 3: Leviathan</td>\n      <td>/games/mass-effect-3-leviathan/xbox-360-138918</td>\n      <td>Xbox 360</td>\n      <td>7.5</td>\n      <td>RPG</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>31</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>Good</td>\n      <td>Mass Effect 3: Leviathan</td>\n      <td>/games/mass-effect-3-leviathan/ps3-138915</td>\n      <td>PlayStation 3</td>\n      <td>7.5</td>\n      <td>RPG</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>31</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>Good</td>\n      <td>Mass Effect 3: Leviathan</td>\n      <td>/games/mass-effect-3-leviathan/pc-138919</td>\n      <td>PC</td>\n      <td>7.5</td>\n      <td>RPG</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>31</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>Amazing</td>\n      <td>Dark Souls (Prepare to Die Edition)</td>\n      <td>/games/dark-souls-prepare-to-die-edition/pc-13...</td>\n      <td>PC</td>\n      <td>9.0</td>\n      <td>Action, RPG</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>31</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>Good</td>\n      <td>Symphony</td>\n      <td>/games/symphony/pc-136470</td>\n      <td>PC</td>\n      <td>7.0</td>\n      <td>Shooter</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>Good</td>\n      <td>Tom Clancy's Ghost Recon Phantoms</td>\n      <td>/games/tom-clancys-ghost-recon-online/pc-109114</td>\n      <td>PC</td>\n      <td>7.5</td>\n      <td>Shooter</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>29</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>Great</td>\n      <td>Thirty Flights of Loving</td>\n      <td>/games/thirty-flights-of-loving/pc-138374</td>\n      <td>PC</td>\n      <td>8.0</td>\n      <td>Adventure</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>29</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>Okay</td>\n      <td>Legasista</td>\n      <td>/games/legasista/ps3-127147</td>\n      <td>PlayStation 3</td>\n      <td>6.5</td>\n      <td>Action, RPG</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>Great</td>\n      <td>World of Warcraft: Mists of Pandaria</td>\n      <td>/games/world-of-warcraft-mists-of-pandaria/pc-...</td>\n      <td>PC</td>\n      <td>8.7</td>\n      <td>RPG</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>10</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>Bad</td>\n      <td>Hell Yeah! Wrath of the Dead Rabbit</td>\n      <td>/games/hell-yeah-wrath-of-the-dead-rabbit/ps3-...</td>\n      <td>PlayStation 3</td>\n      <td>4.9</td>\n      <td>Platformer</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>10</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>Amazing</td>\n      <td>Pokemon White Version 2</td>\n      <td>/games/pokemon-white-version-2/nds-129228</td>\n      <td>Nintendo DS</td>\n      <td>9.6</td>\n      <td>RPG</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>10</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>Good</td>\n      <td>War of the Roses</td>\n      <td>/games/war-of-the-roses-140577/pc-115849</td>\n      <td>PC</td>\n      <td>7.3</td>\n      <td>Action</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>10</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>Amazing</td>\n      <td>Pokemon Black Version 2</td>\n      <td>/games/pokemon-black-version-2/nds-129224</td>\n      <td>Nintendo DS</td>\n      <td>9.6</td>\n      <td>RPG</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>10</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>Okay</td>\n      <td>Drakerider</td>\n      <td>/games/drakerider/iphone-135745</td>\n      <td>iPhone</td>\n      <td>6.5</td>\n      <td>RPG</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>10</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>18546</th>\n      <td>Great</td>\n      <td>Devil Daggers</td>\n      <td>/games/devil-daggers/pc-20049771</td>\n      <td>PC</td>\n      <td>8.5</td>\n      <td>Shooter</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>2</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>18547</th>\n      <td>Good</td>\n      <td>Superhot</td>\n      <td>/games/superhot/pc-20018899</td>\n      <td>PC</td>\n      <td>7.5</td>\n      <td>Action</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>2</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>18549</th>\n      <td>Good</td>\n      <td>Battleborn</td>\n      <td>/games/battleborn/pc-20021225</td>\n      <td>PC</td>\n      <td>7.1</td>\n      <td>Shooter</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>5</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>18554</th>\n      <td>Good</td>\n      <td>The Park</td>\n      <td>/games/the-park/pc-20042102</td>\n      <td>PC</td>\n      <td>7.0</td>\n      <td>Adventure</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>5</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>18555</th>\n      <td>Great</td>\n      <td>Hitman: Episode 2</td>\n      <td>/games/hitman-episode-2/pc-20051629</td>\n      <td>PC</td>\n      <td>8.5</td>\n      <td>Shooter</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>4</td>\n      <td>29</td>\n    </tr>\n    <tr>\n      <th>18557</th>\n      <td>Amazing</td>\n      <td>Hearts of Iron IV</td>\n      <td>/games/hearts-of-iron-iv/pc-20012080</td>\n      <td>PC</td>\n      <td>9.0</td>\n      <td>Strategy</td>\n      <td>Y</td>\n      <td>2016</td>\n      <td>6</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>18559</th>\n      <td>Okay</td>\n      <td>Dangerous Golf</td>\n      <td>/games/dangerous-golf/pc-20048436</td>\n      <td>PC</td>\n      <td>6.0</td>\n      <td>Sports, Action</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>6</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>18567</th>\n      <td>Great</td>\n      <td>Offworld Trading Company</td>\n      <td>/games/offworld-trading-company/pc-20018639</td>\n      <td>PC</td>\n      <td>8.0</td>\n      <td>Strategy</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>4</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>18568</th>\n      <td>Okay</td>\n      <td>The Walking Dead: Michonne -- Episode 3: What ...</td>\n      <td>/games/the-walking-dead-michonne-episode-3/pc-...</td>\n      <td>PC</td>\n      <td>6.3</td>\n      <td>Adventure</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>4</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>18570</th>\n      <td>Good</td>\n      <td>Battlefleet Gothic: Armada</td>\n      <td>/games/battlefleet-gothic-armada/pc-20030300</td>\n      <td>PC</td>\n      <td>7.1</td>\n      <td>Strategy</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>4</td>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>18572</th>\n      <td>Amazing</td>\n      <td>Overwatch</td>\n      <td>/games/overwatch/pc-20027413</td>\n      <td>PC</td>\n      <td>9.4</td>\n      <td>Shooter</td>\n      <td>Y</td>\n      <td>2016</td>\n      <td>5</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>18575</th>\n      <td>Good</td>\n      <td>Fallout 4: Nuka World</td>\n      <td>/games/fallout-4-nuka-world/pc-20054761</td>\n      <td>PC</td>\n      <td>7.9</td>\n      <td>RPG</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <th>18578</th>\n      <td>Good</td>\n      <td>Master of Orion</td>\n      <td>/games/master-of-orion-wargaming/pc-20038452</td>\n      <td>PC</td>\n      <td>7.1</td>\n      <td>Strategy</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>18580</th>\n      <td>Great</td>\n      <td>Quadrilateral Cowboy</td>\n      <td>/games/quadrilateral-cowboy/pc-159788</td>\n      <td>PC</td>\n      <td>8.5</td>\n      <td>Puzzle</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>18581</th>\n      <td>Great</td>\n      <td>Fallout 4: Vault-Tec Workshop</td>\n      <td>/games/fallout-4-vault-tec-workshop/pc-20054769</td>\n      <td>PC</td>\n      <td>8.2</td>\n      <td>RPG</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>18583</th>\n      <td>Great</td>\n      <td>Kentucky Route Zero: Act 4</td>\n      <td>/games/kentucky-route-zero-act-4/pc-20046280</td>\n      <td>PC</td>\n      <td>8.5</td>\n      <td>Adventure</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>18586</th>\n      <td>Great</td>\n      <td>F1 2016</td>\n      <td>/games/f1-2016/pc-20054151</td>\n      <td>PC</td>\n      <td>8.8</td>\n      <td>Racing</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>24</td>\n    </tr>\n    <tr>\n      <th>18589</th>\n      <td>Amazing</td>\n      <td>Deus Ex: Mankind Divided</td>\n      <td>/games/deus-ex-mankind-divided/pc-20013794</td>\n      <td>PC</td>\n      <td>9.2</td>\n      <td>Action, RPG</td>\n      <td>Y</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>19</td>\n    </tr>\n    <tr>\n      <th>18595</th>\n      <td>Bad</td>\n      <td>Ghostbusters</td>\n      <td>/games/ghostbusters-the-movie/pc-20052317</td>\n      <td>PC</td>\n      <td>4.4</td>\n      <td>Action</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>16</td>\n    </tr>\n    <tr>\n      <th>18596</th>\n      <td>Okay</td>\n      <td>Necropolis</td>\n      <td>/games/necropolis/pc-20030346</td>\n      <td>PC</td>\n      <td>6.5</td>\n      <td>Action, Adventure</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>14</td>\n    </tr>\n    <tr>\n      <th>18598</th>\n      <td>Okay</td>\n      <td>Furi</td>\n      <td>/games/furi/pc-20044439</td>\n      <td>PC</td>\n      <td>6.8</td>\n      <td>Action</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>18600</th>\n      <td>Good</td>\n      <td>Hitman: Episode 4</td>\n      <td>/games/hitman-episode-4/pc-20051637</td>\n      <td>PC</td>\n      <td>7.4</td>\n      <td>Shooter</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>19</td>\n    </tr>\n    <tr>\n      <th>18603</th>\n      <td>Good</td>\n      <td>Grow Up</td>\n      <td>/games/grow-up/pc-20054824</td>\n      <td>PC</td>\n      <td>7.8</td>\n      <td>Platformer</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>18</td>\n    </tr>\n    <tr>\n      <th>18606</th>\n      <td>Okay</td>\n      <td>Starcraft II: Nova Covert Ops -- Mission Pack 2</td>\n      <td>/games/starcraft-ii-nova-covert-ops-mission-pa...</td>\n      <td>PC</td>\n      <td>6.4</td>\n      <td>Strategy</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>18607</th>\n      <td>Good</td>\n      <td>Pokemon Go</td>\n      <td>/games/pokemon-go/iphone-20042699</td>\n      <td>iPhone</td>\n      <td>7.0</td>\n      <td>Battle</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>18613</th>\n      <td>Great</td>\n      <td>XCOM 2: Shen's Last Gift</td>\n      <td>/games/xcom-2-shens-last-gift/pc-20055520</td>\n      <td>PC</td>\n      <td>8.0</td>\n      <td>Strategy</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>18616</th>\n      <td>Good</td>\n      <td>Batman: The Telltale Series -- Episode 1: Real...</td>\n      <td>/games/batman-the-telltale-series-episode-1-re...</td>\n      <td>PC</td>\n      <td>7.5</td>\n      <td>Adventure</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>18618</th>\n      <td>Amazing</td>\n      <td>Starbound</td>\n      <td>/games/starbound-2016/pc-128879</td>\n      <td>PC</td>\n      <td>9.1</td>\n      <td>Action</td>\n      <td>Y</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>18619</th>\n      <td>Good</td>\n      <td>Human Fall Flat</td>\n      <td>/games/human-fall-flat/pc-20051928</td>\n      <td>PC</td>\n      <td>7.9</td>\n      <td>Puzzle, Action</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>18624</th>\n      <td>Masterpiece</td>\n      <td>Inside</td>\n      <td>/games/inside-playdead/pc-20055740</td>\n      <td>PC</td>\n      <td>10.0</td>\n      <td>Adventure</td>\n      <td>Y</td>\n      <td>2016</td>\n      <td>6</td>\n      <td>28</td>\n    </tr>\n  </tbody>\n</table>\n<p>13979 rows × 10 columns</p>\n</div>\n\n---\n## 展示数据\n现在已经有了前十平台的数据，需要思考的就是如何来呈现每个平台的游戏质量呢？当然可以用每个平台的`score`的平均值来对比，但未免有点单薄了。数据属性中有一列是`score_phrase`，用一个单词来形容当前游戏的好坏，与`score`直接挂钩，用这个来展示应该会更容易理解和分析。\n\n这里可以用`Matplotlib.pyplot`的`bar`来画，也可以用`Seaborn`中的`countplot`，后者使用起来更容易方便。\n```python\nsns.countplot(x=\"platform\", hue=\"score_phrase\", data=filtered_reviews, palette=sns.xkcd_palette(colors));\n```\n\n![png](/images/output_13_0.png)\n\n展示的结果如上图所示，我们可以看到PC平台下，`Great`和`Good`这两栏下的游戏数量基本就占了大半，但我并不能说PC端的游戏质量就比其他平台高出一筹，因为我们依然无法判断每个平台下优秀的作品占比如何。这幅图只能直观地告诉我们每个平台下，所有分数的一个分布状况。\n\n所以，下面的工作，我要继续细化一下数据分析和展示的部分。\n\n---\n## 进一步分析与展示数据\n因为原先划分的`score_phrase`太多了，我决定将它们重新划为三个部分：好于`Good`的，差于`Okay`的，剩下的就是中间部分。我的这个标准可能比较严格，在我看来，评分`8.0`以上的才算的上是优秀的作品，也就是高于`Good`的；至于那些评分低于`6.0`的，也就是还不到`Okay`的，算作差劲也不算失礼吧。\n\n```python\nall_score_phrases = set(reviews[\"score_phrase\"].unique())\nbt_good = set(['Great', 'Amazing', 'Masterpiece'])\naverage = set(['Good', 'Okay'])\nwt_okay = all_score_phrases - bt_good - average\n    \ndef category_score_phrase(value):\n    if value in bt_good:\n        return \"Better than Good\"\n    elif value in wt_okay:\n        return \"Worse than Okay\"\n    else:\n        return \"Average\"\n        \nsizes = filtered_reviews[\"score_phrase\"].apply(category_score_phrase).value_counts()\nexplode = (0, 0.1, 0)\nplt.pie(sizes, labels=sizes.index, explode=explode, autopct='%1.2f%%', shadow=True, startangle=90);\n```\n\n![png](/images/output_14_0.png)\n\n这里我先用饼图来展示一下前十的平台，整体的游戏质量分布情况。\n\n这里，我创建了一个新列，叫`score_phrase_new`，为了区别原有的`score_phrase`。\n\n```python\nfiltered_reviews[\"score_phrase_new\"] = filtered_reviews[\"score_phrase\"].apply(category_score_phrase)\nfiltered_reviews.head()\n```\n\n<div>\n<table class=\"blueTable\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>score_phrase</th>\n      <th>title</th>\n      <th>url</th>\n      <th>platform</th>\n      <th>score</th>\n      <th>genre</th>\n      <th>editors_choice</th>\n      <th>release_year</th>\n      <th>release_month</th>\n      <th>release_day</th>\n      <th>score_phrase_new</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/xbox-360-128182</td>\n      <td>Xbox 360</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n      <td>Better than Good</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/ps3-128181</td>\n      <td>PlayStation 3</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n      <td>Better than Good</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Awful</td>\n      <td>Double Dragon: Neon</td>\n      <td>/games/double-dragon-neon/xbox-360-131320</td>\n      <td>Xbox 360</td>\n      <td>3.0</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n      <td>Worse than Okay</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Amazing</td>\n      <td>Guild Wars 2</td>\n      <td>/games/guild-wars-2/pc-896298</td>\n      <td>PC</td>\n      <td>9.0</td>\n      <td>RPG</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n      <td>Better than Good</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Awful</td>\n      <td>Double Dragon: Neon</td>\n      <td>/games/double-dragon-neon/ps3-131321</td>\n      <td>PlayStation 3</td>\n      <td>3.0</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n      <td>Worse than Okay</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n先来用数字直观地看一下每个平台下，每个评分阶段的数量。\n```python\nfiltered_reviews.groupby([\"platform\", \"score_phrase_new\"]).count()\n```\n\n<div>\n<table class=\"blueTable\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>score_phrase</th>\n      <th>title</th>\n      <th>url</th>\n      <th>score</th>\n      <th>genre</th>\n      <th>editors_choice</th>\n      <th>release_year</th>\n      <th>release_month</th>\n      <th>release_day</th>\n    </tr>\n    <tr>\n      <th>platform</th>\n      <th>score_phrase_new</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Nintendo DS</th>\n      <th>Average</th>\n      <td>462</td>\n      <td>462</td>\n      <td>462</td>\n      <td>462</td>\n      <td>462</td>\n      <td>462</td>\n      <td>462</td>\n      <td>462</td>\n      <td>462</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>207</td>\n      <td>207</td>\n      <td>207</td>\n      <td>207</td>\n      <td>207</td>\n      <td>207</td>\n      <td>207</td>\n      <td>207</td>\n      <td>207</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>376</td>\n      <td>376</td>\n      <td>376</td>\n      <td>376</td>\n      <td>375</td>\n      <td>376</td>\n      <td>376</td>\n      <td>376</td>\n      <td>376</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">PC</th>\n      <th>Average</th>\n      <td>1394</td>\n      <td>1394</td>\n      <td>1394</td>\n      <td>1394</td>\n      <td>1393</td>\n      <td>1394</td>\n      <td>1394</td>\n      <td>1394</td>\n      <td>1394</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>1323</td>\n      <td>1323</td>\n      <td>1323</td>\n      <td>1323</td>\n      <td>1322</td>\n      <td>1323</td>\n      <td>1323</td>\n      <td>1323</td>\n      <td>1323</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>653</td>\n      <td>653</td>\n      <td>653</td>\n      <td>653</td>\n      <td>652</td>\n      <td>653</td>\n      <td>653</td>\n      <td>653</td>\n      <td>653</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">PlayStation</th>\n      <th>Average</th>\n      <td>362</td>\n      <td>362</td>\n      <td>362</td>\n      <td>362</td>\n      <td>362</td>\n      <td>362</td>\n      <td>362</td>\n      <td>362</td>\n      <td>362</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>313</td>\n      <td>313</td>\n      <td>313</td>\n      <td>313</td>\n      <td>313</td>\n      <td>313</td>\n      <td>313</td>\n      <td>313</td>\n      <td>313</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>277</td>\n      <td>277</td>\n      <td>277</td>\n      <td>277</td>\n      <td>277</td>\n      <td>277</td>\n      <td>277</td>\n      <td>277</td>\n      <td>277</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">PlayStation 2</th>\n      <th>Average</th>\n      <td>716</td>\n      <td>716</td>\n      <td>716</td>\n      <td>716</td>\n      <td>716</td>\n      <td>716</td>\n      <td>716</td>\n      <td>716</td>\n      <td>716</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>542</td>\n      <td>542</td>\n      <td>542</td>\n      <td>542</td>\n      <td>542</td>\n      <td>542</td>\n      <td>542</td>\n      <td>542</td>\n      <td>542</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>428</td>\n      <td>428</td>\n      <td>428</td>\n      <td>428</td>\n      <td>426</td>\n      <td>428</td>\n      <td>428</td>\n      <td>428</td>\n      <td>428</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">PlayStation 3</th>\n      <th>Average</th>\n      <td>516</td>\n      <td>516</td>\n      <td>516</td>\n      <td>516</td>\n      <td>515</td>\n      <td>516</td>\n      <td>516</td>\n      <td>516</td>\n      <td>516</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>569</td>\n      <td>569</td>\n      <td>569</td>\n      <td>569</td>\n      <td>569</td>\n      <td>569</td>\n      <td>569</td>\n      <td>569</td>\n      <td>569</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>271</td>\n      <td>271</td>\n      <td>271</td>\n      <td>271</td>\n      <td>271</td>\n      <td>271</td>\n      <td>271</td>\n      <td>271</td>\n      <td>271</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Wii</th>\n      <th>Average</th>\n      <td>551</td>\n      <td>551</td>\n      <td>551</td>\n      <td>551</td>\n      <td>547</td>\n      <td>551</td>\n      <td>551</td>\n      <td>551</td>\n      <td>551</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>494</td>\n      <td>494</td>\n      <td>494</td>\n      <td>494</td>\n      <td>494</td>\n      <td>494</td>\n      <td>494</td>\n      <td>494</td>\n      <td>494</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Wireless</th>\n      <th>Average</th>\n      <td>473</td>\n      <td>473</td>\n      <td>473</td>\n      <td>473</td>\n      <td>471</td>\n      <td>473</td>\n      <td>473</td>\n      <td>473</td>\n      <td>473</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>308</td>\n      <td>308</td>\n      <td>308</td>\n      <td>308</td>\n      <td>306</td>\n      <td>308</td>\n      <td>308</td>\n      <td>308</td>\n      <td>308</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>129</td>\n      <td>129</td>\n      <td>129</td>\n      <td>129</td>\n      <td>129</td>\n      <td>129</td>\n      <td>129</td>\n      <td>129</td>\n      <td>129</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Xbox</th>\n      <th>Average</th>\n      <td>307</td>\n      <td>307</td>\n      <td>307</td>\n      <td>307</td>\n      <td>307</td>\n      <td>307</td>\n      <td>307</td>\n      <td>307</td>\n      <td>307</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>160</td>\n      <td>160</td>\n      <td>160</td>\n      <td>160</td>\n      <td>160</td>\n      <td>160</td>\n      <td>160</td>\n      <td>160</td>\n      <td>160</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Xbox 360</th>\n      <th>Average</th>\n      <td>631</td>\n      <td>631</td>\n      <td>631</td>\n      <td>631</td>\n      <td>631</td>\n      <td>631</td>\n      <td>631</td>\n      <td>631</td>\n      <td>631</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>646</td>\n      <td>646</td>\n      <td>646</td>\n      <td>646</td>\n      <td>646</td>\n      <td>646</td>\n      <td>646</td>\n      <td>646</td>\n      <td>646</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">iPhone</th>\n      <th>Average</th>\n      <td>412</td>\n      <td>412</td>\n      <td>412</td>\n      <td>412</td>\n      <td>405</td>\n      <td>412</td>\n      <td>412</td>\n      <td>412</td>\n      <td>412</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>315</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>109</td>\n      <td>109</td>\n      <td>109</td>\n      <td>109</td>\n      <td>108</td>\n      <td>109</td>\n      <td>109</td>\n      <td>109</td>\n      <td>109</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n事实上，上面的表格大部分内容也用不上，我们需要的其实就三列：**游戏平台**，**评分阶段**和**数量**。因此我就压缩一下原表格，让它变成下面的样子。\n```python\ncount_df = filtered_reviews.groupby([\"platform\", \"score_phrase_new\"]).count().reset_index().iloc[:, :3]\ncount_df.rename(columns={\"score_phrase\": \"count\"}, inplace=True)\ncount_df\n```\n\n<div>\n<table class=\"blueTable\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>platform</th>\n      <th>score_phrase_new</th>\n      <th>count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Nintendo DS</td>\n      <td>Average</td>\n      <td>462</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Nintendo DS</td>\n      <td>Better than Good</td>\n      <td>207</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Nintendo DS</td>\n      <td>Worse than Okay</td>\n      <td>376</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>PC</td>\n      <td>Average</td>\n      <td>1394</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>PC</td>\n      <td>Better than Good</td>\n      <td>1323</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>PC</td>\n      <td>Worse than Okay</td>\n      <td>653</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>PlayStation</td>\n      <td>Average</td>\n      <td>362</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>PlayStation</td>\n      <td>Better than Good</td>\n      <td>313</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>PlayStation</td>\n      <td>Worse than Okay</td>\n      <td>277</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>PlayStation 2</td>\n      <td>Average</td>\n      <td>716</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>PlayStation 2</td>\n      <td>Better than Good</td>\n      <td>542</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>PlayStation 2</td>\n      <td>Worse than Okay</td>\n      <td>428</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>PlayStation 3</td>\n      <td>Average</td>\n      <td>516</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>PlayStation 3</td>\n      <td>Better than Good</td>\n      <td>569</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>PlayStation 3</td>\n      <td>Worse than Okay</td>\n      <td>271</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Wii</td>\n      <td>Average</td>\n      <td>551</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Wii</td>\n      <td>Better than Good</td>\n      <td>321</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>Wii</td>\n      <td>Worse than Okay</td>\n      <td>494</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>Wireless</td>\n      <td>Average</td>\n      <td>473</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Wireless</td>\n      <td>Better than Good</td>\n      <td>308</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>Wireless</td>\n      <td>Worse than Okay</td>\n      <td>129</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>Xbox</td>\n      <td>Average</td>\n      <td>307</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>Xbox</td>\n      <td>Better than Good</td>\n      <td>354</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>Xbox</td>\n      <td>Worse than Okay</td>\n      <td>160</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>Xbox 360</td>\n      <td>Average</td>\n      <td>631</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>Xbox 360</td>\n      <td>Better than Good</td>\n      <td>646</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>Xbox 360</td>\n      <td>Worse than Okay</td>\n      <td>354</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>iPhone</td>\n      <td>Average</td>\n      <td>412</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>iPhone</td>\n      <td>Better than Good</td>\n      <td>321</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>iPhone</td>\n      <td>Worse than Okay</td>\n      <td>109</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n数据拿到手了，下面又该是用图形展示数据的时候。这次我们来看一下每一个评分阶段对于各自游戏平台占比究竟是多少。\n\n```python\nbar_width = 1\nbar_left = [i for i in range(len(count_df) // 3)]\ntick_pos = [i + (bar_width / 2) for i in bar_left]\ntotals = [i + j + k for i, j, k in zip(count_df[\"count\"][::3], count_df[\"count\"][1::3], count_df[\"count\"][2::3])]\nave_perc = [i / j * 100 for i, j in zip(count_df[\"count\"][::3], totals)]\nbt_good_perc = [i / j * 100 for i, j in zip(count_df[\"count\"][1::3], totals)]\nwt_okay_perc = [i / j * 100 for i, j in zip(count_df[\"count\"][2::3], totals)]\n```\n\n\n```python\nf, ax = plt.subplots(1)\n    \nax.bar(bar_left, \n       wt_okay_perc,\n       label=\"Worst than Okay\",\n       alpha=0.9,\n       width=bar_width,\n       edgecolor=\"white\")\n       \nax.bar(bar_left,\n       ave_perc,\n       bottom=wt_okay_perc,\n       label=\"Average\",\n       alpha=0.9,\n       width=bar_width,\n       edgecolor=\"white\")\n       \nax.bar(bar_left,\n       bt_good_perc,\n       bottom=[i+j for i, j in zip(wt_okay_perc, ave_perc)],\n       label=\"Better than Good\",\n       alpha=0.9,\n       width=bar_width,\n       edgecolor=\"white\")\n       \nplt.xticks(tick_pos, set(count_df[\"platform\"]))\nax.set_ylabel(\"Percentage\")\nax.set_xlabel(\"\")\nplt.legend(bbox_to_anchor=(1., 1.))\nplt.setp(plt.gca().get_xticklabels(), rotation=45, horizontalalignment=\"right\")\nplt.show()\n```\n\n![png](/images/output_19_0.png)\n\n我并没有直接把具体百分比的数值标记在上面，不过通过直观的图形依然可以看到一些信息。从图中可以看出来，相对来说，`PlayStation`，`PlayStation2`，`Wii`，`PC`和`Nintendo DS`的游戏质量都是很不错的，高质量游戏占比高，且低质量游戏占比低。`PlayStation3`虽然低质量游戏占比很小，但是高品质游戏也不算很多。`iPhone`和`Xbox`的表现算是最差的了，低质量游戏占比分属最高的一二，高品质游戏也是最低的两个平台。其实`iPhone`是这样的倒是不意外了，因为毕竟`iPhone`平台的起点相对于其他的平台要低很多，基本上三五个人，甚至一个人做出的游戏都有，这样很难保证游戏兼顾趣味性和剧情或者其他方面。在后期维护上面肯定也要比大公司开发的游戏差了很多。遗憾的是`Xbox`竟然也有如此差劲的表现，着实令我难以理解。\n\n---\n# 总结\n至此，我打算分析的内容就呈现完了，这就是我个人拿到数据之后一个简单的想法，然后试着去将这个想法用数据分析的方法展现出来，供自己去理解。后面我还会对这个数据集进一步的分析，比如去探讨一下年份和分数的关系，游戏类别和分数的关系。希望这篇文章可以起到抛砖引玉的作用，能让各位看完之后对于如何开始分析一份数据有自己的想法。\n\n各位看官对于本文有任何不明白的地方，欢迎提问，也欢迎指正和建议。\n\n---\n# Related Links\n1. [Pandas Tutorial: Data analysis with Python: Part 1](https://www.dataquest.io/blog/pandas-python-tutorial/)\n2. [Pandas Tutorial: Data analysis with Python: Part 2](https://www.dataquest.io/blog/pandas-tutorial-python-2/)\n3. [Stacked Percentage Bar Plot In MatPlotLib](https://chrisalbon.com/python/matplotlib_percentage_stacked_bar_plot.html)\n","slug":"Data-analysis-in-Python-by-Pandas","published":1,"updated":"2017-10-10T09:14:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9os2v9p0000u8yu50b4fryc","content":"<p>Python在数据科学领域的应用真的是越来越普及，得益于Python相对来讲通俗易懂的语言风格，语法简单且容易入门的特性，给很多数据科学领域的朋友，减轻了一部分学习编程语言的繁重。<code>Pandas</code> + <code>NumPy</code> + <code>Matplotlib</code>，这三者的结合基本可以胜任任意简单的数据分析和可视化的任务。复杂一点的可能还会需要<code>SciPy</code>的帮助。</p>\n<h1 id=\"本文目的\"><a href=\"#本文目的\" class=\"headerlink\" title=\"本文目的\"></a>本文目的</h1><p>这次，我打算用一篇长文来记录一下自己是如何利用Pandas进行数据分析的。网上有很多的<code>Pandas</code>入门教程，因此我这里并不打算针对所有Pandas的基础操作描述的那么清楚，还是希望更多的表达一些对于数据分析的想法和实现。</p>\n<p>广义上，数据分析其实包含了从导入数据-&gt;清洗数据-&gt;<strong>分析数据</strong>-&gt;展示数据，这一从头到尾的流程。狭义上，数据分析指的就是中间分析数据这一块内容。本文按照广义上的数据分析的过程来一步步探讨。</p>\n<p>接下来我们就正式开始本次数据分析之旅。</p>\n<a id=\"more\"></a>\n<hr>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>下面的这一段代码主要是包的调用和一些环境配置，<code>Seaborn</code>是也是一个plot包，可用来画出比<code>Matplotlib</code>更漂亮的图，它本身是基于<code>Matplotlib</code>设计的，对<code>NumPy</code>和<code>Pandas</code>都有很好的支持。这里我就不做过多解释了，对<code>Seaborn</code>有兴趣的朋友可以留言咨询或者自行探索。\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</div><div class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</div><div class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</div><div class=\"line\">    </div><div class=\"line\">%matplotlib inline</div><div class=\"line\">    </div><div class=\"line\">sns.set(rc=&#123;<span class=\"string\">\"figure.figsize\"</span>: (<span class=\"number\">10</span>, <span class=\"number\">6.25</span>)&#125;)</div><div class=\"line\">sns.set_style(<span class=\"string\">\"darkgrid\"</span>)</div><div class=\"line\">colors = [<span class=\"string\">\"windows blue\"</span>, <span class=\"string\">\"amber\"</span>, <span class=\"string\">\"faded green\"</span>, <span class=\"string\">\"greyish\"</span>, <span class=\"string\">\"dusty purple\"</span>, <span class=\"string\">\"red violet\"</span>, <span class=\"string\">\"marine\"</span>, <span class=\"string\">\"jungle green\"</span>, <span class=\"string\">\"chocolate brown\"</span>, <span class=\"string\">\"dull pink\"</span>, <span class=\"string\">\"reddish orange\"</span>]</div><div class=\"line\">sns.set_palette(sns.xkcd_palette(colors))</div></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"导入数据\"><a href=\"#导入数据\" class=\"headerlink\" title=\"导入数据\"></a>导入数据</h2><p>我这次用的数据是IGN上近20年来的各种平台的游戏，来源于<a href=\"https://www.kaggle.com/egrinstein/20-years-of-games\" target=\"_blank\" rel=\"external\">这里</a>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reviews = pd.read_csv(<span class=\"string\">\"ign.csv\"</span>)</div></pre></td></tr></table></figure>\n<p>数据读入之后，我们来看一下这里都有些什么内容。\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reviews.head()</div></pre></td></tr></table></figure></p>\n<div>\n<table class=\"blueTable\">\n  <thead>\n    <tr style=\"text-align: center;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>score_phrase</th>\n      <th>title</th>\n      <th>url</th>\n      <th>platform</th>\n      <th>score</th>\n      <th>genre</th>\n      <th>editors_choice</th>\n      <th>release_year</th>\n      <th>release_month</th>\n      <th>release_day</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>Amazing</td>\n      <td>LittleBigPlanet PS Vita</td>\n      <td>/games/littlebigplanet-vita/vita-98907</td>\n      <td>PlayStation Vita</td>\n      <td>9.0</td>\n      <td>Platformer</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Amazing</td>\n      <td>LittleBigPlanet PS Vita – Marvel Super Hero E…</td>\n      <td>/games/littlebigplanet-ps-vita-marvel-super-he…</td>\n      <td>PlayStation Vita</td>\n      <td>9.0</td>\n      <td>Platformer</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>Great</td>\n      <td>Splice: Tree of Life</td>\n      <td>/games/splice/ipad-141070</td>\n      <td>iPad</td>\n      <td>8.5</td>\n      <td>Puzzle</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/xbox-360-128182</td>\n      <td>Xbox 360</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/ps3-128181</td>\n      <td>PlayStation 3</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<p>这里先简单介绍一下每一列都代表什么吧：</p>\n<ul>\n<li>score_phrase – IGN用一个词来评价当前游戏，与得分直接相关；</li>\n<li>title – 游戏名称；</li>\n<li>url – 完整评论的地址；</li>\n<li>platform – 游戏平台（PS4, PC, Xbox, etc.）；</li>\n<li>score – 游戏的具体评分，从1.0到10.0；</li>\n<li>genre – 游戏分类；</li>\n<li>editors_choice – 是否为IGN编辑推荐的游戏，与评分有关系。</li>\n<li>release_year – 游戏发布年份；</li>\n<li>release_month – 发布月份；</li>\n<li>release_day – 发布日期。</li>\n</ul>\n<p>我们来看下总共多少个数据。\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reviews.shape</div></pre></td></tr></table></figure></p>\n<pre><code>(18625, 11)\n</code></pre><p>看来我们这次的数据里一共<code>18625</code>条数据，一共<code>11</code>列属性。</p>\n<hr>\n<h2 id=\"清洗数据\"><a href=\"#清洗数据\" class=\"headerlink\" title=\"清洗数据\"></a>清洗数据</h2><p>源数据导入后一般来说是不能直接使用的，需要进行一定范围的数据清洗，不过本次的数据基本不需要清洗，收集这个数据的<em>Eric Grinstein</em>已经对数据进行了清洗工作。不过这里我们仍需要做一点简单的清洗工作，去除一些我们不需要的内容。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">reviews = reviews.iloc[:, <span class=\"number\">1</span>:]</div><div class=\"line\">reviews.head()</div></pre></td></tr></table></figure>\n<div>\n<style>\n    .dataframe {\n      display: block;\n      overflow-x: auto;\n      white-space: nowrap;\n    }\n\n    .dataframe thead tr:only-child th {\n        text-align: center;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n</style>\n<table class=\"blueTable\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>score_phrase</th>\n      <th>title</th>\n      <th>url</th>\n      <th>platform</th>\n      <th>score</th>\n      <th>genre</th>\n      <th>editors_choice</th>\n      <th>release_year</th>\n      <th>release_month</th>\n      <th>release_day</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Amazing</td>\n      <td>LittleBigPlanet PS Vita</td>\n      <td>/games/littlebigplanet-vita/vita-98907</td>\n      <td>PlayStation Vita</td>\n      <td>9.0</td>\n      <td>Platformer</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Amazing</td>\n      <td>LittleBigPlanet PS Vita – Marvel Super Hero E…</td>\n      <td>/games/littlebigplanet-ps-vita-marvel-super-he…</td>\n      <td>PlayStation Vita</td>\n      <td>9.0</td>\n      <td>Platformer</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Great</td>\n      <td>Splice: Tree of Life</td>\n      <td>/games/splice/ipad-141070</td>\n      <td>iPad</td>\n      <td>8.5</td>\n      <td>Puzzle</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/xbox-360-128182</td>\n      <td>Xbox 360</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/ps3-128181</td>\n      <td>PlayStation 3</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<hr>\n<h2 id=\"分析数据\"><a href=\"#分析数据\" class=\"headerlink\" title=\"分析数据\"></a>分析数据</h2><p>数据清洗之后，其实就是分析过程的正式开始。在开始分析过程之前，先说点题外话。我本身对于游戏是很热爱的，从小到大，游戏机，掌机，PC，也拥有过不少的游戏平台。从和父母斗智斗勇中各种争取时间玩的红白机，小霸王学习机，到后来可以躲在被子里玩的GameBoy，但偶尔还得探出头担心父母进屋里发现自己的小秘密；再往后的世嘉，所以又不得不和父母软磨硬泡恳求游戏时间。直至家里第一台PC的出现，基本其他的游戏平台就很少碰了，除了后来的PSP，那是我从GameBoy之后时隔很多年再次拿起掌机玩游戏。要说起游戏，游戏平台，游戏的历史，真的说上三天三夜也说不完，其实这也是我为什么选择这么IGN的这个数据作为数据分析的数据来源。我也很想看看这20年来电子游戏产业的发展和趋势。</p>\n<p>好了，咱们言归正传，就我个人而言，拿到这么多的数据之后，第一反应是：这么多的游戏，究竟是分布在了多少平台上呢？我亲身体验过的平台其实并不多，大概10个左右吧。那么这个数据集里究竟包含了多少平台呢？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">all_platforms = reviews[<span class=\"string\">\"platform\"</span>].unique()</div><div class=\"line\">all_platforms</div></pre></td></tr></table></figure>\n<pre><code>array([&apos;PlayStation Vita&apos;, &apos;iPad&apos;, &apos;Xbox 360&apos;, &apos;PlayStation 3&apos;,\n       &apos;Macintosh&apos;, &apos;PC&apos;, &apos;iPhone&apos;, &apos;Nintendo DS&apos;, &apos;Nintendo 3DS&apos;,\n       &apos;Android&apos;, &apos;Wii&apos;, &apos;PlayStation 4&apos;, &apos;Wii U&apos;, &apos;Linux&apos;,\n       &apos;PlayStation Portable&apos;, &apos;PlayStation&apos;, &apos;Nintendo 64&apos;, &apos;Saturn&apos;,\n       &apos;Lynx&apos;, &apos;Game Boy&apos;, &apos;Game Boy Color&apos;, &apos;NeoGeo Pocket Color&apos;,\n       &apos;Game.Com&apos;, &apos;Dreamcast&apos;, &apos;Dreamcast VMU&apos;, &apos;WonderSwan&apos;, &apos;Arcade&apos;,\n       &apos;Nintendo 64DD&apos;, &apos;PlayStation 2&apos;, &apos;WonderSwan Color&apos;,\n       &apos;Game Boy Advance&apos;, &apos;Xbox&apos;, &apos;GameCube&apos;, &apos;DVD / HD Video Game&apos;,\n       &apos;Wireless&apos;, &apos;Pocket PC&apos;, &apos;N-Gage&apos;, &apos;NES&apos;, &apos;iPod&apos;, &apos;Genesis&apos;,\n       &apos;TurboGrafx-16&apos;, &apos;Super NES&apos;, &apos;NeoGeo&apos;, &apos;Master System&apos;,\n       &apos;Atari 5200&apos;, &apos;TurboGrafx-CD&apos;, &apos;Atari 2600&apos;, &apos;Sega 32X&apos;, &apos;Vectrex&apos;,\n       &apos;Commodore 64/128&apos;, &apos;Sega CD&apos;, &apos;Nintendo DSi&apos;, &apos;Windows Phone&apos;,\n       &apos;Web Games&apos;, &apos;Xbox One&apos;, &apos;Windows Surface&apos;, &apos;Ouya&apos;,\n       &apos;New Nintendo 3DS&apos;, &apos;SteamOS&apos;], dtype=object)\n</code></pre><p>这么多的平台……说实话，这里有很多我听都没听过，像<code>Dreamcast</code>，<code>Atari 2600</code>，<code>Vectrex</code>等等，看来这20年，游戏产业的发展还是很多元化的，至少从游戏平台上就可以看出端倪。</p>\n<p>有了游戏平台的信息，自然而然地就会问，每个平台大概都出过多少游戏呢？\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reviews[<span class=\"string\">\"platform\"</span>].value_counts(dropna=<span class=\"keyword\">False</span>)</div></pre></td></tr></table></figure></p>\n<pre><code>PC                      3370\nPlayStation 2           1686\nXbox 360                1631\nWii                     1366\nPlayStation 3           1356\nNintendo DS             1045\nPlayStation              952\nWireless                 910\niPhone                   842\nXbox                     821\nPlayStation Portable     633\nGame Boy Advance         623\nGameCube                 509\nGame Boy Color           356\nNintendo 64              302\nDreamcast                286\nPlayStation 4            277\nNintendo DSi             254\nNintendo 3DS             225\nXbox One                 208\nPlayStation Vita         155\nWii U                    114\niPad                      99\nLynx                      82\nMacintosh                 81\nGenesis                   58\nNES                       49\nTurboGrafx-16             40\nAndroid                   39\nSuper NES                 33\nNeoGeo Pocket Color       31\nN-Gage                    30\nGame Boy                  22\niPod                      17\nSega 32X                  16\nWindows Phone             14\nMaster System             13\nArcade                    11\nLinux                     10\nNeoGeo                    10\nNintendo 64DD              7\nCommodore 64/128           6\nSaturn                     6\nAtari 2600                 5\nWonderSwan                 4\nTurboGrafx-CD              3\nGame.Com                   3\nAtari 5200                 2\nNew Nintendo 3DS           2\nVectrex                    2\nPocket PC                  1\nWonderSwan Color           1\nOuya                       1\nWeb Games                  1\nSteamOS                    1\nDreamcast VMU              1\nWindows Surface            1\nDVD / HD Video Game        1\nSega CD                    1\nName: platform, dtype: int64\n</code></pre><p>从上面的统计来看，PC端无疑是最大的贡献者，这也可以理解，毕竟个人电脑从上个世纪末开始出现井喷，到后来虽然出货量开始下降，但一直都是人们学习生活娱乐中不可或缺的一部分，并且早期的个人电脑绝大部分都是以Windows为操作系统。不过让我没想到的是<code>Dreamcast</code>竟然还有286款游戏，看来是我孤陋寡闻了……</p>\n<p>下面来看看排名前十的平台都有哪些。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">platforms = reviews[<span class=\"string\">\"platform\"</span>].value_counts()[:<span class=\"number\">10</span>].index.tolist()</div><div class=\"line\">platforms</div></pre></td></tr></table></figure>\n<pre><code>[&apos;PC&apos;,\n&apos;PlayStation 2&apos;,\n&apos;Xbox 360&apos;,\n&apos;Wii&apos;,\n&apos;PlayStation 3&apos;,\n&apos;Nintendo DS&apos;,\n&apos;PlayStation&apos;,\n&apos;Wireless&apos;,\n&apos;iPhone&apos;,\n&apos;Xbox&apos;]\n</code></pre><p>既然前十的平台我已经知道了，那么下面来看看每个平台的游戏质量如何，虽然PC端的游戏最多，但不一定好游戏占比就是最多的，对吧？</p>\n<p>想知道每个平台的游戏质量如何，我得先从所有的数据中将只属于前十的平台的游戏提取出来。这里我创建一个filter，用来筛选游戏平台。\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">fil = reviews[<span class=\"string\">\"platform\"</span>] == platforms[<span class=\"number\">0</span>]   <span class=\"comment\"># create a filter</span></div><div class=\"line\">fil</div></pre></td></tr></table></figure></p>\n<pre><code>0        False\n1        False\n2        False\n3        False\n4        False\n5        False\n6        False\n7         True\n8        False\n9         True\n          ...\n18615    False\n18616     True\n18617    False\n18618     True\n18619     True\n18620    False\n18621    False\n18622    False\n18623    False\n18624     True\nName: platform, Length: 18625, dtype: bool\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> platform <span class=\"keyword\">in</span> platforms[<span class=\"number\">1</span>:]:</div><div class=\"line\">    fil |= reviews[<span class=\"string\">\"platform\"</span>] == platform</div><div class=\"line\">    </div><div class=\"line\">filtered_reviews = reviews[fil]</div></pre></td></tr></table></figure>\n<p>下面是提取出来的所有数据：\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">filtered_reviews</div></pre></td></tr></table></figure></p>\n<div>\n<table class=\"blueTable\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>score_phrase</th>\n      <th>title</th>\n      <th>url</th>\n      <th>platform</th>\n      <th>score</th>\n      <th>genre</th>\n      <th>editors_choice</th>\n      <th>release_year</th>\n      <th>release_month</th>\n      <th>release_day</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/xbox-360-128182</td>\n      <td>Xbox 360</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/ps3-128181</td>\n      <td>PlayStation 3</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Awful</td>\n      <td>Double Dragon: Neon</td>\n      <td>/games/double-dragon-neon/xbox-360-131320</td>\n      <td>Xbox 360</td>\n      <td>3.0</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Amazing</td>\n      <td>Guild Wars 2</td>\n      <td>/games/guild-wars-2/pc-896298</td>\n      <td>PC</td>\n      <td>9.0</td>\n      <td>RPG</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Awful</td>\n      <td>Double Dragon: Neon</td>\n      <td>/games/double-dragon-neon/ps3-131321</td>\n      <td>PlayStation 3</td>\n      <td>3.0</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Good</td>\n      <td>Total War Battles: Shogun</td>\n      <td>/games/total-war-battles-shogun/pc-142564</td>\n      <td>PC</td>\n      <td>7.0</td>\n      <td>Strategy</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Good</td>\n      <td>Tekken Tag Tournament 2</td>\n      <td>/games/tekken-tag-tournament-2/ps3-124584</td>\n      <td>PlayStation 3</td>\n      <td>7.5</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Good</td>\n      <td>Tekken Tag Tournament 2</td>\n      <td>/games/tekken-tag-tournament-2/xbox-360-124581</td>\n      <td>Xbox 360</td>\n      <td>7.5</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Good</td>\n      <td>Wild Blood</td>\n      <td>/games/wild-blood/iphone-139363</td>\n      <td>iPhone</td>\n      <td>7.0</td>\n      <td>NaN</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Amazing</td>\n      <td>Mark of the Ninja</td>\n      <td>/games/mark-of-the-ninja-135615/xbox-360-129276</td>\n      <td>Xbox 360</td>\n      <td>9.0</td>\n      <td>Action, Adventure</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Amazing</td>\n      <td>Mark of the Ninja</td>\n      <td>/games/mark-of-the-ninja-135615/pc-143761</td>\n      <td>PC</td>\n      <td>9.0</td>\n      <td>Action, Adventure</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Okay</td>\n      <td>Home: A Unique Horror Adventure</td>\n      <td>/games/home-a-unique-horror-adventure/pc-137135</td>\n      <td>PC</td>\n      <td>6.5</td>\n      <td>Adventure</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>Great</td>\n      <td>Avengers Initiative</td>\n      <td>/games/avengers-initiative/iphone-141579</td>\n      <td>iPhone</td>\n      <td>8.0</td>\n      <td>Action</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>Mediocre</td>\n      <td>Way of the Samurai 4</td>\n      <td>/games/way-of-the-samurai-4/ps3-23516</td>\n      <td>PlayStation 3</td>\n      <td>5.5</td>\n      <td>Action, Adventure</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Good</td>\n      <td>JoJo’s Bizarre Adventure HD</td>\n      <td>/games/jojos-bizarre-adventure/xbox-360-137717</td>\n      <td>Xbox 360</td>\n      <td>7.0</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>Good</td>\n      <td>JoJo’s Bizarre Adventure HD</td>\n      <td>/games/jojos-bizarre-adventure/ps3-137896</td>\n      <td>PlayStation 3</td>\n      <td>7.0</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>Good</td>\n      <td>Mass Effect 3: Leviathan</td>\n      <td>/games/mass-effect-3-leviathan/xbox-360-138918</td>\n      <td>Xbox 360</td>\n      <td>7.5</td>\n      <td>RPG</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>31</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>Good</td>\n      <td>Mass Effect 3: Leviathan</td>\n      <td>/games/mass-effect-3-leviathan/ps3-138915</td>\n      <td>PlayStation 3</td>\n      <td>7.5</td>\n      <td>RPG</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>31</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>Good</td>\n      <td>Mass Effect 3: Leviathan</td>\n      <td>/games/mass-effect-3-leviathan/pc-138919</td>\n      <td>PC</td>\n      <td>7.5</td>\n      <td>RPG</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>31</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>Amazing</td>\n      <td>Dark Souls (Prepare to Die Edition)</td>\n      <td>/games/dark-souls-prepare-to-die-edition/pc-13…</td>\n      <td>PC</td>\n      <td>9.0</td>\n      <td>Action, RPG</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>31</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>Good</td>\n      <td>Symphony</td>\n      <td>/games/symphony/pc-136470</td>\n      <td>PC</td>\n      <td>7.0</td>\n      <td>Shooter</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>Good</td>\n      <td>Tom Clancy’s Ghost Recon Phantoms</td>\n      <td>/games/tom-clancys-ghost-recon-online/pc-109114</td>\n      <td>PC</td>\n      <td>7.5</td>\n      <td>Shooter</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>29</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>Great</td>\n      <td>Thirty Flights of Loving</td>\n      <td>/games/thirty-flights-of-loving/pc-138374</td>\n      <td>PC</td>\n      <td>8.0</td>\n      <td>Adventure</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>29</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>Okay</td>\n      <td>Legasista</td>\n      <td>/games/legasista/ps3-127147</td>\n      <td>PlayStation 3</td>\n      <td>6.5</td>\n      <td>Action, RPG</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>Great</td>\n      <td>World of Warcraft: Mists of Pandaria</td>\n      <td>/games/world-of-warcraft-mists-of-pandaria/pc-…</td>\n      <td>PC</td>\n      <td>8.7</td>\n      <td>RPG</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>10</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>Bad</td>\n      <td>Hell Yeah! Wrath of the Dead Rabbit</td>\n      <td>/games/hell-yeah-wrath-of-the-dead-rabbit/ps3-…</td>\n      <td>PlayStation 3</td>\n      <td>4.9</td>\n      <td>Platformer</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>10</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>Amazing</td>\n      <td>Pokemon White Version 2</td>\n      <td>/games/pokemon-white-version-2/nds-129228</td>\n      <td>Nintendo DS</td>\n      <td>9.6</td>\n      <td>RPG</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>10</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>Good</td>\n      <td>War of the Roses</td>\n      <td>/games/war-of-the-roses-140577/pc-115849</td>\n      <td>PC</td>\n      <td>7.3</td>\n      <td>Action</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>10</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>Amazing</td>\n      <td>Pokemon Black Version 2</td>\n      <td>/games/pokemon-black-version-2/nds-129224</td>\n      <td>Nintendo DS</td>\n      <td>9.6</td>\n      <td>RPG</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>10</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>Okay</td>\n      <td>Drakerider</td>\n      <td>/games/drakerider/iphone-135745</td>\n      <td>iPhone</td>\n      <td>6.5</td>\n      <td>RPG</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>10</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>…</th>\n      <td>…</td>\n      <td>…</td>\n      <td>…</td>\n      <td>…</td>\n      <td>…</td>\n      <td>…</td>\n      <td>…</td>\n      <td>…</td>\n      <td>…</td>\n      <td>…</td>\n    </tr>\n    <tr>\n      <th>18546</th>\n      <td>Great</td>\n      <td>Devil Daggers</td>\n      <td>/games/devil-daggers/pc-20049771</td>\n      <td>PC</td>\n      <td>8.5</td>\n      <td>Shooter</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>2</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>18547</th>\n      <td>Good</td>\n      <td>Superhot</td>\n      <td>/games/superhot/pc-20018899</td>\n      <td>PC</td>\n      <td>7.5</td>\n      <td>Action</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>2</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>18549</th>\n      <td>Good</td>\n      <td>Battleborn</td>\n      <td>/games/battleborn/pc-20021225</td>\n      <td>PC</td>\n      <td>7.1</td>\n      <td>Shooter</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>5</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>18554</th>\n      <td>Good</td>\n      <td>The Park</td>\n      <td>/games/the-park/pc-20042102</td>\n      <td>PC</td>\n      <td>7.0</td>\n      <td>Adventure</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>5</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>18555</th>\n      <td>Great</td>\n      <td>Hitman: Episode 2</td>\n      <td>/games/hitman-episode-2/pc-20051629</td>\n      <td>PC</td>\n      <td>8.5</td>\n      <td>Shooter</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>4</td>\n      <td>29</td>\n    </tr>\n    <tr>\n      <th>18557</th>\n      <td>Amazing</td>\n      <td>Hearts of Iron IV</td>\n      <td>/games/hearts-of-iron-iv/pc-20012080</td>\n      <td>PC</td>\n      <td>9.0</td>\n      <td>Strategy</td>\n      <td>Y</td>\n      <td>2016</td>\n      <td>6</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>18559</th>\n      <td>Okay</td>\n      <td>Dangerous Golf</td>\n      <td>/games/dangerous-golf/pc-20048436</td>\n      <td>PC</td>\n      <td>6.0</td>\n      <td>Sports, Action</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>6</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>18567</th>\n      <td>Great</td>\n      <td>Offworld Trading Company</td>\n      <td>/games/offworld-trading-company/pc-20018639</td>\n      <td>PC</td>\n      <td>8.0</td>\n      <td>Strategy</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>4</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>18568</th>\n      <td>Okay</td>\n      <td>The Walking Dead: Michonne – Episode 3: What …</td>\n      <td>/games/the-walking-dead-michonne-episode-3/pc-…</td>\n      <td>PC</td>\n      <td>6.3</td>\n      <td>Adventure</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>4</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>18570</th>\n      <td>Good</td>\n      <td>Battlefleet Gothic: Armada</td>\n      <td>/games/battlefleet-gothic-armada/pc-20030300</td>\n      <td>PC</td>\n      <td>7.1</td>\n      <td>Strategy</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>4</td>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>18572</th>\n      <td>Amazing</td>\n      <td>Overwatch</td>\n      <td>/games/overwatch/pc-20027413</td>\n      <td>PC</td>\n      <td>9.4</td>\n      <td>Shooter</td>\n      <td>Y</td>\n      <td>2016</td>\n      <td>5</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>18575</th>\n      <td>Good</td>\n      <td>Fallout 4: Nuka World</td>\n      <td>/games/fallout-4-nuka-world/pc-20054761</td>\n      <td>PC</td>\n      <td>7.9</td>\n      <td>RPG</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <th>18578</th>\n      <td>Good</td>\n      <td>Master of Orion</td>\n      <td>/games/master-of-orion-wargaming/pc-20038452</td>\n      <td>PC</td>\n      <td>7.1</td>\n      <td>Strategy</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>18580</th>\n      <td>Great</td>\n      <td>Quadrilateral Cowboy</td>\n      <td>/games/quadrilateral-cowboy/pc-159788</td>\n      <td>PC</td>\n      <td>8.5</td>\n      <td>Puzzle</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>18581</th>\n      <td>Great</td>\n      <td>Fallout 4: Vault-Tec Workshop</td>\n      <td>/games/fallout-4-vault-tec-workshop/pc-20054769</td>\n      <td>PC</td>\n      <td>8.2</td>\n      <td>RPG</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>18583</th>\n      <td>Great</td>\n      <td>Kentucky Route Zero: Act 4</td>\n      <td>/games/kentucky-route-zero-act-4/pc-20046280</td>\n      <td>PC</td>\n      <td>8.5</td>\n      <td>Adventure</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>18586</th>\n      <td>Great</td>\n      <td>F1 2016</td>\n      <td>/games/f1-2016/pc-20054151</td>\n      <td>PC</td>\n      <td>8.8</td>\n      <td>Racing</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>24</td>\n    </tr>\n    <tr>\n      <th>18589</th>\n      <td>Amazing</td>\n      <td>Deus Ex: Mankind Divided</td>\n      <td>/games/deus-ex-mankind-divided/pc-20013794</td>\n      <td>PC</td>\n      <td>9.2</td>\n      <td>Action, RPG</td>\n      <td>Y</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>19</td>\n    </tr>\n    <tr>\n      <th>18595</th>\n      <td>Bad</td>\n      <td>Ghostbusters</td>\n      <td>/games/ghostbusters-the-movie/pc-20052317</td>\n      <td>PC</td>\n      <td>4.4</td>\n      <td>Action</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>16</td>\n    </tr>\n    <tr>\n      <th>18596</th>\n      <td>Okay</td>\n      <td>Necropolis</td>\n      <td>/games/necropolis/pc-20030346</td>\n      <td>PC</td>\n      <td>6.5</td>\n      <td>Action, Adventure</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>14</td>\n    </tr>\n    <tr>\n      <th>18598</th>\n      <td>Okay</td>\n      <td>Furi</td>\n      <td>/games/furi/pc-20044439</td>\n      <td>PC</td>\n      <td>6.8</td>\n      <td>Action</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>18600</th>\n      <td>Good</td>\n      <td>Hitman: Episode 4</td>\n      <td>/games/hitman-episode-4/pc-20051637</td>\n      <td>PC</td>\n      <td>7.4</td>\n      <td>Shooter</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>19</td>\n    </tr>\n    <tr>\n      <th>18603</th>\n      <td>Good</td>\n      <td>Grow Up</td>\n      <td>/games/grow-up/pc-20054824</td>\n      <td>PC</td>\n      <td>7.8</td>\n      <td>Platformer</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>18</td>\n    </tr>\n    <tr>\n      <th>18606</th>\n      <td>Okay</td>\n      <td>Starcraft II: Nova Covert Ops – Mission Pack 2</td>\n      <td>/games/starcraft-ii-nova-covert-ops-mission-pa…</td>\n      <td>PC</td>\n      <td>6.4</td>\n      <td>Strategy</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>18607</th>\n      <td>Good</td>\n      <td>Pokemon Go</td>\n      <td>/games/pokemon-go/iphone-20042699</td>\n      <td>iPhone</td>\n      <td>7.0</td>\n      <td>Battle</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>18613</th>\n      <td>Great</td>\n      <td>XCOM 2: Shen’s Last Gift</td>\n      <td>/games/xcom-2-shens-last-gift/pc-20055520</td>\n      <td>PC</td>\n      <td>8.0</td>\n      <td>Strategy</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>18616</th>\n      <td>Good</td>\n      <td>Batman: The Telltale Series – Episode 1: Real…</td>\n      <td>/games/batman-the-telltale-series-episode-1-re…</td>\n      <td>PC</td>\n      <td>7.5</td>\n      <td>Adventure</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>18618</th>\n      <td>Amazing</td>\n      <td>Starbound</td>\n      <td>/games/starbound-2016/pc-128879</td>\n      <td>PC</td>\n      <td>9.1</td>\n      <td>Action</td>\n      <td>Y</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>18619</th>\n      <td>Good</td>\n      <td>Human Fall Flat</td>\n      <td>/games/human-fall-flat/pc-20051928</td>\n      <td>PC</td>\n      <td>7.9</td>\n      <td>Puzzle, Action</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>18624</th>\n      <td>Masterpiece</td>\n      <td>Inside</td>\n      <td>/games/inside-playdead/pc-20055740</td>\n      <td>PC</td>\n      <td>10.0</td>\n      <td>Adventure</td>\n      <td>Y</td>\n      <td>2016</td>\n      <td>6</td>\n      <td>28</td>\n    </tr>\n  </tbody>\n</table>\n<p>13979 rows × 10 columns</p>\n</div>\n\n<hr>\n<h2 id=\"展示数据\"><a href=\"#展示数据\" class=\"headerlink\" title=\"展示数据\"></a>展示数据</h2><p>现在已经有了前十平台的数据，需要思考的就是如何来呈现每个平台的游戏质量呢？当然可以用每个平台的<code>score</code>的平均值来对比，但未免有点单薄了。数据属性中有一列是<code>score_phrase</code>，用一个单词来形容当前游戏的好坏，与<code>score</code>直接挂钩，用这个来展示应该会更容易理解和分析。</p>\n<p>这里可以用<code>Matplotlib.pyplot</code>的<code>bar</code>来画，也可以用<code>Seaborn</code>中的<code>countplot</code>，后者使用起来更容易方便。\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sns.countplot(x=<span class=\"string\">\"platform\"</span>, hue=<span class=\"string\">\"score_phrase\"</span>, data=filtered_reviews, palette=sns.xkcd_palette(colors));</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/output_13_0.png\" alt=\"png\"></p>\n<p>展示的结果如上图所示，我们可以看到PC平台下，<code>Great</code>和<code>Good</code>这两栏下的游戏数量基本就占了大半，但我并不能说PC端的游戏质量就比其他平台高出一筹，因为我们依然无法判断每个平台下优秀的作品占比如何。这幅图只能直观地告诉我们每个平台下，所有分数的一个分布状况。</p>\n<p>所以，下面的工作，我要继续细化一下数据分析和展示的部分。</p>\n<hr>\n<h2 id=\"进一步分析与展示数据\"><a href=\"#进一步分析与展示数据\" class=\"headerlink\" title=\"进一步分析与展示数据\"></a>进一步分析与展示数据</h2><p>因为原先划分的<code>score_phrase</code>太多了，我决定将它们重新划为三个部分：好于<code>Good</code>的，差于<code>Okay</code>的，剩下的就是中间部分。我的这个标准可能比较严格，在我看来，评分<code>8.0</code>以上的才算的上是优秀的作品，也就是高于<code>Good</code>的；至于那些评分低于<code>6.0</code>的，也就是还不到<code>Okay</code>的，算作差劲也不算失礼吧。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">all_score_phrases = set(reviews[<span class=\"string\">\"score_phrase\"</span>].unique())</div><div class=\"line\">bt_good = set([<span class=\"string\">'Great'</span>, <span class=\"string\">'Amazing'</span>, <span class=\"string\">'Masterpiece'</span>])</div><div class=\"line\">average = set([<span class=\"string\">'Good'</span>, <span class=\"string\">'Okay'</span>])</div><div class=\"line\">wt_okay = all_score_phrases - bt_good - average</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">category_score_phrase</span><span class=\"params\">(value)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> value <span class=\"keyword\">in</span> bt_good:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Better than Good\"</span></div><div class=\"line\">    <span class=\"keyword\">elif</span> value <span class=\"keyword\">in</span> wt_okay:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Worse than Okay\"</span></div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Average\"</span></div><div class=\"line\">        </div><div class=\"line\">sizes = filtered_reviews[<span class=\"string\">\"score_phrase\"</span>].apply(category_score_phrase).value_counts()</div><div class=\"line\">explode = (<span class=\"number\">0</span>, <span class=\"number\">0.1</span>, <span class=\"number\">0</span>)</div><div class=\"line\">plt.pie(sizes, labels=sizes.index, explode=explode, autopct=<span class=\"string\">'%1.2f%%'</span>, shadow=<span class=\"keyword\">True</span>, startangle=<span class=\"number\">90</span>);</div></pre></td></tr></table></figure>\n<p><img src=\"/images/output_14_0.png\" alt=\"png\"></p>\n<p>这里我先用饼图来展示一下前十的平台，整体的游戏质量分布情况。</p>\n<p>这里，我创建了一个新列，叫<code>score_phrase_new</code>，为了区别原有的<code>score_phrase</code>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">filtered_reviews[<span class=\"string\">\"score_phrase_new\"</span>] = filtered_reviews[<span class=\"string\">\"score_phrase\"</span>].apply(category_score_phrase)</div><div class=\"line\">filtered_reviews.head()</div></pre></td></tr></table></figure>\n<div>\n<table class=\"blueTable\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>score_phrase</th>\n      <th>title</th>\n      <th>url</th>\n      <th>platform</th>\n      <th>score</th>\n      <th>genre</th>\n      <th>editors_choice</th>\n      <th>release_year</th>\n      <th>release_month</th>\n      <th>release_day</th>\n      <th>score_phrase_new</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/xbox-360-128182</td>\n      <td>Xbox 360</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n      <td>Better than Good</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/ps3-128181</td>\n      <td>PlayStation 3</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n      <td>Better than Good</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Awful</td>\n      <td>Double Dragon: Neon</td>\n      <td>/games/double-dragon-neon/xbox-360-131320</td>\n      <td>Xbox 360</td>\n      <td>3.0</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n      <td>Worse than Okay</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Amazing</td>\n      <td>Guild Wars 2</td>\n      <td>/games/guild-wars-2/pc-896298</td>\n      <td>PC</td>\n      <td>9.0</td>\n      <td>RPG</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n      <td>Better than Good</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Awful</td>\n      <td>Double Dragon: Neon</td>\n      <td>/games/double-dragon-neon/ps3-131321</td>\n      <td>PlayStation 3</td>\n      <td>3.0</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n      <td>Worse than Okay</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<p>先来用数字直观地看一下每个平台下，每个评分阶段的数量。\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">filtered_reviews.groupby([<span class=\"string\">\"platform\"</span>, <span class=\"string\">\"score_phrase_new\"</span>]).count()</div></pre></td></tr></table></figure></p>\n<div>\n<table class=\"blueTable\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>score_phrase</th>\n      <th>title</th>\n      <th>url</th>\n      <th>score</th>\n      <th>genre</th>\n      <th>editors_choice</th>\n      <th>release_year</th>\n      <th>release_month</th>\n      <th>release_day</th>\n    </tr>\n    <tr>\n      <th>platform</th>\n      <th>score_phrase_new</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Nintendo DS</th>\n      <th>Average</th>\n      <td>462</td>\n      <td>462</td>\n      <td>462</td>\n      <td>462</td>\n      <td>462</td>\n      <td>462</td>\n      <td>462</td>\n      <td>462</td>\n      <td>462</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>207</td>\n      <td>207</td>\n      <td>207</td>\n      <td>207</td>\n      <td>207</td>\n      <td>207</td>\n      <td>207</td>\n      <td>207</td>\n      <td>207</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>376</td>\n      <td>376</td>\n      <td>376</td>\n      <td>376</td>\n      <td>375</td>\n      <td>376</td>\n      <td>376</td>\n      <td>376</td>\n      <td>376</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">PC</th>\n      <th>Average</th>\n      <td>1394</td>\n      <td>1394</td>\n      <td>1394</td>\n      <td>1394</td>\n      <td>1393</td>\n      <td>1394</td>\n      <td>1394</td>\n      <td>1394</td>\n      <td>1394</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>1323</td>\n      <td>1323</td>\n      <td>1323</td>\n      <td>1323</td>\n      <td>1322</td>\n      <td>1323</td>\n      <td>1323</td>\n      <td>1323</td>\n      <td>1323</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>653</td>\n      <td>653</td>\n      <td>653</td>\n      <td>653</td>\n      <td>652</td>\n      <td>653</td>\n      <td>653</td>\n      <td>653</td>\n      <td>653</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">PlayStation</th>\n      <th>Average</th>\n      <td>362</td>\n      <td>362</td>\n      <td>362</td>\n      <td>362</td>\n      <td>362</td>\n      <td>362</td>\n      <td>362</td>\n      <td>362</td>\n      <td>362</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>313</td>\n      <td>313</td>\n      <td>313</td>\n      <td>313</td>\n      <td>313</td>\n      <td>313</td>\n      <td>313</td>\n      <td>313</td>\n      <td>313</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>277</td>\n      <td>277</td>\n      <td>277</td>\n      <td>277</td>\n      <td>277</td>\n      <td>277</td>\n      <td>277</td>\n      <td>277</td>\n      <td>277</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">PlayStation 2</th>\n      <th>Average</th>\n      <td>716</td>\n      <td>716</td>\n      <td>716</td>\n      <td>716</td>\n      <td>716</td>\n      <td>716</td>\n      <td>716</td>\n      <td>716</td>\n      <td>716</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>542</td>\n      <td>542</td>\n      <td>542</td>\n      <td>542</td>\n      <td>542</td>\n      <td>542</td>\n      <td>542</td>\n      <td>542</td>\n      <td>542</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>428</td>\n      <td>428</td>\n      <td>428</td>\n      <td>428</td>\n      <td>426</td>\n      <td>428</td>\n      <td>428</td>\n      <td>428</td>\n      <td>428</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">PlayStation 3</th>\n      <th>Average</th>\n      <td>516</td>\n      <td>516</td>\n      <td>516</td>\n      <td>516</td>\n      <td>515</td>\n      <td>516</td>\n      <td>516</td>\n      <td>516</td>\n      <td>516</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>569</td>\n      <td>569</td>\n      <td>569</td>\n      <td>569</td>\n      <td>569</td>\n      <td>569</td>\n      <td>569</td>\n      <td>569</td>\n      <td>569</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>271</td>\n      <td>271</td>\n      <td>271</td>\n      <td>271</td>\n      <td>271</td>\n      <td>271</td>\n      <td>271</td>\n      <td>271</td>\n      <td>271</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Wii</th>\n      <th>Average</th>\n      <td>551</td>\n      <td>551</td>\n      <td>551</td>\n      <td>551</td>\n      <td>547</td>\n      <td>551</td>\n      <td>551</td>\n      <td>551</td>\n      <td>551</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>494</td>\n      <td>494</td>\n      <td>494</td>\n      <td>494</td>\n      <td>494</td>\n      <td>494</td>\n      <td>494</td>\n      <td>494</td>\n      <td>494</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Wireless</th>\n      <th>Average</th>\n      <td>473</td>\n      <td>473</td>\n      <td>473</td>\n      <td>473</td>\n      <td>471</td>\n      <td>473</td>\n      <td>473</td>\n      <td>473</td>\n      <td>473</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>308</td>\n      <td>308</td>\n      <td>308</td>\n      <td>308</td>\n      <td>306</td>\n      <td>308</td>\n      <td>308</td>\n      <td>308</td>\n      <td>308</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>129</td>\n      <td>129</td>\n      <td>129</td>\n      <td>129</td>\n      <td>129</td>\n      <td>129</td>\n      <td>129</td>\n      <td>129</td>\n      <td>129</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Xbox</th>\n      <th>Average</th>\n      <td>307</td>\n      <td>307</td>\n      <td>307</td>\n      <td>307</td>\n      <td>307</td>\n      <td>307</td>\n      <td>307</td>\n      <td>307</td>\n      <td>307</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>160</td>\n      <td>160</td>\n      <td>160</td>\n      <td>160</td>\n      <td>160</td>\n      <td>160</td>\n      <td>160</td>\n      <td>160</td>\n      <td>160</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Xbox 360</th>\n      <th>Average</th>\n      <td>631</td>\n      <td>631</td>\n      <td>631</td>\n      <td>631</td>\n      <td>631</td>\n      <td>631</td>\n      <td>631</td>\n      <td>631</td>\n      <td>631</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>646</td>\n      <td>646</td>\n      <td>646</td>\n      <td>646</td>\n      <td>646</td>\n      <td>646</td>\n      <td>646</td>\n      <td>646</td>\n      <td>646</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">iPhone</th>\n      <th>Average</th>\n      <td>412</td>\n      <td>412</td>\n      <td>412</td>\n      <td>412</td>\n      <td>405</td>\n      <td>412</td>\n      <td>412</td>\n      <td>412</td>\n      <td>412</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>315</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>109</td>\n      <td>109</td>\n      <td>109</td>\n      <td>109</td>\n      <td>108</td>\n      <td>109</td>\n      <td>109</td>\n      <td>109</td>\n      <td>109</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<p>事实上，上面的表格大部分内容也用不上，我们需要的其实就三列：<strong>游戏平台</strong>，<strong>评分阶段</strong>和<strong>数量</strong>。因此我就压缩一下原表格，让它变成下面的样子。\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">count_df = filtered_reviews.groupby([<span class=\"string\">\"platform\"</span>, <span class=\"string\">\"score_phrase_new\"</span>]).count().reset_index().iloc[:, :<span class=\"number\">3</span>]</div><div class=\"line\">count_df.rename(columns=&#123;<span class=\"string\">\"score_phrase\"</span>: <span class=\"string\">\"count\"</span>&#125;, inplace=<span class=\"keyword\">True</span>)</div><div class=\"line\">count_df</div></pre></td></tr></table></figure></p>\n<div>\n<table class=\"blueTable\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>platform</th>\n      <th>score_phrase_new</th>\n      <th>count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Nintendo DS</td>\n      <td>Average</td>\n      <td>462</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Nintendo DS</td>\n      <td>Better than Good</td>\n      <td>207</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Nintendo DS</td>\n      <td>Worse than Okay</td>\n      <td>376</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>PC</td>\n      <td>Average</td>\n      <td>1394</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>PC</td>\n      <td>Better than Good</td>\n      <td>1323</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>PC</td>\n      <td>Worse than Okay</td>\n      <td>653</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>PlayStation</td>\n      <td>Average</td>\n      <td>362</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>PlayStation</td>\n      <td>Better than Good</td>\n      <td>313</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>PlayStation</td>\n      <td>Worse than Okay</td>\n      <td>277</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>PlayStation 2</td>\n      <td>Average</td>\n      <td>716</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>PlayStation 2</td>\n      <td>Better than Good</td>\n      <td>542</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>PlayStation 2</td>\n      <td>Worse than Okay</td>\n      <td>428</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>PlayStation 3</td>\n      <td>Average</td>\n      <td>516</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>PlayStation 3</td>\n      <td>Better than Good</td>\n      <td>569</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>PlayStation 3</td>\n      <td>Worse than Okay</td>\n      <td>271</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Wii</td>\n      <td>Average</td>\n      <td>551</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Wii</td>\n      <td>Better than Good</td>\n      <td>321</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>Wii</td>\n      <td>Worse than Okay</td>\n      <td>494</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>Wireless</td>\n      <td>Average</td>\n      <td>473</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Wireless</td>\n      <td>Better than Good</td>\n      <td>308</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>Wireless</td>\n      <td>Worse than Okay</td>\n      <td>129</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>Xbox</td>\n      <td>Average</td>\n      <td>307</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>Xbox</td>\n      <td>Better than Good</td>\n      <td>354</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>Xbox</td>\n      <td>Worse than Okay</td>\n      <td>160</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>Xbox 360</td>\n      <td>Average</td>\n      <td>631</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>Xbox 360</td>\n      <td>Better than Good</td>\n      <td>646</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>Xbox 360</td>\n      <td>Worse than Okay</td>\n      <td>354</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>iPhone</td>\n      <td>Average</td>\n      <td>412</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>iPhone</td>\n      <td>Better than Good</td>\n      <td>321</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>iPhone</td>\n      <td>Worse than Okay</td>\n      <td>109</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<p>数据拿到手了，下面又该是用图形展示数据的时候。这次我们来看一下每一个评分阶段对于各自游戏平台占比究竟是多少。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">bar_width = <span class=\"number\">1</span></div><div class=\"line\">bar_left = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(count_df) // <span class=\"number\">3</span>)]</div><div class=\"line\">tick_pos = [i + (bar_width / <span class=\"number\">2</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> bar_left]</div><div class=\"line\">totals = [i + j + k <span class=\"keyword\">for</span> i, j, k <span class=\"keyword\">in</span> zip(count_df[<span class=\"string\">\"count\"</span>][::<span class=\"number\">3</span>], count_df[<span class=\"string\">\"count\"</span>][<span class=\"number\">1</span>::<span class=\"number\">3</span>], count_df[<span class=\"string\">\"count\"</span>][<span class=\"number\">2</span>::<span class=\"number\">3</span>])]</div><div class=\"line\">ave_perc = [i / j * <span class=\"number\">100</span> <span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> zip(count_df[<span class=\"string\">\"count\"</span>][::<span class=\"number\">3</span>], totals)]</div><div class=\"line\">bt_good_perc = [i / j * <span class=\"number\">100</span> <span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> zip(count_df[<span class=\"string\">\"count\"</span>][<span class=\"number\">1</span>::<span class=\"number\">3</span>], totals)]</div><div class=\"line\">wt_okay_perc = [i / j * <span class=\"number\">100</span> <span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> zip(count_df[<span class=\"string\">\"count\"</span>][<span class=\"number\">2</span>::<span class=\"number\">3</span>], totals)]</div></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">f, ax = plt.subplots(<span class=\"number\">1</span>)</div><div class=\"line\">    </div><div class=\"line\">ax.bar(bar_left, </div><div class=\"line\">       wt_okay_perc,</div><div class=\"line\">       label=<span class=\"string\">\"Worst than Okay\"</span>,</div><div class=\"line\">       alpha=<span class=\"number\">0.9</span>,</div><div class=\"line\">       width=bar_width,</div><div class=\"line\">       edgecolor=<span class=\"string\">\"white\"</span>)</div><div class=\"line\">       </div><div class=\"line\">ax.bar(bar_left,</div><div class=\"line\">       ave_perc,</div><div class=\"line\">       bottom=wt_okay_perc,</div><div class=\"line\">       label=<span class=\"string\">\"Average\"</span>,</div><div class=\"line\">       alpha=<span class=\"number\">0.9</span>,</div><div class=\"line\">       width=bar_width,</div><div class=\"line\">       edgecolor=<span class=\"string\">\"white\"</span>)</div><div class=\"line\">       </div><div class=\"line\">ax.bar(bar_left,</div><div class=\"line\">       bt_good_perc,</div><div class=\"line\">       bottom=[i+j <span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> zip(wt_okay_perc, ave_perc)],</div><div class=\"line\">       label=<span class=\"string\">\"Better than Good\"</span>,</div><div class=\"line\">       alpha=<span class=\"number\">0.9</span>,</div><div class=\"line\">       width=bar_width,</div><div class=\"line\">       edgecolor=<span class=\"string\">\"white\"</span>)</div><div class=\"line\">       </div><div class=\"line\">plt.xticks(tick_pos, set(count_df[<span class=\"string\">\"platform\"</span>]))</div><div class=\"line\">ax.set_ylabel(<span class=\"string\">\"Percentage\"</span>)</div><div class=\"line\">ax.set_xlabel(<span class=\"string\">\"\"</span>)</div><div class=\"line\">plt.legend(bbox_to_anchor=(<span class=\"number\">1.</span>, <span class=\"number\">1.</span>))</div><div class=\"line\">plt.setp(plt.gca().get_xticklabels(), rotation=<span class=\"number\">45</span>, horizontalalignment=<span class=\"string\">\"right\"</span>)</div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<p><img src=\"/images/output_19_0.png\" alt=\"png\"></p>\n<p>我并没有直接把具体百分比的数值标记在上面，不过通过直观的图形依然可以看到一些信息。从图中可以看出来，相对来说，<code>PlayStation</code>，<code>PlayStation2</code>，<code>Wii</code>，<code>PC</code>和<code>Nintendo DS</code>的游戏质量都是很不错的，高质量游戏占比高，且低质量游戏占比低。<code>PlayStation3</code>虽然低质量游戏占比很小，但是高品质游戏也不算很多。<code>iPhone</code>和<code>Xbox</code>的表现算是最差的了，低质量游戏占比分属最高的一二，高品质游戏也是最低的两个平台。其实<code>iPhone</code>是这样的倒是不意外了，因为毕竟<code>iPhone</code>平台的起点相对于其他的平台要低很多，基本上三五个人，甚至一个人做出的游戏都有，这样很难保证游戏兼顾趣味性和剧情或者其他方面。在后期维护上面肯定也要比大公司开发的游戏差了很多。遗憾的是<code>Xbox</code>竟然也有如此差劲的表现，着实令我难以理解。</p>\n<hr>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>至此，我打算分析的内容就呈现完了，这就是我个人拿到数据之后一个简单的想法，然后试着去将这个想法用数据分析的方法展现出来，供自己去理解。后面我还会对这个数据集进一步的分析，比如去探讨一下年份和分数的关系，游戏类别和分数的关系。希望这篇文章可以起到抛砖引玉的作用，能让各位看完之后对于如何开始分析一份数据有自己的想法。</p>\n<p>各位看官对于本文有任何不明白的地方，欢迎提问，也欢迎指正和建议。</p>\n<hr>\n<h1 id=\"Related-Links\"><a href=\"#Related-Links\" class=\"headerlink\" title=\"Related Links\"></a>Related Links</h1><ol>\n<li><a href=\"https://www.dataquest.io/blog/pandas-python-tutorial/\" target=\"_blank\" rel=\"external\">Pandas Tutorial: Data analysis with Python: Part 1</a></li>\n<li><a href=\"https://www.dataquest.io/blog/pandas-tutorial-python-2/\" target=\"_blank\" rel=\"external\">Pandas Tutorial: Data analysis with Python: Part 2</a></li>\n<li><a href=\"https://chrisalbon.com/python/matplotlib_percentage_stacked_bar_plot.html\" target=\"_blank\" rel=\"external\">Stacked Percentage Bar Plot In MatPlotLib</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>Python在数据科学领域的应用真的是越来越普及，得益于Python相对来讲通俗易懂的语言风格，语法简单且容易入门的特性，给很多数据科学领域的朋友，减轻了一部分学习编程语言的繁重。<code>Pandas</code> + <code>NumPy</code> + <code>Matplotlib</code>，这三者的结合基本可以胜任任意简单的数据分析和可视化的任务。复杂一点的可能还会需要<code>SciPy</code>的帮助。</p>\n<h1 id=\"本文目的\"><a href=\"#本文目的\" class=\"headerlink\" title=\"本文目的\"></a>本文目的</h1><p>这次，我打算用一篇长文来记录一下自己是如何利用Pandas进行数据分析的。网上有很多的<code>Pandas</code>入门教程，因此我这里并不打算针对所有Pandas的基础操作描述的那么清楚，还是希望更多的表达一些对于数据分析的想法和实现。</p>\n<p>广义上，数据分析其实包含了从导入数据-&gt;清洗数据-&gt;<strong>分析数据</strong>-&gt;展示数据，这一从头到尾的流程。狭义上，数据分析指的就是中间分析数据这一块内容。本文按照广义上的数据分析的过程来一步步探讨。</p>\n<p>接下来我们就正式开始本次数据分析之旅。</p>","more":"<hr>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>下面的这一段代码主要是包的调用和一些环境配置，<code>Seaborn</code>是也是一个plot包，可用来画出比<code>Matplotlib</code>更漂亮的图，它本身是基于<code>Matplotlib</code>设计的，对<code>NumPy</code>和<code>Pandas</code>都有很好的支持。这里我就不做过多解释了，对<code>Seaborn</code>有兴趣的朋友可以留言咨询或者自行探索。\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</div><div class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot <span class=\"keyword\">as</span> plt</div><div class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</div><div class=\"line\">    </div><div class=\"line\">%matplotlib inline</div><div class=\"line\">    </div><div class=\"line\">sns.set(rc=&#123;<span class=\"string\">\"figure.figsize\"</span>: (<span class=\"number\">10</span>, <span class=\"number\">6.25</span>)&#125;)</div><div class=\"line\">sns.set_style(<span class=\"string\">\"darkgrid\"</span>)</div><div class=\"line\">colors = [<span class=\"string\">\"windows blue\"</span>, <span class=\"string\">\"amber\"</span>, <span class=\"string\">\"faded green\"</span>, <span class=\"string\">\"greyish\"</span>, <span class=\"string\">\"dusty purple\"</span>, <span class=\"string\">\"red violet\"</span>, <span class=\"string\">\"marine\"</span>, <span class=\"string\">\"jungle green\"</span>, <span class=\"string\">\"chocolate brown\"</span>, <span class=\"string\">\"dull pink\"</span>, <span class=\"string\">\"reddish orange\"</span>]</div><div class=\"line\">sns.set_palette(sns.xkcd_palette(colors))</div></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"导入数据\"><a href=\"#导入数据\" class=\"headerlink\" title=\"导入数据\"></a>导入数据</h2><p>我这次用的数据是IGN上近20年来的各种平台的游戏，来源于<a href=\"https://www.kaggle.com/egrinstein/20-years-of-games\" target=\"_blank\" rel=\"external\">这里</a>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reviews = pd.read_csv(<span class=\"string\">\"ign.csv\"</span>)</div></pre></td></tr></table></figure>\n<p>数据读入之后，我们来看一下这里都有些什么内容。\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reviews.head()</div></pre></td></tr></table></figure></p>\n<div>\n<table class=\"blueTable\">\n  <thead>\n    <tr style=\"text-align: center;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>score_phrase</th>\n      <th>title</th>\n      <th>url</th>\n      <th>platform</th>\n      <th>score</th>\n      <th>genre</th>\n      <th>editors_choice</th>\n      <th>release_year</th>\n      <th>release_month</th>\n      <th>release_day</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>Amazing</td>\n      <td>LittleBigPlanet PS Vita</td>\n      <td>/games/littlebigplanet-vita/vita-98907</td>\n      <td>PlayStation Vita</td>\n      <td>9.0</td>\n      <td>Platformer</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>Amazing</td>\n      <td>LittleBigPlanet PS Vita – Marvel Super Hero E…</td>\n      <td>/games/littlebigplanet-ps-vita-marvel-super-he…</td>\n      <td>PlayStation Vita</td>\n      <td>9.0</td>\n      <td>Platformer</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>Great</td>\n      <td>Splice: Tree of Life</td>\n      <td>/games/splice/ipad-141070</td>\n      <td>iPad</td>\n      <td>8.5</td>\n      <td>Puzzle</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/xbox-360-128182</td>\n      <td>Xbox 360</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/ps3-128181</td>\n      <td>PlayStation 3</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<p>这里先简单介绍一下每一列都代表什么吧：</p>\n<ul>\n<li>score_phrase – IGN用一个词来评价当前游戏，与得分直接相关；</li>\n<li>title – 游戏名称；</li>\n<li>url – 完整评论的地址；</li>\n<li>platform – 游戏平台（PS4, PC, Xbox, etc.）；</li>\n<li>score – 游戏的具体评分，从1.0到10.0；</li>\n<li>genre – 游戏分类；</li>\n<li>editors_choice – 是否为IGN编辑推荐的游戏，与评分有关系。</li>\n<li>release_year – 游戏发布年份；</li>\n<li>release_month – 发布月份；</li>\n<li>release_day – 发布日期。</li>\n</ul>\n<p>我们来看下总共多少个数据。\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reviews.shape</div></pre></td></tr></table></figure></p>\n<pre><code>(18625, 11)\n</code></pre><p>看来我们这次的数据里一共<code>18625</code>条数据，一共<code>11</code>列属性。</p>\n<hr>\n<h2 id=\"清洗数据\"><a href=\"#清洗数据\" class=\"headerlink\" title=\"清洗数据\"></a>清洗数据</h2><p>源数据导入后一般来说是不能直接使用的，需要进行一定范围的数据清洗，不过本次的数据基本不需要清洗，收集这个数据的<em>Eric Grinstein</em>已经对数据进行了清洗工作。不过这里我们仍需要做一点简单的清洗工作，去除一些我们不需要的内容。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">reviews = reviews.iloc[:, <span class=\"number\">1</span>:]</div><div class=\"line\">reviews.head()</div></pre></td></tr></table></figure>\n<div>\n<style>\n    .dataframe {\n      display: block;\n      overflow-x: auto;\n      white-space: nowrap;\n    }\n\n    .dataframe thead tr:only-child th {\n        text-align: center;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n</style>\n<table class=\"blueTable\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>score_phrase</th>\n      <th>title</th>\n      <th>url</th>\n      <th>platform</th>\n      <th>score</th>\n      <th>genre</th>\n      <th>editors_choice</th>\n      <th>release_year</th>\n      <th>release_month</th>\n      <th>release_day</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Amazing</td>\n      <td>LittleBigPlanet PS Vita</td>\n      <td>/games/littlebigplanet-vita/vita-98907</td>\n      <td>PlayStation Vita</td>\n      <td>9.0</td>\n      <td>Platformer</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Amazing</td>\n      <td>LittleBigPlanet PS Vita – Marvel Super Hero E…</td>\n      <td>/games/littlebigplanet-ps-vita-marvel-super-he…</td>\n      <td>PlayStation Vita</td>\n      <td>9.0</td>\n      <td>Platformer</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Great</td>\n      <td>Splice: Tree of Life</td>\n      <td>/games/splice/ipad-141070</td>\n      <td>iPad</td>\n      <td>8.5</td>\n      <td>Puzzle</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/xbox-360-128182</td>\n      <td>Xbox 360</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/ps3-128181</td>\n      <td>PlayStation 3</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<hr>\n<h2 id=\"分析数据\"><a href=\"#分析数据\" class=\"headerlink\" title=\"分析数据\"></a>分析数据</h2><p>数据清洗之后，其实就是分析过程的正式开始。在开始分析过程之前，先说点题外话。我本身对于游戏是很热爱的，从小到大，游戏机，掌机，PC，也拥有过不少的游戏平台。从和父母斗智斗勇中各种争取时间玩的红白机，小霸王学习机，到后来可以躲在被子里玩的GameBoy，但偶尔还得探出头担心父母进屋里发现自己的小秘密；再往后的世嘉，所以又不得不和父母软磨硬泡恳求游戏时间。直至家里第一台PC的出现，基本其他的游戏平台就很少碰了，除了后来的PSP，那是我从GameBoy之后时隔很多年再次拿起掌机玩游戏。要说起游戏，游戏平台，游戏的历史，真的说上三天三夜也说不完，其实这也是我为什么选择这么IGN的这个数据作为数据分析的数据来源。我也很想看看这20年来电子游戏产业的发展和趋势。</p>\n<p>好了，咱们言归正传，就我个人而言，拿到这么多的数据之后，第一反应是：这么多的游戏，究竟是分布在了多少平台上呢？我亲身体验过的平台其实并不多，大概10个左右吧。那么这个数据集里究竟包含了多少平台呢？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">all_platforms = reviews[<span class=\"string\">\"platform\"</span>].unique()</div><div class=\"line\">all_platforms</div></pre></td></tr></table></figure>\n<pre><code>array([&apos;PlayStation Vita&apos;, &apos;iPad&apos;, &apos;Xbox 360&apos;, &apos;PlayStation 3&apos;,\n       &apos;Macintosh&apos;, &apos;PC&apos;, &apos;iPhone&apos;, &apos;Nintendo DS&apos;, &apos;Nintendo 3DS&apos;,\n       &apos;Android&apos;, &apos;Wii&apos;, &apos;PlayStation 4&apos;, &apos;Wii U&apos;, &apos;Linux&apos;,\n       &apos;PlayStation Portable&apos;, &apos;PlayStation&apos;, &apos;Nintendo 64&apos;, &apos;Saturn&apos;,\n       &apos;Lynx&apos;, &apos;Game Boy&apos;, &apos;Game Boy Color&apos;, &apos;NeoGeo Pocket Color&apos;,\n       &apos;Game.Com&apos;, &apos;Dreamcast&apos;, &apos;Dreamcast VMU&apos;, &apos;WonderSwan&apos;, &apos;Arcade&apos;,\n       &apos;Nintendo 64DD&apos;, &apos;PlayStation 2&apos;, &apos;WonderSwan Color&apos;,\n       &apos;Game Boy Advance&apos;, &apos;Xbox&apos;, &apos;GameCube&apos;, &apos;DVD / HD Video Game&apos;,\n       &apos;Wireless&apos;, &apos;Pocket PC&apos;, &apos;N-Gage&apos;, &apos;NES&apos;, &apos;iPod&apos;, &apos;Genesis&apos;,\n       &apos;TurboGrafx-16&apos;, &apos;Super NES&apos;, &apos;NeoGeo&apos;, &apos;Master System&apos;,\n       &apos;Atari 5200&apos;, &apos;TurboGrafx-CD&apos;, &apos;Atari 2600&apos;, &apos;Sega 32X&apos;, &apos;Vectrex&apos;,\n       &apos;Commodore 64/128&apos;, &apos;Sega CD&apos;, &apos;Nintendo DSi&apos;, &apos;Windows Phone&apos;,\n       &apos;Web Games&apos;, &apos;Xbox One&apos;, &apos;Windows Surface&apos;, &apos;Ouya&apos;,\n       &apos;New Nintendo 3DS&apos;, &apos;SteamOS&apos;], dtype=object)\n</code></pre><p>这么多的平台……说实话，这里有很多我听都没听过，像<code>Dreamcast</code>，<code>Atari 2600</code>，<code>Vectrex</code>等等，看来这20年，游戏产业的发展还是很多元化的，至少从游戏平台上就可以看出端倪。</p>\n<p>有了游戏平台的信息，自然而然地就会问，每个平台大概都出过多少游戏呢？\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reviews[<span class=\"string\">\"platform\"</span>].value_counts(dropna=<span class=\"keyword\">False</span>)</div></pre></td></tr></table></figure></p>\n<pre><code>PC                      3370\nPlayStation 2           1686\nXbox 360                1631\nWii                     1366\nPlayStation 3           1356\nNintendo DS             1045\nPlayStation              952\nWireless                 910\niPhone                   842\nXbox                     821\nPlayStation Portable     633\nGame Boy Advance         623\nGameCube                 509\nGame Boy Color           356\nNintendo 64              302\nDreamcast                286\nPlayStation 4            277\nNintendo DSi             254\nNintendo 3DS             225\nXbox One                 208\nPlayStation Vita         155\nWii U                    114\niPad                      99\nLynx                      82\nMacintosh                 81\nGenesis                   58\nNES                       49\nTurboGrafx-16             40\nAndroid                   39\nSuper NES                 33\nNeoGeo Pocket Color       31\nN-Gage                    30\nGame Boy                  22\niPod                      17\nSega 32X                  16\nWindows Phone             14\nMaster System             13\nArcade                    11\nLinux                     10\nNeoGeo                    10\nNintendo 64DD              7\nCommodore 64/128           6\nSaturn                     6\nAtari 2600                 5\nWonderSwan                 4\nTurboGrafx-CD              3\nGame.Com                   3\nAtari 5200                 2\nNew Nintendo 3DS           2\nVectrex                    2\nPocket PC                  1\nWonderSwan Color           1\nOuya                       1\nWeb Games                  1\nSteamOS                    1\nDreamcast VMU              1\nWindows Surface            1\nDVD / HD Video Game        1\nSega CD                    1\nName: platform, dtype: int64\n</code></pre><p>从上面的统计来看，PC端无疑是最大的贡献者，这也可以理解，毕竟个人电脑从上个世纪末开始出现井喷，到后来虽然出货量开始下降，但一直都是人们学习生活娱乐中不可或缺的一部分，并且早期的个人电脑绝大部分都是以Windows为操作系统。不过让我没想到的是<code>Dreamcast</code>竟然还有286款游戏，看来是我孤陋寡闻了……</p>\n<p>下面来看看排名前十的平台都有哪些。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">platforms = reviews[<span class=\"string\">\"platform\"</span>].value_counts()[:<span class=\"number\">10</span>].index.tolist()</div><div class=\"line\">platforms</div></pre></td></tr></table></figure>\n<pre><code>[&apos;PC&apos;,\n&apos;PlayStation 2&apos;,\n&apos;Xbox 360&apos;,\n&apos;Wii&apos;,\n&apos;PlayStation 3&apos;,\n&apos;Nintendo DS&apos;,\n&apos;PlayStation&apos;,\n&apos;Wireless&apos;,\n&apos;iPhone&apos;,\n&apos;Xbox&apos;]\n</code></pre><p>既然前十的平台我已经知道了，那么下面来看看每个平台的游戏质量如何，虽然PC端的游戏最多，但不一定好游戏占比就是最多的，对吧？</p>\n<p>想知道每个平台的游戏质量如何，我得先从所有的数据中将只属于前十的平台的游戏提取出来。这里我创建一个filter，用来筛选游戏平台。\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">fil = reviews[<span class=\"string\">\"platform\"</span>] == platforms[<span class=\"number\">0</span>]   <span class=\"comment\"># create a filter</span></div><div class=\"line\">fil</div></pre></td></tr></table></figure></p>\n<pre><code>0        False\n1        False\n2        False\n3        False\n4        False\n5        False\n6        False\n7         True\n8        False\n9         True\n          ...\n18615    False\n18616     True\n18617    False\n18618     True\n18619     True\n18620    False\n18621    False\n18622    False\n18623    False\n18624     True\nName: platform, Length: 18625, dtype: bool\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> platform <span class=\"keyword\">in</span> platforms[<span class=\"number\">1</span>:]:</div><div class=\"line\">    fil |= reviews[<span class=\"string\">\"platform\"</span>] == platform</div><div class=\"line\">    </div><div class=\"line\">filtered_reviews = reviews[fil]</div></pre></td></tr></table></figure>\n<p>下面是提取出来的所有数据：\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">filtered_reviews</div></pre></td></tr></table></figure></p>\n<div>\n<table class=\"blueTable\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>score_phrase</th>\n      <th>title</th>\n      <th>url</th>\n      <th>platform</th>\n      <th>score</th>\n      <th>genre</th>\n      <th>editors_choice</th>\n      <th>release_year</th>\n      <th>release_month</th>\n      <th>release_day</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/xbox-360-128182</td>\n      <td>Xbox 360</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/ps3-128181</td>\n      <td>PlayStation 3</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Awful</td>\n      <td>Double Dragon: Neon</td>\n      <td>/games/double-dragon-neon/xbox-360-131320</td>\n      <td>Xbox 360</td>\n      <td>3.0</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Amazing</td>\n      <td>Guild Wars 2</td>\n      <td>/games/guild-wars-2/pc-896298</td>\n      <td>PC</td>\n      <td>9.0</td>\n      <td>RPG</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Awful</td>\n      <td>Double Dragon: Neon</td>\n      <td>/games/double-dragon-neon/ps3-131321</td>\n      <td>PlayStation 3</td>\n      <td>3.0</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Good</td>\n      <td>Total War Battles: Shogun</td>\n      <td>/games/total-war-battles-shogun/pc-142564</td>\n      <td>PC</td>\n      <td>7.0</td>\n      <td>Strategy</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Good</td>\n      <td>Tekken Tag Tournament 2</td>\n      <td>/games/tekken-tag-tournament-2/ps3-124584</td>\n      <td>PlayStation 3</td>\n      <td>7.5</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Good</td>\n      <td>Tekken Tag Tournament 2</td>\n      <td>/games/tekken-tag-tournament-2/xbox-360-124581</td>\n      <td>Xbox 360</td>\n      <td>7.5</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Good</td>\n      <td>Wild Blood</td>\n      <td>/games/wild-blood/iphone-139363</td>\n      <td>iPhone</td>\n      <td>7.0</td>\n      <td>NaN</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Amazing</td>\n      <td>Mark of the Ninja</td>\n      <td>/games/mark-of-the-ninja-135615/xbox-360-129276</td>\n      <td>Xbox 360</td>\n      <td>9.0</td>\n      <td>Action, Adventure</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Amazing</td>\n      <td>Mark of the Ninja</td>\n      <td>/games/mark-of-the-ninja-135615/pc-143761</td>\n      <td>PC</td>\n      <td>9.0</td>\n      <td>Action, Adventure</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Okay</td>\n      <td>Home: A Unique Horror Adventure</td>\n      <td>/games/home-a-unique-horror-adventure/pc-137135</td>\n      <td>PC</td>\n      <td>6.5</td>\n      <td>Adventure</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>Great</td>\n      <td>Avengers Initiative</td>\n      <td>/games/avengers-initiative/iphone-141579</td>\n      <td>iPhone</td>\n      <td>8.0</td>\n      <td>Action</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>Mediocre</td>\n      <td>Way of the Samurai 4</td>\n      <td>/games/way-of-the-samurai-4/ps3-23516</td>\n      <td>PlayStation 3</td>\n      <td>5.5</td>\n      <td>Action, Adventure</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Good</td>\n      <td>JoJo’s Bizarre Adventure HD</td>\n      <td>/games/jojos-bizarre-adventure/xbox-360-137717</td>\n      <td>Xbox 360</td>\n      <td>7.0</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>Good</td>\n      <td>JoJo’s Bizarre Adventure HD</td>\n      <td>/games/jojos-bizarre-adventure/ps3-137896</td>\n      <td>PlayStation 3</td>\n      <td>7.0</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>Good</td>\n      <td>Mass Effect 3: Leviathan</td>\n      <td>/games/mass-effect-3-leviathan/xbox-360-138918</td>\n      <td>Xbox 360</td>\n      <td>7.5</td>\n      <td>RPG</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>31</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>Good</td>\n      <td>Mass Effect 3: Leviathan</td>\n      <td>/games/mass-effect-3-leviathan/ps3-138915</td>\n      <td>PlayStation 3</td>\n      <td>7.5</td>\n      <td>RPG</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>31</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>Good</td>\n      <td>Mass Effect 3: Leviathan</td>\n      <td>/games/mass-effect-3-leviathan/pc-138919</td>\n      <td>PC</td>\n      <td>7.5</td>\n      <td>RPG</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>31</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>Amazing</td>\n      <td>Dark Souls (Prepare to Die Edition)</td>\n      <td>/games/dark-souls-prepare-to-die-edition/pc-13…</td>\n      <td>PC</td>\n      <td>9.0</td>\n      <td>Action, RPG</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>31</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>Good</td>\n      <td>Symphony</td>\n      <td>/games/symphony/pc-136470</td>\n      <td>PC</td>\n      <td>7.0</td>\n      <td>Shooter</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>Good</td>\n      <td>Tom Clancy’s Ghost Recon Phantoms</td>\n      <td>/games/tom-clancys-ghost-recon-online/pc-109114</td>\n      <td>PC</td>\n      <td>7.5</td>\n      <td>Shooter</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>29</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>Great</td>\n      <td>Thirty Flights of Loving</td>\n      <td>/games/thirty-flights-of-loving/pc-138374</td>\n      <td>PC</td>\n      <td>8.0</td>\n      <td>Adventure</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>29</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>Okay</td>\n      <td>Legasista</td>\n      <td>/games/legasista/ps3-127147</td>\n      <td>PlayStation 3</td>\n      <td>6.5</td>\n      <td>Action, RPG</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>8</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>Great</td>\n      <td>World of Warcraft: Mists of Pandaria</td>\n      <td>/games/world-of-warcraft-mists-of-pandaria/pc-…</td>\n      <td>PC</td>\n      <td>8.7</td>\n      <td>RPG</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>10</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>Bad</td>\n      <td>Hell Yeah! Wrath of the Dead Rabbit</td>\n      <td>/games/hell-yeah-wrath-of-the-dead-rabbit/ps3-…</td>\n      <td>PlayStation 3</td>\n      <td>4.9</td>\n      <td>Platformer</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>10</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>Amazing</td>\n      <td>Pokemon White Version 2</td>\n      <td>/games/pokemon-white-version-2/nds-129228</td>\n      <td>Nintendo DS</td>\n      <td>9.6</td>\n      <td>RPG</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>10</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>Good</td>\n      <td>War of the Roses</td>\n      <td>/games/war-of-the-roses-140577/pc-115849</td>\n      <td>PC</td>\n      <td>7.3</td>\n      <td>Action</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>10</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>Amazing</td>\n      <td>Pokemon Black Version 2</td>\n      <td>/games/pokemon-black-version-2/nds-129224</td>\n      <td>Nintendo DS</td>\n      <td>9.6</td>\n      <td>RPG</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>10</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>Okay</td>\n      <td>Drakerider</td>\n      <td>/games/drakerider/iphone-135745</td>\n      <td>iPhone</td>\n      <td>6.5</td>\n      <td>RPG</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>10</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>…</th>\n      <td>…</td>\n      <td>…</td>\n      <td>…</td>\n      <td>…</td>\n      <td>…</td>\n      <td>…</td>\n      <td>…</td>\n      <td>…</td>\n      <td>…</td>\n      <td>…</td>\n    </tr>\n    <tr>\n      <th>18546</th>\n      <td>Great</td>\n      <td>Devil Daggers</td>\n      <td>/games/devil-daggers/pc-20049771</td>\n      <td>PC</td>\n      <td>8.5</td>\n      <td>Shooter</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>2</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>18547</th>\n      <td>Good</td>\n      <td>Superhot</td>\n      <td>/games/superhot/pc-20018899</td>\n      <td>PC</td>\n      <td>7.5</td>\n      <td>Action</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>2</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>18549</th>\n      <td>Good</td>\n      <td>Battleborn</td>\n      <td>/games/battleborn/pc-20021225</td>\n      <td>PC</td>\n      <td>7.1</td>\n      <td>Shooter</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>5</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>18554</th>\n      <td>Good</td>\n      <td>The Park</td>\n      <td>/games/the-park/pc-20042102</td>\n      <td>PC</td>\n      <td>7.0</td>\n      <td>Adventure</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>5</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>18555</th>\n      <td>Great</td>\n      <td>Hitman: Episode 2</td>\n      <td>/games/hitman-episode-2/pc-20051629</td>\n      <td>PC</td>\n      <td>8.5</td>\n      <td>Shooter</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>4</td>\n      <td>29</td>\n    </tr>\n    <tr>\n      <th>18557</th>\n      <td>Amazing</td>\n      <td>Hearts of Iron IV</td>\n      <td>/games/hearts-of-iron-iv/pc-20012080</td>\n      <td>PC</td>\n      <td>9.0</td>\n      <td>Strategy</td>\n      <td>Y</td>\n      <td>2016</td>\n      <td>6</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>18559</th>\n      <td>Okay</td>\n      <td>Dangerous Golf</td>\n      <td>/games/dangerous-golf/pc-20048436</td>\n      <td>PC</td>\n      <td>6.0</td>\n      <td>Sports, Action</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>6</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>18567</th>\n      <td>Great</td>\n      <td>Offworld Trading Company</td>\n      <td>/games/offworld-trading-company/pc-20018639</td>\n      <td>PC</td>\n      <td>8.0</td>\n      <td>Strategy</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>4</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>18568</th>\n      <td>Okay</td>\n      <td>The Walking Dead: Michonne – Episode 3: What …</td>\n      <td>/games/the-walking-dead-michonne-episode-3/pc-…</td>\n      <td>PC</td>\n      <td>6.3</td>\n      <td>Adventure</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>4</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>18570</th>\n      <td>Good</td>\n      <td>Battlefleet Gothic: Armada</td>\n      <td>/games/battlefleet-gothic-armada/pc-20030300</td>\n      <td>PC</td>\n      <td>7.1</td>\n      <td>Strategy</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>4</td>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>18572</th>\n      <td>Amazing</td>\n      <td>Overwatch</td>\n      <td>/games/overwatch/pc-20027413</td>\n      <td>PC</td>\n      <td>9.4</td>\n      <td>Shooter</td>\n      <td>Y</td>\n      <td>2016</td>\n      <td>5</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>18575</th>\n      <td>Good</td>\n      <td>Fallout 4: Nuka World</td>\n      <td>/games/fallout-4-nuka-world/pc-20054761</td>\n      <td>PC</td>\n      <td>7.9</td>\n      <td>RPG</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <th>18578</th>\n      <td>Good</td>\n      <td>Master of Orion</td>\n      <td>/games/master-of-orion-wargaming/pc-20038452</td>\n      <td>PC</td>\n      <td>7.1</td>\n      <td>Strategy</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>18580</th>\n      <td>Great</td>\n      <td>Quadrilateral Cowboy</td>\n      <td>/games/quadrilateral-cowboy/pc-159788</td>\n      <td>PC</td>\n      <td>8.5</td>\n      <td>Puzzle</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>18581</th>\n      <td>Great</td>\n      <td>Fallout 4: Vault-Tec Workshop</td>\n      <td>/games/fallout-4-vault-tec-workshop/pc-20054769</td>\n      <td>PC</td>\n      <td>8.2</td>\n      <td>RPG</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>27</td>\n    </tr>\n    <tr>\n      <th>18583</th>\n      <td>Great</td>\n      <td>Kentucky Route Zero: Act 4</td>\n      <td>/games/kentucky-route-zero-act-4/pc-20046280</td>\n      <td>PC</td>\n      <td>8.5</td>\n      <td>Adventure</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>18586</th>\n      <td>Great</td>\n      <td>F1 2016</td>\n      <td>/games/f1-2016/pc-20054151</td>\n      <td>PC</td>\n      <td>8.8</td>\n      <td>Racing</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>24</td>\n    </tr>\n    <tr>\n      <th>18589</th>\n      <td>Amazing</td>\n      <td>Deus Ex: Mankind Divided</td>\n      <td>/games/deus-ex-mankind-divided/pc-20013794</td>\n      <td>PC</td>\n      <td>9.2</td>\n      <td>Action, RPG</td>\n      <td>Y</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>19</td>\n    </tr>\n    <tr>\n      <th>18595</th>\n      <td>Bad</td>\n      <td>Ghostbusters</td>\n      <td>/games/ghostbusters-the-movie/pc-20052317</td>\n      <td>PC</td>\n      <td>4.4</td>\n      <td>Action</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>16</td>\n    </tr>\n    <tr>\n      <th>18596</th>\n      <td>Okay</td>\n      <td>Necropolis</td>\n      <td>/games/necropolis/pc-20030346</td>\n      <td>PC</td>\n      <td>6.5</td>\n      <td>Action, Adventure</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>14</td>\n    </tr>\n    <tr>\n      <th>18598</th>\n      <td>Okay</td>\n      <td>Furi</td>\n      <td>/games/furi/pc-20044439</td>\n      <td>PC</td>\n      <td>6.8</td>\n      <td>Action</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>18600</th>\n      <td>Good</td>\n      <td>Hitman: Episode 4</td>\n      <td>/games/hitman-episode-4/pc-20051637</td>\n      <td>PC</td>\n      <td>7.4</td>\n      <td>Shooter</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>19</td>\n    </tr>\n    <tr>\n      <th>18603</th>\n      <td>Good</td>\n      <td>Grow Up</td>\n      <td>/games/grow-up/pc-20054824</td>\n      <td>PC</td>\n      <td>7.8</td>\n      <td>Platformer</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>18</td>\n    </tr>\n    <tr>\n      <th>18606</th>\n      <td>Okay</td>\n      <td>Starcraft II: Nova Covert Ops – Mission Pack 2</td>\n      <td>/games/starcraft-ii-nova-covert-ops-mission-pa…</td>\n      <td>PC</td>\n      <td>6.4</td>\n      <td>Strategy</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>18607</th>\n      <td>Good</td>\n      <td>Pokemon Go</td>\n      <td>/games/pokemon-go/iphone-20042699</td>\n      <td>iPhone</td>\n      <td>7.0</td>\n      <td>Battle</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>18613</th>\n      <td>Great</td>\n      <td>XCOM 2: Shen’s Last Gift</td>\n      <td>/games/xcom-2-shens-last-gift/pc-20055520</td>\n      <td>PC</td>\n      <td>8.0</td>\n      <td>Strategy</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>18616</th>\n      <td>Good</td>\n      <td>Batman: The Telltale Series – Episode 1: Real…</td>\n      <td>/games/batman-the-telltale-series-episode-1-re…</td>\n      <td>PC</td>\n      <td>7.5</td>\n      <td>Adventure</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>18618</th>\n      <td>Amazing</td>\n      <td>Starbound</td>\n      <td>/games/starbound-2016/pc-128879</td>\n      <td>PC</td>\n      <td>9.1</td>\n      <td>Action</td>\n      <td>Y</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>18619</th>\n      <td>Good</td>\n      <td>Human Fall Flat</td>\n      <td>/games/human-fall-flat/pc-20051928</td>\n      <td>PC</td>\n      <td>7.9</td>\n      <td>Puzzle, Action</td>\n      <td>N</td>\n      <td>2016</td>\n      <td>7</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>18624</th>\n      <td>Masterpiece</td>\n      <td>Inside</td>\n      <td>/games/inside-playdead/pc-20055740</td>\n      <td>PC</td>\n      <td>10.0</td>\n      <td>Adventure</td>\n      <td>Y</td>\n      <td>2016</td>\n      <td>6</td>\n      <td>28</td>\n    </tr>\n  </tbody>\n</table>\n<p>13979 rows × 10 columns</p>\n</div>\n\n<hr>\n<h2 id=\"展示数据\"><a href=\"#展示数据\" class=\"headerlink\" title=\"展示数据\"></a>展示数据</h2><p>现在已经有了前十平台的数据，需要思考的就是如何来呈现每个平台的游戏质量呢？当然可以用每个平台的<code>score</code>的平均值来对比，但未免有点单薄了。数据属性中有一列是<code>score_phrase</code>，用一个单词来形容当前游戏的好坏，与<code>score</code>直接挂钩，用这个来展示应该会更容易理解和分析。</p>\n<p>这里可以用<code>Matplotlib.pyplot</code>的<code>bar</code>来画，也可以用<code>Seaborn</code>中的<code>countplot</code>，后者使用起来更容易方便。\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sns.countplot(x=<span class=\"string\">\"platform\"</span>, hue=<span class=\"string\">\"score_phrase\"</span>, data=filtered_reviews, palette=sns.xkcd_palette(colors));</div></pre></td></tr></table></figure></p>\n<p><img src=\"/images/output_13_0.png\" alt=\"png\"></p>\n<p>展示的结果如上图所示，我们可以看到PC平台下，<code>Great</code>和<code>Good</code>这两栏下的游戏数量基本就占了大半，但我并不能说PC端的游戏质量就比其他平台高出一筹，因为我们依然无法判断每个平台下优秀的作品占比如何。这幅图只能直观地告诉我们每个平台下，所有分数的一个分布状况。</p>\n<p>所以，下面的工作，我要继续细化一下数据分析和展示的部分。</p>\n<hr>\n<h2 id=\"进一步分析与展示数据\"><a href=\"#进一步分析与展示数据\" class=\"headerlink\" title=\"进一步分析与展示数据\"></a>进一步分析与展示数据</h2><p>因为原先划分的<code>score_phrase</code>太多了，我决定将它们重新划为三个部分：好于<code>Good</code>的，差于<code>Okay</code>的，剩下的就是中间部分。我的这个标准可能比较严格，在我看来，评分<code>8.0</code>以上的才算的上是优秀的作品，也就是高于<code>Good</code>的；至于那些评分低于<code>6.0</code>的，也就是还不到<code>Okay</code>的，算作差劲也不算失礼吧。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">all_score_phrases = set(reviews[<span class=\"string\">\"score_phrase\"</span>].unique())</div><div class=\"line\">bt_good = set([<span class=\"string\">'Great'</span>, <span class=\"string\">'Amazing'</span>, <span class=\"string\">'Masterpiece'</span>])</div><div class=\"line\">average = set([<span class=\"string\">'Good'</span>, <span class=\"string\">'Okay'</span>])</div><div class=\"line\">wt_okay = all_score_phrases - bt_good - average</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">category_score_phrase</span><span class=\"params\">(value)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> value <span class=\"keyword\">in</span> bt_good:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Better than Good\"</span></div><div class=\"line\">    <span class=\"keyword\">elif</span> value <span class=\"keyword\">in</span> wt_okay:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Worse than Okay\"</span></div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Average\"</span></div><div class=\"line\">        </div><div class=\"line\">sizes = filtered_reviews[<span class=\"string\">\"score_phrase\"</span>].apply(category_score_phrase).value_counts()</div><div class=\"line\">explode = (<span class=\"number\">0</span>, <span class=\"number\">0.1</span>, <span class=\"number\">0</span>)</div><div class=\"line\">plt.pie(sizes, labels=sizes.index, explode=explode, autopct=<span class=\"string\">'%1.2f%%'</span>, shadow=<span class=\"keyword\">True</span>, startangle=<span class=\"number\">90</span>);</div></pre></td></tr></table></figure>\n<p><img src=\"/images/output_14_0.png\" alt=\"png\"></p>\n<p>这里我先用饼图来展示一下前十的平台，整体的游戏质量分布情况。</p>\n<p>这里，我创建了一个新列，叫<code>score_phrase_new</code>，为了区别原有的<code>score_phrase</code>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">filtered_reviews[<span class=\"string\">\"score_phrase_new\"</span>] = filtered_reviews[<span class=\"string\">\"score_phrase\"</span>].apply(category_score_phrase)</div><div class=\"line\">filtered_reviews.head()</div></pre></td></tr></table></figure>\n<div>\n<table class=\"blueTable\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>score_phrase</th>\n      <th>title</th>\n      <th>url</th>\n      <th>platform</th>\n      <th>score</th>\n      <th>genre</th>\n      <th>editors_choice</th>\n      <th>release_year</th>\n      <th>release_month</th>\n      <th>release_day</th>\n      <th>score_phrase_new</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/xbox-360-128182</td>\n      <td>Xbox 360</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n      <td>Better than Good</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Great</td>\n      <td>NHL 13</td>\n      <td>/games/nhl-13/ps3-128181</td>\n      <td>PlayStation 3</td>\n      <td>8.5</td>\n      <td>Sports</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n      <td>Better than Good</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Awful</td>\n      <td>Double Dragon: Neon</td>\n      <td>/games/double-dragon-neon/xbox-360-131320</td>\n      <td>Xbox 360</td>\n      <td>3.0</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n      <td>Worse than Okay</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Amazing</td>\n      <td>Guild Wars 2</td>\n      <td>/games/guild-wars-2/pc-896298</td>\n      <td>PC</td>\n      <td>9.0</td>\n      <td>RPG</td>\n      <td>Y</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n      <td>Better than Good</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Awful</td>\n      <td>Double Dragon: Neon</td>\n      <td>/games/double-dragon-neon/ps3-131321</td>\n      <td>PlayStation 3</td>\n      <td>3.0</td>\n      <td>Fighting</td>\n      <td>N</td>\n      <td>2012</td>\n      <td>9</td>\n      <td>11</td>\n      <td>Worse than Okay</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<p>先来用数字直观地看一下每个平台下，每个评分阶段的数量。\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">filtered_reviews.groupby([<span class=\"string\">\"platform\"</span>, <span class=\"string\">\"score_phrase_new\"</span>]).count()</div></pre></td></tr></table></figure></p>\n<div>\n<table class=\"blueTable\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>score_phrase</th>\n      <th>title</th>\n      <th>url</th>\n      <th>score</th>\n      <th>genre</th>\n      <th>editors_choice</th>\n      <th>release_year</th>\n      <th>release_month</th>\n      <th>release_day</th>\n    </tr>\n    <tr>\n      <th>platform</th>\n      <th>score_phrase_new</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Nintendo DS</th>\n      <th>Average</th>\n      <td>462</td>\n      <td>462</td>\n      <td>462</td>\n      <td>462</td>\n      <td>462</td>\n      <td>462</td>\n      <td>462</td>\n      <td>462</td>\n      <td>462</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>207</td>\n      <td>207</td>\n      <td>207</td>\n      <td>207</td>\n      <td>207</td>\n      <td>207</td>\n      <td>207</td>\n      <td>207</td>\n      <td>207</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>376</td>\n      <td>376</td>\n      <td>376</td>\n      <td>376</td>\n      <td>375</td>\n      <td>376</td>\n      <td>376</td>\n      <td>376</td>\n      <td>376</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">PC</th>\n      <th>Average</th>\n      <td>1394</td>\n      <td>1394</td>\n      <td>1394</td>\n      <td>1394</td>\n      <td>1393</td>\n      <td>1394</td>\n      <td>1394</td>\n      <td>1394</td>\n      <td>1394</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>1323</td>\n      <td>1323</td>\n      <td>1323</td>\n      <td>1323</td>\n      <td>1322</td>\n      <td>1323</td>\n      <td>1323</td>\n      <td>1323</td>\n      <td>1323</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>653</td>\n      <td>653</td>\n      <td>653</td>\n      <td>653</td>\n      <td>652</td>\n      <td>653</td>\n      <td>653</td>\n      <td>653</td>\n      <td>653</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">PlayStation</th>\n      <th>Average</th>\n      <td>362</td>\n      <td>362</td>\n      <td>362</td>\n      <td>362</td>\n      <td>362</td>\n      <td>362</td>\n      <td>362</td>\n      <td>362</td>\n      <td>362</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>313</td>\n      <td>313</td>\n      <td>313</td>\n      <td>313</td>\n      <td>313</td>\n      <td>313</td>\n      <td>313</td>\n      <td>313</td>\n      <td>313</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>277</td>\n      <td>277</td>\n      <td>277</td>\n      <td>277</td>\n      <td>277</td>\n      <td>277</td>\n      <td>277</td>\n      <td>277</td>\n      <td>277</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">PlayStation 2</th>\n      <th>Average</th>\n      <td>716</td>\n      <td>716</td>\n      <td>716</td>\n      <td>716</td>\n      <td>716</td>\n      <td>716</td>\n      <td>716</td>\n      <td>716</td>\n      <td>716</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>542</td>\n      <td>542</td>\n      <td>542</td>\n      <td>542</td>\n      <td>542</td>\n      <td>542</td>\n      <td>542</td>\n      <td>542</td>\n      <td>542</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>428</td>\n      <td>428</td>\n      <td>428</td>\n      <td>428</td>\n      <td>426</td>\n      <td>428</td>\n      <td>428</td>\n      <td>428</td>\n      <td>428</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">PlayStation 3</th>\n      <th>Average</th>\n      <td>516</td>\n      <td>516</td>\n      <td>516</td>\n      <td>516</td>\n      <td>515</td>\n      <td>516</td>\n      <td>516</td>\n      <td>516</td>\n      <td>516</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>569</td>\n      <td>569</td>\n      <td>569</td>\n      <td>569</td>\n      <td>569</td>\n      <td>569</td>\n      <td>569</td>\n      <td>569</td>\n      <td>569</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>271</td>\n      <td>271</td>\n      <td>271</td>\n      <td>271</td>\n      <td>271</td>\n      <td>271</td>\n      <td>271</td>\n      <td>271</td>\n      <td>271</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Wii</th>\n      <th>Average</th>\n      <td>551</td>\n      <td>551</td>\n      <td>551</td>\n      <td>551</td>\n      <td>547</td>\n      <td>551</td>\n      <td>551</td>\n      <td>551</td>\n      <td>551</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>494</td>\n      <td>494</td>\n      <td>494</td>\n      <td>494</td>\n      <td>494</td>\n      <td>494</td>\n      <td>494</td>\n      <td>494</td>\n      <td>494</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Wireless</th>\n      <th>Average</th>\n      <td>473</td>\n      <td>473</td>\n      <td>473</td>\n      <td>473</td>\n      <td>471</td>\n      <td>473</td>\n      <td>473</td>\n      <td>473</td>\n      <td>473</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>308</td>\n      <td>308</td>\n      <td>308</td>\n      <td>308</td>\n      <td>306</td>\n      <td>308</td>\n      <td>308</td>\n      <td>308</td>\n      <td>308</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>129</td>\n      <td>129</td>\n      <td>129</td>\n      <td>129</td>\n      <td>129</td>\n      <td>129</td>\n      <td>129</td>\n      <td>129</td>\n      <td>129</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Xbox</th>\n      <th>Average</th>\n      <td>307</td>\n      <td>307</td>\n      <td>307</td>\n      <td>307</td>\n      <td>307</td>\n      <td>307</td>\n      <td>307</td>\n      <td>307</td>\n      <td>307</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>160</td>\n      <td>160</td>\n      <td>160</td>\n      <td>160</td>\n      <td>160</td>\n      <td>160</td>\n      <td>160</td>\n      <td>160</td>\n      <td>160</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Xbox 360</th>\n      <th>Average</th>\n      <td>631</td>\n      <td>631</td>\n      <td>631</td>\n      <td>631</td>\n      <td>631</td>\n      <td>631</td>\n      <td>631</td>\n      <td>631</td>\n      <td>631</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>646</td>\n      <td>646</td>\n      <td>646</td>\n      <td>646</td>\n      <td>646</td>\n      <td>646</td>\n      <td>646</td>\n      <td>646</td>\n      <td>646</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n      <td>354</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">iPhone</th>\n      <th>Average</th>\n      <td>412</td>\n      <td>412</td>\n      <td>412</td>\n      <td>412</td>\n      <td>405</td>\n      <td>412</td>\n      <td>412</td>\n      <td>412</td>\n      <td>412</td>\n    </tr>\n    <tr>\n      <th>Better than Good</th>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>315</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n      <td>321</td>\n    </tr>\n    <tr>\n      <th>Worse than Okay</th>\n      <td>109</td>\n      <td>109</td>\n      <td>109</td>\n      <td>109</td>\n      <td>108</td>\n      <td>109</td>\n      <td>109</td>\n      <td>109</td>\n      <td>109</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<p>事实上，上面的表格大部分内容也用不上，我们需要的其实就三列：<strong>游戏平台</strong>，<strong>评分阶段</strong>和<strong>数量</strong>。因此我就压缩一下原表格，让它变成下面的样子。\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">count_df = filtered_reviews.groupby([<span class=\"string\">\"platform\"</span>, <span class=\"string\">\"score_phrase_new\"</span>]).count().reset_index().iloc[:, :<span class=\"number\">3</span>]</div><div class=\"line\">count_df.rename(columns=&#123;<span class=\"string\">\"score_phrase\"</span>: <span class=\"string\">\"count\"</span>&#125;, inplace=<span class=\"keyword\">True</span>)</div><div class=\"line\">count_df</div></pre></td></tr></table></figure></p>\n<div>\n<table class=\"blueTable\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>platform</th>\n      <th>score_phrase_new</th>\n      <th>count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Nintendo DS</td>\n      <td>Average</td>\n      <td>462</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Nintendo DS</td>\n      <td>Better than Good</td>\n      <td>207</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Nintendo DS</td>\n      <td>Worse than Okay</td>\n      <td>376</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>PC</td>\n      <td>Average</td>\n      <td>1394</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>PC</td>\n      <td>Better than Good</td>\n      <td>1323</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>PC</td>\n      <td>Worse than Okay</td>\n      <td>653</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>PlayStation</td>\n      <td>Average</td>\n      <td>362</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>PlayStation</td>\n      <td>Better than Good</td>\n      <td>313</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>PlayStation</td>\n      <td>Worse than Okay</td>\n      <td>277</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>PlayStation 2</td>\n      <td>Average</td>\n      <td>716</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>PlayStation 2</td>\n      <td>Better than Good</td>\n      <td>542</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>PlayStation 2</td>\n      <td>Worse than Okay</td>\n      <td>428</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>PlayStation 3</td>\n      <td>Average</td>\n      <td>516</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>PlayStation 3</td>\n      <td>Better than Good</td>\n      <td>569</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>PlayStation 3</td>\n      <td>Worse than Okay</td>\n      <td>271</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Wii</td>\n      <td>Average</td>\n      <td>551</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Wii</td>\n      <td>Better than Good</td>\n      <td>321</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>Wii</td>\n      <td>Worse than Okay</td>\n      <td>494</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>Wireless</td>\n      <td>Average</td>\n      <td>473</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Wireless</td>\n      <td>Better than Good</td>\n      <td>308</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>Wireless</td>\n      <td>Worse than Okay</td>\n      <td>129</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>Xbox</td>\n      <td>Average</td>\n      <td>307</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>Xbox</td>\n      <td>Better than Good</td>\n      <td>354</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>Xbox</td>\n      <td>Worse than Okay</td>\n      <td>160</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>Xbox 360</td>\n      <td>Average</td>\n      <td>631</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>Xbox 360</td>\n      <td>Better than Good</td>\n      <td>646</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>Xbox 360</td>\n      <td>Worse than Okay</td>\n      <td>354</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>iPhone</td>\n      <td>Average</td>\n      <td>412</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>iPhone</td>\n      <td>Better than Good</td>\n      <td>321</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>iPhone</td>\n      <td>Worse than Okay</td>\n      <td>109</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<p>数据拿到手了，下面又该是用图形展示数据的时候。这次我们来看一下每一个评分阶段对于各自游戏平台占比究竟是多少。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">bar_width = <span class=\"number\">1</span></div><div class=\"line\">bar_left = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(count_df) // <span class=\"number\">3</span>)]</div><div class=\"line\">tick_pos = [i + (bar_width / <span class=\"number\">2</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> bar_left]</div><div class=\"line\">totals = [i + j + k <span class=\"keyword\">for</span> i, j, k <span class=\"keyword\">in</span> zip(count_df[<span class=\"string\">\"count\"</span>][::<span class=\"number\">3</span>], count_df[<span class=\"string\">\"count\"</span>][<span class=\"number\">1</span>::<span class=\"number\">3</span>], count_df[<span class=\"string\">\"count\"</span>][<span class=\"number\">2</span>::<span class=\"number\">3</span>])]</div><div class=\"line\">ave_perc = [i / j * <span class=\"number\">100</span> <span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> zip(count_df[<span class=\"string\">\"count\"</span>][::<span class=\"number\">3</span>], totals)]</div><div class=\"line\">bt_good_perc = [i / j * <span class=\"number\">100</span> <span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> zip(count_df[<span class=\"string\">\"count\"</span>][<span class=\"number\">1</span>::<span class=\"number\">3</span>], totals)]</div><div class=\"line\">wt_okay_perc = [i / j * <span class=\"number\">100</span> <span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> zip(count_df[<span class=\"string\">\"count\"</span>][<span class=\"number\">2</span>::<span class=\"number\">3</span>], totals)]</div></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">f, ax = plt.subplots(<span class=\"number\">1</span>)</div><div class=\"line\">    </div><div class=\"line\">ax.bar(bar_left, </div><div class=\"line\">       wt_okay_perc,</div><div class=\"line\">       label=<span class=\"string\">\"Worst than Okay\"</span>,</div><div class=\"line\">       alpha=<span class=\"number\">0.9</span>,</div><div class=\"line\">       width=bar_width,</div><div class=\"line\">       edgecolor=<span class=\"string\">\"white\"</span>)</div><div class=\"line\">       </div><div class=\"line\">ax.bar(bar_left,</div><div class=\"line\">       ave_perc,</div><div class=\"line\">       bottom=wt_okay_perc,</div><div class=\"line\">       label=<span class=\"string\">\"Average\"</span>,</div><div class=\"line\">       alpha=<span class=\"number\">0.9</span>,</div><div class=\"line\">       width=bar_width,</div><div class=\"line\">       edgecolor=<span class=\"string\">\"white\"</span>)</div><div class=\"line\">       </div><div class=\"line\">ax.bar(bar_left,</div><div class=\"line\">       bt_good_perc,</div><div class=\"line\">       bottom=[i+j <span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> zip(wt_okay_perc, ave_perc)],</div><div class=\"line\">       label=<span class=\"string\">\"Better than Good\"</span>,</div><div class=\"line\">       alpha=<span class=\"number\">0.9</span>,</div><div class=\"line\">       width=bar_width,</div><div class=\"line\">       edgecolor=<span class=\"string\">\"white\"</span>)</div><div class=\"line\">       </div><div class=\"line\">plt.xticks(tick_pos, set(count_df[<span class=\"string\">\"platform\"</span>]))</div><div class=\"line\">ax.set_ylabel(<span class=\"string\">\"Percentage\"</span>)</div><div class=\"line\">ax.set_xlabel(<span class=\"string\">\"\"</span>)</div><div class=\"line\">plt.legend(bbox_to_anchor=(<span class=\"number\">1.</span>, <span class=\"number\">1.</span>))</div><div class=\"line\">plt.setp(plt.gca().get_xticklabels(), rotation=<span class=\"number\">45</span>, horizontalalignment=<span class=\"string\">\"right\"</span>)</div><div class=\"line\">plt.show()</div></pre></td></tr></table></figure>\n<p><img src=\"/images/output_19_0.png\" alt=\"png\"></p>\n<p>我并没有直接把具体百分比的数值标记在上面，不过通过直观的图形依然可以看到一些信息。从图中可以看出来，相对来说，<code>PlayStation</code>，<code>PlayStation2</code>，<code>Wii</code>，<code>PC</code>和<code>Nintendo DS</code>的游戏质量都是很不错的，高质量游戏占比高，且低质量游戏占比低。<code>PlayStation3</code>虽然低质量游戏占比很小，但是高品质游戏也不算很多。<code>iPhone</code>和<code>Xbox</code>的表现算是最差的了，低质量游戏占比分属最高的一二，高品质游戏也是最低的两个平台。其实<code>iPhone</code>是这样的倒是不意外了，因为毕竟<code>iPhone</code>平台的起点相对于其他的平台要低很多，基本上三五个人，甚至一个人做出的游戏都有，这样很难保证游戏兼顾趣味性和剧情或者其他方面。在后期维护上面肯定也要比大公司开发的游戏差了很多。遗憾的是<code>Xbox</code>竟然也有如此差劲的表现，着实令我难以理解。</p>\n<hr>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>至此，我打算分析的内容就呈现完了，这就是我个人拿到数据之后一个简单的想法，然后试着去将这个想法用数据分析的方法展现出来，供自己去理解。后面我还会对这个数据集进一步的分析，比如去探讨一下年份和分数的关系，游戏类别和分数的关系。希望这篇文章可以起到抛砖引玉的作用，能让各位看完之后对于如何开始分析一份数据有自己的想法。</p>\n<p>各位看官对于本文有任何不明白的地方，欢迎提问，也欢迎指正和建议。</p>\n<hr>\n<h1 id=\"Related-Links\"><a href=\"#Related-Links\" class=\"headerlink\" title=\"Related Links\"></a>Related Links</h1><ol>\n<li><a href=\"https://www.dataquest.io/blog/pandas-python-tutorial/\" target=\"_blank\" rel=\"external\">Pandas Tutorial: Data analysis with Python: Part 1</a></li>\n<li><a href=\"https://www.dataquest.io/blog/pandas-tutorial-python-2/\" target=\"_blank\" rel=\"external\">Pandas Tutorial: Data analysis with Python: Part 2</a></li>\n<li><a href=\"https://chrisalbon.com/python/matplotlib_percentage_stacked_bar_plot.html\" target=\"_blank\" rel=\"external\">Stacked Percentage Bar Plot In MatPlotLib</a></li>\n</ol>"},{"title":"用Python在Hadoop上实现搜索自动补全","date":"2017-10-10T00:40:18.000Z","_content":"\n![search autocomplete](/images/autocomplete/autocomplete.png)\n记得很早的时候，刚开始接触搜索引擎，那时候Google还没有被墙，百度也是刚刚诞生没多久，无论我在输入框内输入什么，只是显示我输入的内容，并没有任何联想功能提示我接下来可能匹配的内容。有时候想找个东西，可就是死活想不起来准确的名字或者描述方式，这个时候搜索引擎也帮不了你，你只能变着法的尝试各种输入，来寻求最终你想要的结果。后来搜索引擎加入了联想功能，这着实是一大进步，极大地提高了搜索效率。有的时候，我们对于想查询的某一问题的提问方式是很模糊的，这个时候当你输入了一些关键词，发现搜索引擎会根据你的输入给你一些后续内容的建议，会让你更容易的找到自己想要的答案。\n\n\n# 本文目的\n上一篇我在《用Python在Hadoop上跑MapReduce》中介绍了一些关于如何利用`Hadoop Streaming`运行Python版MapReduce的简单操作，如何实现词频统计就像是MapReduce中的_Hello World_，不过做完了入门教程，为了深入学习，还得需要更多的练习。\n\n在这篇文章中，我将会带各位实现一个很简单的搜索联想功能，比较粗糙，但是看起来也挺像那么回事的~\n\n<!-- more -->\n\n---\n# 正文\n为了实现`autocomplete`，首先需要搞清楚它背后的原理，搜索引擎究竟是根据什么来给出提示的？比如我输入一个`autocomplete`之后，为什么后面推荐的是_python_，_algorithm_之类的，而不是_Naruto_，_One Piece_这些呢？\n\n无论是百度还是谷歌，其实在大家用它们的搜索引擎收集你需要的信息的时候，它们也同样在收集信息。它们收集了大量的用户搜索的输入信息，同时还在抓取各种网页内容的信息，简单来说，搜索引擎通过某种算法将各种收集到的资料综合到一起，最终给出了一个输入联想的列表，这就是自动补全功能。\n\n私下里作为学习MapReduce的项目，我们肯定不可能去试图实现真正的搜索引擎。不过做一个简陋版的，帮助自己理解`autocomplete`背后的实现原理，以及如何利用MapReduce来实现，也是足够的。\n\n---\n## N-Gram\n对于autocomplete背后实现的原理，很重要的一点就是N-Gram，[这篇文章](http://blog.sciencenet.cn/blog-713101-797384.html)有简明的介绍，举个例子好了：`implement search autocomplete in python`\n- 这句话如果按2-Gram划分的话，就是`implement search`，`search autocomplete`，`autocomplete in`，`in python`；\n- 那么按照3-Gram划分的话，就是`implement search autocomplete`，`search autocomplete in`，`autocomplete in python`；\n- 按照4-Gram划分的话，就是`implement search autocomplete in`，`search autocomplete in python`；\n- 按照5-Gram划分的话，就是一整句话，不作任何切割。\n\n这里我没有给出1-Gram的例子，各位可以思考一下是为什么，这里先卖个关子，下面会提到原因。这里我们先回头思考一下搜索引擎给出的联想词汇，比如我输入了一个`autocomplete`，那么后面你觉得是给出`in python`看上去更自然还是`Transformer`更合理？显然是前者对么，如果给出了后者，你可能会想：`autocomplete Transformer`是什么鬼？！难道是某种新型变形金刚么？没听过啊！那之所以会有这样的感觉，是因为从我们平时获取的信息中，我们对于`autocomplete`这个词后面的衔接词接收到的也是`in python`远远多于`Transformer`，对吧？所以说到这里就大概有点明晰了，搜索引擎对于联想词汇的推荐也有这方面的考虑，我们给输入一个或多个引导词，`autocomplete`功能将后面最有可能出现的几种选择展现给我们。所以这也是为什么用到N-Gram的原因，这里其实就是一个句子分割的过程。\n\n那么这里就引出了下一个问题：是该基于一句话最后一个词来预测后面的推荐，还是根据更多的词甚至一整句来预测下面的出现呢？\n\n还继续以上面的例子说好了。假设我已经输入了`implement search autocomplete in`，如果是按照最后一个出现的词来进行联想，那么`in`后面其实可以跟很多很多内容，都不会违和，对吧？比如`in box`，`in air`，`in heart`等等，但如果把这些联想放到一整句中，显然是不太合理的。因此，我们在实现`autocomplete`的时候，其实是**基于N-Gram预测N-Gram**。\n\n那到这里，其实`autocomplete`的实现的大致思路就应该有了。我们需要将大批量的文档用N-Gram的处理方式进行切割，统计相同短语出现的频次，构建N-Gram的模型，然后找出每个短语之后出现频次最高的几个词汇作为预测保存下来。最终将结果存入数据库，以方便之后调用。下面我们就来看看如何一步步具体实现。\n\n---\n## MapReduce实现\n### N-Gram模型构建\n\n在这次的代码实现中，我们需要用到两个mapper和reducer。首先，我们需要一对mapper和reducer将输入的文档进行切割。\n\n`n_gram_mapper.py`\n\n```python\nimport sys\nimport string\nimport re\n    \ndef main(N_Gram):\n    for line in sys.stdin:\n        # 去除所有的标点符号\n        translator = str.maketrans(string.punctuation, \" \" * len(string.punctuation))\n        line = line.translate(translator).strip().lower()\n        \n        # 去除所有的数字\n        line = re.sub(\"\\d\", \" \", line)\n        \n        # 按照空格或者\\t来切割\n        words = re.split(\"\\\\s+\", line)\n        if len(words) < 2:\n            continue\n            \n        for i, word in enumerate(words):\n            result = word\n            for j, next_word in enumerate(words[i+1:], 1):\n                if j < N_Gram:\n                    result += \" \"\n                    result += next_word\n                    print(\"{}\\t{}\".format(result, 1))\n                    \nif __name__ == '__main__':\n    main(5)\n```\n\n如果你想构建一个__N=5__的N-Gram模型，那么在mapper里，就需要将2到5的分割方式都输出。还记得上面我有留一个悬念，为什么不考虑1-Gram么？因为显然1-Gram是没有用的，它并不能告诉我一个短语后面可能出现的词有什么。\n\n`n_gram_reducer.py`\n\n```python\nimport sys\nfrom itertools import groupby\nfrom operator import itemgetter\n    \ndef parse_output(std_input):\n    # 利用generator节省MapReduce内存使用空间\n    for line in std_input:\n        yield line.strip().split(\"\\t\")\n        \ndef main():\n    data = parse_output(sys.stdin)\n    for word, group in groupby(data, itemgetter(0)):\n        try:\n            total_count = sum(int(count) for word, count in group)\n            print(\"{}\\t{}\".format(word, total_count))\n        except ValueError:\n            continue\n            \nif __name__ == '__main__':\n    main()\n```\n\n这回的reducer我用到了`generator`来调用数据，这样做可以有效节省内存占用空间。因为随着输入数据量的越来越大，即便是5-Gram，依然也是个很庞大的记录数量。下面的主函数部分，我也放弃了之前的简单用法，用groupby可以明显提升代码的阅读逻辑，对`itertools.groupby`不太熟悉的朋友可以看[这份官方文档](https://docs.python.org/3/library/itertools.html)。\n\n### N-Gram测试结果\n做下一步之前，我们先来本地测试一下这一对mapper和reducer是否好用。\n\n测试文档：我直接把[MapReduce](https://en.wikipedia.org/wiki/MapReduce)的Wiki里头一段关于它的说明解释，粘贴下来作为测试文档用。\n```console\nroot@hadoop:~/src/p2py# cat input/file2.txt | ./n_gram_mapper.py | sort | ./n_gram_reducer.py\na cluster\t1\na good\t1\na good mapreduce\t1\na good mapreduce algorithm\t1\na map\t1\na map procedure\t1\na map procedure method\t1\na map procedure method that\t1\na mapreduce\t1\na mapreduce program\t1\na mapreduce program is\t1\na mapreduce program is composed\t1\n...\nand reduce\t3\nand reduce capabilities\t1\nand reduce functions\t2\n...\nmap and\t3\nmap and reduce\t3\nmap and reduce capabilities\t1\nmap and reduce functions\t2\n...\n```\n\n我这里就截取一部分结果，实在太长了……\n\n### 构建预测概率的模型\n我们现在已经有了N-Gram切割后的结果了，下一步就是要在此基础上分析每一个词汇或者短语后面可能出现的内容，这里其实可以理解成构建一个概率模型，很简单一个概率模型。\n\n举例说明，我们先来看刚才的结果生成的一部分\n```\nand data\t1\nand development\t1\nand fault\t3\nand generating\t1\nand less\t1\nand providing\t1\nand reduce\t3\nand scatter\t1\nand sorting\t1\n```\n\n先仅仅分析and之后可能出现的词汇，所有的情况都在这里摆着了。那这时候autocomplete会如何给出推荐呢？很显然的，fault和reduce会放到头两个推荐对吧，为什么？这其实就是个概率的问题：and后接一个词在文中出现了`1+1+3+1+1+1+3+1+1=13`次，那fault和reduce推荐的概率就是`3/13`，剩下的所有都是`1/13`的概率。对于`autocomplete`系统来说，这意味着当用户输入了and之后，它认为用户更有可能继续输入的是fault和reduce，因为从它以往经验（系统所得到的输入）来看，fault和reduce出现的频次更多一些，相比较于其他的结果。因此，下一步工作，我们需要得到一个类似于`and<\\t>data=1`这样的数据记录样式，来统计所有的短语之后跟随的词汇以及它出现的频次。这里我们之所以不用概率来进行记录，是因为从刚才的计算过程来看，词频和概率是正相关的，那么就没必要多算一步记录概率了。\n\n`prob_mapper.py`\n\n```python\nimport sys\nimport string\n    \ndef main(threshold):\n    for line in sys.stdin:\n        words_phrase, count = line.strip().split(\"\\t\")\n        if int(count) < threshold:\n            continue\n            \n        words = words_phrase.strip().split(\" \")\n        if len(words) < 2:\n            continue\n            \n        print(\"{}\\t{}\".format(' '.join(words[:-1]), words[-1] + \"=\" + count))\n        \nif __name__ == '__main__':\n    main(2)\n```\n\nmapper的工作其实很简单，基本没有什么需要说明的。需要注意的是，这里我加入了一个threshold参数，意义是为了筛选掉一部分出现频次太低的结果。刚才举的例子里，每个结果出现的频次其实都不高，这样threshold肯定是没用的，但实际生产中，比如像Google和百度这样的超大规模的搜索引擎，每天可能抓取的数据量十分庞大。事实上，我们每次在搜索框中输入内容，得到的联想其实都在二十条以内，一般来说不会给太多的，太多的话，用户筛选起来也是个麻烦。那对于那些基本很少出现的词组组合，也就没必要存储下来，被搜索到的概率太低，如果全部都记录下来，对数据库的存储容量是个很大的负担。\n\n`prob_reducer.py`\n\n```python\nimport sys\nfrom itertools import groupby\nfrom operator import itemgetter\n    \ndef parse_output(std_input):\n    for line in std_input:\n        yield line.strip().split(\"\\t\")\n        \ndef main(n_gram):\n    data = parse_output(sys.stdin)\n    for starting_phrase, group in groupby(data, itemgetter(0)):\n        result = {}\n        for _, word_count in group:\n            word, count = word_count.split(\"=\")\n            count = int(count)\n            if count not in result:\n                result[count] = []\n            result[count].append(word)\n            \n        i = 0\n        for key, value in result.items():\n            if i < n_gram:\n                for word in value:\n                    print(\"{},{},{}\".format(starting_phrase, word, key))\n                    i += 1\n                    \nif __name__ == '__main__':\n    main(4)\n```\n\n`starting_phrase`代表的是用户输入的部分，`following_word`代表的是后面可能出现的词汇，`count`顾名思义就是指词频了。在reducer中，我们先按照词频的不同将可能出现的词汇分组放置，然后再根据我们需要的N-Gram大小来依次输出。这里的参数n_gram和之前n_gram_mapper里的n_gram意思一样，但取值可以不同。\n\n---\n### 预测概率的测试结果\n下面我们来看看本地测试结果吧，就用上一步n_gram_reducer得出的结果继续操作。\n\n```console\nroot@hadoop:~/src/p2py# cat result.txt | ./prob_mapper.py | ./prob_reducer.py \nand,fault,3\nand fault,tolerance,3\nand,reduce,3\nand reduce,functions,2\nbig,data,2\ncommunication,cost,2\nfault,tolerance,3\nis,a,2\nmap,and,3\nmap and,reduce,3\nmap and reduce,functions,2\nmapreduce,framework,3\nmethod,that,2\nmethod that,performs,2\nmodel,and,2\nmodel,is,2\nnot,the,2\nof,the,4\nof the,mapreduce,2\nof the mapreduce,framework,2\noptimizing,the,2\nreduce,functions,2\nsuch,as,2\nthat,performs,2\nthe,mapreduce,4\nthe mapreduce,framework,3\nthe,various,2\n```\n\n因为之前在mapper里我们将threshold设置为2，这里我们就可以看到结果中只有词频不小于2次的。\n\n### 运行在Hadoop上\n刚才在本地跑过了之后，下面来进行Hadoop上的测试。为了方便快捷，我编写了一个script来运行两对mapper和reducer，最后把得到的数据从HDFS里导出到本地。\n```console\nroot@hadoop:~/src/p2py# ./run_script.sh \n    \nCleaning old results in /output...\n17/10/10 01:30:20 INFO fs.TrashPolicyDefault: Namenode trash configuration: Deletion interval = 0 minutes, Emptier interval = 0 minutes.\nDeleted /output\n    \nRunning python in Hadoop by hadoop streaming...\n    \npackageJobJar: [/tmp/hadoop-unjar5398292596529368576/] [] /tmp/streamjob5913697815224381390.jar tmpDir=null\n17/10/10 01:30:22 INFO client.RMProxy: Connecting to ResourceManager at hadoop-master/172.18.0.2:8032\n17/10/10 01:30:22 INFO client.RMProxy: Connecting to ResourceManager at hadoop-master/172.18.0.2:8032\n17/10/10 01:30:23 INFO mapred.FileInputFormat: Total input paths to process : 1\n...\n17/10/10 01:30:49 INFO streaming.StreamJob: Output directory: /output/first\n    \nRunning 2nd mapper and reducer...\n    \npackageJobJar: [/tmp/hadoop-unjar6814698868258273333/] [] /tmp/streamjob6470458846508985375.jar tmpDir=null\n17/10/10 01:30:51 INFO client.RMProxy: Connecting to ResourceManager at hadoop-master/172.18.0.2:8032\n17/10/10 01:30:51 INFO client.RMProxy: Connecting to ResourceManager at hadoop-master/172.18.0.2:8032\n17/10/10 01:30:52 INFO mapred.FileInputFormat: Total input paths to process : 1\n...\n17/10/10 01:31:13 INFO streaming.StreamJob: Output directory: /output/second\n    \nMoving outputs from HDFS to local...\n    \nGot the output!\n```\n\n一切顺利运行！最终结果也被成功导出到本地。\n\n---\n## 导入数据库\n其实到上一小节，MapReduce的工作就都做完了，但为了让`autocomplete`可以展现出应有的效果，这里还需要将刚才生成的数据导出到数据库中，以便之后和Web结合来体现功能。\n\n数据库我用的是MySQL，大家可以任意选择。下面是我的数据库操作代码：\n```python\nimport sys\nimport MySQLdb as mdb\n    \ndef read_data(file):\n    for line in file.readlines():\n        yield line.strip().split(\",\")\n        \ndef main(input_data):\n    with mdb.connect('localhost', 'username', 'password', 'dbname') as cur:\n        cur.execute(\"DROP TABLE IF EXISTS output\")\n        cur.execute(\n            \"CREATE TABLE output(starting_phrase VARCHAR(250), following_word VARCHAR(250), count INT)\")\n        with open(input_data, 'r') as file:\n            for starting_phrase, following_word, count in read_data(file):\n                cur.execute(\n                    \"INSERT INTO output(starting_phrase, following_word, count) \\\n                     VALUES('{}', '{}', {})\".format(starting_phrase, following_word, count))\n                     \nif __name__ == '__main__':\n    main(\"output\")\n```\n\n数据库中显示的结果：\n![database](/images/autocomplete/database.png)\n\n---\n## 展示结果\n我简单做了一个Web展示的页面，基于Ajax和PHP，连接数据库后，测试结果如下图所示：\n![test](/images/autocomplete/ggif.gif)\n\n\n---\n# 总结\n本文从零开始，不太详细的介绍了`autocomplete`的工作原理，以及如何利用Python和MapReduce来处理数据。相比较Java实现这些内容而言，Python确实需要注意更多的细节，毕竟Java是Hadoop原生环境，configuration的配置真的是方便。之前做wordcount时没有觉得Python+Hadoop Streaming的方式有什么问题，因为Python天生的简洁特质，感觉比Java啰里啰嗦的舒服多了。但这次的代码实现上就看出端倪了，Python下更多的细节部分需要开发者自己写代码去维护，就像不同的mapper，reducer之间的数据传输，还有输出到数据库保存。\n\n一路从头看到这里的朋友，感谢你的阅读，如果有疑惑，欢迎👇下面留言，如果文章中有什么不对的地方，也欢迎批评和指正。\n\n---\n# Related Links\n1. [N-gram的原理、用途和研究](http://blog.sciencenet.cn/blog-713101-797384.html)\n\n","source":"_posts/Implement-Search-Auto-Complete-by-Python-Hadoop.md","raw":"---\ntitle: 用Python在Hadoop上实现搜索自动补全\ndate: 2017-10-09 17:40:18\ntags:\n    - Python\n    - Hadoop\n    - MapReduce\ncategories:\n    - Big Data\n---\n\n![search autocomplete](/images/autocomplete/autocomplete.png)\n记得很早的时候，刚开始接触搜索引擎，那时候Google还没有被墙，百度也是刚刚诞生没多久，无论我在输入框内输入什么，只是显示我输入的内容，并没有任何联想功能提示我接下来可能匹配的内容。有时候想找个东西，可就是死活想不起来准确的名字或者描述方式，这个时候搜索引擎也帮不了你，你只能变着法的尝试各种输入，来寻求最终你想要的结果。后来搜索引擎加入了联想功能，这着实是一大进步，极大地提高了搜索效率。有的时候，我们对于想查询的某一问题的提问方式是很模糊的，这个时候当你输入了一些关键词，发现搜索引擎会根据你的输入给你一些后续内容的建议，会让你更容易的找到自己想要的答案。\n\n\n# 本文目的\n上一篇我在《用Python在Hadoop上跑MapReduce》中介绍了一些关于如何利用`Hadoop Streaming`运行Python版MapReduce的简单操作，如何实现词频统计就像是MapReduce中的_Hello World_，不过做完了入门教程，为了深入学习，还得需要更多的练习。\n\n在这篇文章中，我将会带各位实现一个很简单的搜索联想功能，比较粗糙，但是看起来也挺像那么回事的~\n\n<!-- more -->\n\n---\n# 正文\n为了实现`autocomplete`，首先需要搞清楚它背后的原理，搜索引擎究竟是根据什么来给出提示的？比如我输入一个`autocomplete`之后，为什么后面推荐的是_python_，_algorithm_之类的，而不是_Naruto_，_One Piece_这些呢？\n\n无论是百度还是谷歌，其实在大家用它们的搜索引擎收集你需要的信息的时候，它们也同样在收集信息。它们收集了大量的用户搜索的输入信息，同时还在抓取各种网页内容的信息，简单来说，搜索引擎通过某种算法将各种收集到的资料综合到一起，最终给出了一个输入联想的列表，这就是自动补全功能。\n\n私下里作为学习MapReduce的项目，我们肯定不可能去试图实现真正的搜索引擎。不过做一个简陋版的，帮助自己理解`autocomplete`背后的实现原理，以及如何利用MapReduce来实现，也是足够的。\n\n---\n## N-Gram\n对于autocomplete背后实现的原理，很重要的一点就是N-Gram，[这篇文章](http://blog.sciencenet.cn/blog-713101-797384.html)有简明的介绍，举个例子好了：`implement search autocomplete in python`\n- 这句话如果按2-Gram划分的话，就是`implement search`，`search autocomplete`，`autocomplete in`，`in python`；\n- 那么按照3-Gram划分的话，就是`implement search autocomplete`，`search autocomplete in`，`autocomplete in python`；\n- 按照4-Gram划分的话，就是`implement search autocomplete in`，`search autocomplete in python`；\n- 按照5-Gram划分的话，就是一整句话，不作任何切割。\n\n这里我没有给出1-Gram的例子，各位可以思考一下是为什么，这里先卖个关子，下面会提到原因。这里我们先回头思考一下搜索引擎给出的联想词汇，比如我输入了一个`autocomplete`，那么后面你觉得是给出`in python`看上去更自然还是`Transformer`更合理？显然是前者对么，如果给出了后者，你可能会想：`autocomplete Transformer`是什么鬼？！难道是某种新型变形金刚么？没听过啊！那之所以会有这样的感觉，是因为从我们平时获取的信息中，我们对于`autocomplete`这个词后面的衔接词接收到的也是`in python`远远多于`Transformer`，对吧？所以说到这里就大概有点明晰了，搜索引擎对于联想词汇的推荐也有这方面的考虑，我们给输入一个或多个引导词，`autocomplete`功能将后面最有可能出现的几种选择展现给我们。所以这也是为什么用到N-Gram的原因，这里其实就是一个句子分割的过程。\n\n那么这里就引出了下一个问题：是该基于一句话最后一个词来预测后面的推荐，还是根据更多的词甚至一整句来预测下面的出现呢？\n\n还继续以上面的例子说好了。假设我已经输入了`implement search autocomplete in`，如果是按照最后一个出现的词来进行联想，那么`in`后面其实可以跟很多很多内容，都不会违和，对吧？比如`in box`，`in air`，`in heart`等等，但如果把这些联想放到一整句中，显然是不太合理的。因此，我们在实现`autocomplete`的时候，其实是**基于N-Gram预测N-Gram**。\n\n那到这里，其实`autocomplete`的实现的大致思路就应该有了。我们需要将大批量的文档用N-Gram的处理方式进行切割，统计相同短语出现的频次，构建N-Gram的模型，然后找出每个短语之后出现频次最高的几个词汇作为预测保存下来。最终将结果存入数据库，以方便之后调用。下面我们就来看看如何一步步具体实现。\n\n---\n## MapReduce实现\n### N-Gram模型构建\n\n在这次的代码实现中，我们需要用到两个mapper和reducer。首先，我们需要一对mapper和reducer将输入的文档进行切割。\n\n`n_gram_mapper.py`\n\n```python\nimport sys\nimport string\nimport re\n    \ndef main(N_Gram):\n    for line in sys.stdin:\n        # 去除所有的标点符号\n        translator = str.maketrans(string.punctuation, \" \" * len(string.punctuation))\n        line = line.translate(translator).strip().lower()\n        \n        # 去除所有的数字\n        line = re.sub(\"\\d\", \" \", line)\n        \n        # 按照空格或者\\t来切割\n        words = re.split(\"\\\\s+\", line)\n        if len(words) < 2:\n            continue\n            \n        for i, word in enumerate(words):\n            result = word\n            for j, next_word in enumerate(words[i+1:], 1):\n                if j < N_Gram:\n                    result += \" \"\n                    result += next_word\n                    print(\"{}\\t{}\".format(result, 1))\n                    \nif __name__ == '__main__':\n    main(5)\n```\n\n如果你想构建一个__N=5__的N-Gram模型，那么在mapper里，就需要将2到5的分割方式都输出。还记得上面我有留一个悬念，为什么不考虑1-Gram么？因为显然1-Gram是没有用的，它并不能告诉我一个短语后面可能出现的词有什么。\n\n`n_gram_reducer.py`\n\n```python\nimport sys\nfrom itertools import groupby\nfrom operator import itemgetter\n    \ndef parse_output(std_input):\n    # 利用generator节省MapReduce内存使用空间\n    for line in std_input:\n        yield line.strip().split(\"\\t\")\n        \ndef main():\n    data = parse_output(sys.stdin)\n    for word, group in groupby(data, itemgetter(0)):\n        try:\n            total_count = sum(int(count) for word, count in group)\n            print(\"{}\\t{}\".format(word, total_count))\n        except ValueError:\n            continue\n            \nif __name__ == '__main__':\n    main()\n```\n\n这回的reducer我用到了`generator`来调用数据，这样做可以有效节省内存占用空间。因为随着输入数据量的越来越大，即便是5-Gram，依然也是个很庞大的记录数量。下面的主函数部分，我也放弃了之前的简单用法，用groupby可以明显提升代码的阅读逻辑，对`itertools.groupby`不太熟悉的朋友可以看[这份官方文档](https://docs.python.org/3/library/itertools.html)。\n\n### N-Gram测试结果\n做下一步之前，我们先来本地测试一下这一对mapper和reducer是否好用。\n\n测试文档：我直接把[MapReduce](https://en.wikipedia.org/wiki/MapReduce)的Wiki里头一段关于它的说明解释，粘贴下来作为测试文档用。\n```console\nroot@hadoop:~/src/p2py# cat input/file2.txt | ./n_gram_mapper.py | sort | ./n_gram_reducer.py\na cluster\t1\na good\t1\na good mapreduce\t1\na good mapreduce algorithm\t1\na map\t1\na map procedure\t1\na map procedure method\t1\na map procedure method that\t1\na mapreduce\t1\na mapreduce program\t1\na mapreduce program is\t1\na mapreduce program is composed\t1\n...\nand reduce\t3\nand reduce capabilities\t1\nand reduce functions\t2\n...\nmap and\t3\nmap and reduce\t3\nmap and reduce capabilities\t1\nmap and reduce functions\t2\n...\n```\n\n我这里就截取一部分结果，实在太长了……\n\n### 构建预测概率的模型\n我们现在已经有了N-Gram切割后的结果了，下一步就是要在此基础上分析每一个词汇或者短语后面可能出现的内容，这里其实可以理解成构建一个概率模型，很简单一个概率模型。\n\n举例说明，我们先来看刚才的结果生成的一部分\n```\nand data\t1\nand development\t1\nand fault\t3\nand generating\t1\nand less\t1\nand providing\t1\nand reduce\t3\nand scatter\t1\nand sorting\t1\n```\n\n先仅仅分析and之后可能出现的词汇，所有的情况都在这里摆着了。那这时候autocomplete会如何给出推荐呢？很显然的，fault和reduce会放到头两个推荐对吧，为什么？这其实就是个概率的问题：and后接一个词在文中出现了`1+1+3+1+1+1+3+1+1=13`次，那fault和reduce推荐的概率就是`3/13`，剩下的所有都是`1/13`的概率。对于`autocomplete`系统来说，这意味着当用户输入了and之后，它认为用户更有可能继续输入的是fault和reduce，因为从它以往经验（系统所得到的输入）来看，fault和reduce出现的频次更多一些，相比较于其他的结果。因此，下一步工作，我们需要得到一个类似于`and<\\t>data=1`这样的数据记录样式，来统计所有的短语之后跟随的词汇以及它出现的频次。这里我们之所以不用概率来进行记录，是因为从刚才的计算过程来看，词频和概率是正相关的，那么就没必要多算一步记录概率了。\n\n`prob_mapper.py`\n\n```python\nimport sys\nimport string\n    \ndef main(threshold):\n    for line in sys.stdin:\n        words_phrase, count = line.strip().split(\"\\t\")\n        if int(count) < threshold:\n            continue\n            \n        words = words_phrase.strip().split(\" \")\n        if len(words) < 2:\n            continue\n            \n        print(\"{}\\t{}\".format(' '.join(words[:-1]), words[-1] + \"=\" + count))\n        \nif __name__ == '__main__':\n    main(2)\n```\n\nmapper的工作其实很简单，基本没有什么需要说明的。需要注意的是，这里我加入了一个threshold参数，意义是为了筛选掉一部分出现频次太低的结果。刚才举的例子里，每个结果出现的频次其实都不高，这样threshold肯定是没用的，但实际生产中，比如像Google和百度这样的超大规模的搜索引擎，每天可能抓取的数据量十分庞大。事实上，我们每次在搜索框中输入内容，得到的联想其实都在二十条以内，一般来说不会给太多的，太多的话，用户筛选起来也是个麻烦。那对于那些基本很少出现的词组组合，也就没必要存储下来，被搜索到的概率太低，如果全部都记录下来，对数据库的存储容量是个很大的负担。\n\n`prob_reducer.py`\n\n```python\nimport sys\nfrom itertools import groupby\nfrom operator import itemgetter\n    \ndef parse_output(std_input):\n    for line in std_input:\n        yield line.strip().split(\"\\t\")\n        \ndef main(n_gram):\n    data = parse_output(sys.stdin)\n    for starting_phrase, group in groupby(data, itemgetter(0)):\n        result = {}\n        for _, word_count in group:\n            word, count = word_count.split(\"=\")\n            count = int(count)\n            if count not in result:\n                result[count] = []\n            result[count].append(word)\n            \n        i = 0\n        for key, value in result.items():\n            if i < n_gram:\n                for word in value:\n                    print(\"{},{},{}\".format(starting_phrase, word, key))\n                    i += 1\n                    \nif __name__ == '__main__':\n    main(4)\n```\n\n`starting_phrase`代表的是用户输入的部分，`following_word`代表的是后面可能出现的词汇，`count`顾名思义就是指词频了。在reducer中，我们先按照词频的不同将可能出现的词汇分组放置，然后再根据我们需要的N-Gram大小来依次输出。这里的参数n_gram和之前n_gram_mapper里的n_gram意思一样，但取值可以不同。\n\n---\n### 预测概率的测试结果\n下面我们来看看本地测试结果吧，就用上一步n_gram_reducer得出的结果继续操作。\n\n```console\nroot@hadoop:~/src/p2py# cat result.txt | ./prob_mapper.py | ./prob_reducer.py \nand,fault,3\nand fault,tolerance,3\nand,reduce,3\nand reduce,functions,2\nbig,data,2\ncommunication,cost,2\nfault,tolerance,3\nis,a,2\nmap,and,3\nmap and,reduce,3\nmap and reduce,functions,2\nmapreduce,framework,3\nmethod,that,2\nmethod that,performs,2\nmodel,and,2\nmodel,is,2\nnot,the,2\nof,the,4\nof the,mapreduce,2\nof the mapreduce,framework,2\noptimizing,the,2\nreduce,functions,2\nsuch,as,2\nthat,performs,2\nthe,mapreduce,4\nthe mapreduce,framework,3\nthe,various,2\n```\n\n因为之前在mapper里我们将threshold设置为2，这里我们就可以看到结果中只有词频不小于2次的。\n\n### 运行在Hadoop上\n刚才在本地跑过了之后，下面来进行Hadoop上的测试。为了方便快捷，我编写了一个script来运行两对mapper和reducer，最后把得到的数据从HDFS里导出到本地。\n```console\nroot@hadoop:~/src/p2py# ./run_script.sh \n    \nCleaning old results in /output...\n17/10/10 01:30:20 INFO fs.TrashPolicyDefault: Namenode trash configuration: Deletion interval = 0 minutes, Emptier interval = 0 minutes.\nDeleted /output\n    \nRunning python in Hadoop by hadoop streaming...\n    \npackageJobJar: [/tmp/hadoop-unjar5398292596529368576/] [] /tmp/streamjob5913697815224381390.jar tmpDir=null\n17/10/10 01:30:22 INFO client.RMProxy: Connecting to ResourceManager at hadoop-master/172.18.0.2:8032\n17/10/10 01:30:22 INFO client.RMProxy: Connecting to ResourceManager at hadoop-master/172.18.0.2:8032\n17/10/10 01:30:23 INFO mapred.FileInputFormat: Total input paths to process : 1\n...\n17/10/10 01:30:49 INFO streaming.StreamJob: Output directory: /output/first\n    \nRunning 2nd mapper and reducer...\n    \npackageJobJar: [/tmp/hadoop-unjar6814698868258273333/] [] /tmp/streamjob6470458846508985375.jar tmpDir=null\n17/10/10 01:30:51 INFO client.RMProxy: Connecting to ResourceManager at hadoop-master/172.18.0.2:8032\n17/10/10 01:30:51 INFO client.RMProxy: Connecting to ResourceManager at hadoop-master/172.18.0.2:8032\n17/10/10 01:30:52 INFO mapred.FileInputFormat: Total input paths to process : 1\n...\n17/10/10 01:31:13 INFO streaming.StreamJob: Output directory: /output/second\n    \nMoving outputs from HDFS to local...\n    \nGot the output!\n```\n\n一切顺利运行！最终结果也被成功导出到本地。\n\n---\n## 导入数据库\n其实到上一小节，MapReduce的工作就都做完了，但为了让`autocomplete`可以展现出应有的效果，这里还需要将刚才生成的数据导出到数据库中，以便之后和Web结合来体现功能。\n\n数据库我用的是MySQL，大家可以任意选择。下面是我的数据库操作代码：\n```python\nimport sys\nimport MySQLdb as mdb\n    \ndef read_data(file):\n    for line in file.readlines():\n        yield line.strip().split(\",\")\n        \ndef main(input_data):\n    with mdb.connect('localhost', 'username', 'password', 'dbname') as cur:\n        cur.execute(\"DROP TABLE IF EXISTS output\")\n        cur.execute(\n            \"CREATE TABLE output(starting_phrase VARCHAR(250), following_word VARCHAR(250), count INT)\")\n        with open(input_data, 'r') as file:\n            for starting_phrase, following_word, count in read_data(file):\n                cur.execute(\n                    \"INSERT INTO output(starting_phrase, following_word, count) \\\n                     VALUES('{}', '{}', {})\".format(starting_phrase, following_word, count))\n                     \nif __name__ == '__main__':\n    main(\"output\")\n```\n\n数据库中显示的结果：\n![database](/images/autocomplete/database.png)\n\n---\n## 展示结果\n我简单做了一个Web展示的页面，基于Ajax和PHP，连接数据库后，测试结果如下图所示：\n![test](/images/autocomplete/ggif.gif)\n\n\n---\n# 总结\n本文从零开始，不太详细的介绍了`autocomplete`的工作原理，以及如何利用Python和MapReduce来处理数据。相比较Java实现这些内容而言，Python确实需要注意更多的细节，毕竟Java是Hadoop原生环境，configuration的配置真的是方便。之前做wordcount时没有觉得Python+Hadoop Streaming的方式有什么问题，因为Python天生的简洁特质，感觉比Java啰里啰嗦的舒服多了。但这次的代码实现上就看出端倪了，Python下更多的细节部分需要开发者自己写代码去维护，就像不同的mapper，reducer之间的数据传输，还有输出到数据库保存。\n\n一路从头看到这里的朋友，感谢你的阅读，如果有疑惑，欢迎👇下面留言，如果文章中有什么不对的地方，也欢迎批评和指正。\n\n---\n# Related Links\n1. [N-gram的原理、用途和研究](http://blog.sciencenet.cn/blog-713101-797384.html)\n\n","slug":"Implement-Search-Auto-Complete-by-Python-Hadoop","published":1,"updated":"2017-10-10T09:12:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9os2v9t0002u8yus8d9sos1","content":"<p><img src=\"/images/autocomplete/autocomplete.png\" alt=\"search autocomplete\">\n记得很早的时候，刚开始接触搜索引擎，那时候Google还没有被墙，百度也是刚刚诞生没多久，无论我在输入框内输入什么，只是显示我输入的内容，并没有任何联想功能提示我接下来可能匹配的内容。有时候想找个东西，可就是死活想不起来准确的名字或者描述方式，这个时候搜索引擎也帮不了你，你只能变着法的尝试各种输入，来寻求最终你想要的结果。后来搜索引擎加入了联想功能，这着实是一大进步，极大地提高了搜索效率。有的时候，我们对于想查询的某一问题的提问方式是很模糊的，这个时候当你输入了一些关键词，发现搜索引擎会根据你的输入给你一些后续内容的建议，会让你更容易的找到自己想要的答案。</p>\n<h1 id=\"本文目的\"><a href=\"#本文目的\" class=\"headerlink\" title=\"本文目的\"></a>本文目的</h1><p>上一篇我在《用Python在Hadoop上跑MapReduce》中介绍了一些关于如何利用<code>Hadoop Streaming</code>运行Python版MapReduce的简单操作，如何实现词频统计就像是MapReduce中的<em>Hello World</em>，不过做完了入门教程，为了深入学习，还得需要更多的练习。</p>\n<p>在这篇文章中，我将会带各位实现一个很简单的搜索联想功能，比较粗糙，但是看起来也挺像那么回事的~</p>\n<a id=\"more\"></a>\n<hr>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>为了实现<code>autocomplete</code>，首先需要搞清楚它背后的原理，搜索引擎究竟是根据什么来给出提示的？比如我输入一个<code>autocomplete</code>之后，为什么后面推荐的是<em>python</em>，<em>algorithm</em>之类的，而不是<em>Naruto</em>，<em>One Piece</em>这些呢？</p>\n<p>无论是百度还是谷歌，其实在大家用它们的搜索引擎收集你需要的信息的时候，它们也同样在收集信息。它们收集了大量的用户搜索的输入信息，同时还在抓取各种网页内容的信息，简单来说，搜索引擎通过某种算法将各种收集到的资料综合到一起，最终给出了一个输入联想的列表，这就是自动补全功能。</p>\n<p>私下里作为学习MapReduce的项目，我们肯定不可能去试图实现真正的搜索引擎。不过做一个简陋版的，帮助自己理解<code>autocomplete</code>背后的实现原理，以及如何利用MapReduce来实现，也是足够的。</p>\n<hr>\n<h2 id=\"N-Gram\"><a href=\"#N-Gram\" class=\"headerlink\" title=\"N-Gram\"></a>N-Gram</h2><p>对于autocomplete背后实现的原理，很重要的一点就是N-Gram，<a href=\"http://blog.sciencenet.cn/blog-713101-797384.html\" target=\"_blank\" rel=\"external\">这篇文章</a>有简明的介绍，举个例子好了：<code>implement search autocomplete in python</code></p>\n<ul>\n<li>这句话如果按2-Gram划分的话，就是<code>implement search</code>，<code>search autocomplete</code>，<code>autocomplete in</code>，<code>in python</code>；</li>\n<li>那么按照3-Gram划分的话，就是<code>implement search autocomplete</code>，<code>search autocomplete in</code>，<code>autocomplete in python</code>；</li>\n<li>按照4-Gram划分的话，就是<code>implement search autocomplete in</code>，<code>search autocomplete in python</code>；</li>\n<li>按照5-Gram划分的话，就是一整句话，不作任何切割。</li>\n</ul>\n<p>这里我没有给出1-Gram的例子，各位可以思考一下是为什么，这里先卖个关子，下面会提到原因。这里我们先回头思考一下搜索引擎给出的联想词汇，比如我输入了一个<code>autocomplete</code>，那么后面你觉得是给出<code>in python</code>看上去更自然还是<code>Transformer</code>更合理？显然是前者对么，如果给出了后者，你可能会想：<code>autocomplete Transformer</code>是什么鬼？！难道是某种新型变形金刚么？没听过啊！那之所以会有这样的感觉，是因为从我们平时获取的信息中，我们对于<code>autocomplete</code>这个词后面的衔接词接收到的也是<code>in python</code>远远多于<code>Transformer</code>，对吧？所以说到这里就大概有点明晰了，搜索引擎对于联想词汇的推荐也有这方面的考虑，我们给输入一个或多个引导词，<code>autocomplete</code>功能将后面最有可能出现的几种选择展现给我们。所以这也是为什么用到N-Gram的原因，这里其实就是一个句子分割的过程。</p>\n<p>那么这里就引出了下一个问题：是该基于一句话最后一个词来预测后面的推荐，还是根据更多的词甚至一整句来预测下面的出现呢？</p>\n<p>还继续以上面的例子说好了。假设我已经输入了<code>implement search autocomplete in</code>，如果是按照最后一个出现的词来进行联想，那么<code>in</code>后面其实可以跟很多很多内容，都不会违和，对吧？比如<code>in box</code>，<code>in air</code>，<code>in heart</code>等等，但如果把这些联想放到一整句中，显然是不太合理的。因此，我们在实现<code>autocomplete</code>的时候，其实是<strong>基于N-Gram预测N-Gram</strong>。</p>\n<p>那到这里，其实<code>autocomplete</code>的实现的大致思路就应该有了。我们需要将大批量的文档用N-Gram的处理方式进行切割，统计相同短语出现的频次，构建N-Gram的模型，然后找出每个短语之后出现频次最高的几个词汇作为预测保存下来。最终将结果存入数据库，以方便之后调用。下面我们就来看看如何一步步具体实现。</p>\n<hr>\n<h2 id=\"MapReduce实现\"><a href=\"#MapReduce实现\" class=\"headerlink\" title=\"MapReduce实现\"></a>MapReduce实现</h2><h3 id=\"N-Gram模型构建\"><a href=\"#N-Gram模型构建\" class=\"headerlink\" title=\"N-Gram模型构建\"></a>N-Gram模型构建</h3><p>在这次的代码实现中，我们需要用到两个mapper和reducer。首先，我们需要一对mapper和reducer将输入的文档进行切割。</p>\n<p><code>n_gram_mapper.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> string</div><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">(N_Gram)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> sys.stdin:</div><div class=\"line\">        <span class=\"comment\"># 去除所有的标点符号</span></div><div class=\"line\">        translator = str.maketrans(string.punctuation, <span class=\"string\">\" \"</span> * len(string.punctuation))</div><div class=\"line\">        line = line.translate(translator).strip().lower()</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\"># 去除所有的数字</span></div><div class=\"line\">        line = re.sub(<span class=\"string\">\"\\d\"</span>, <span class=\"string\">\" \"</span>, line)</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\"># 按照空格或者\\t来切割</span></div><div class=\"line\">        words = re.split(<span class=\"string\">\"\\\\s+\"</span>, line)</div><div class=\"line\">        <span class=\"keyword\">if</span> len(words) &lt; <span class=\"number\">2</span>:</div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">            </div><div class=\"line\">        <span class=\"keyword\">for</span> i, word <span class=\"keyword\">in</span> enumerate(words):</div><div class=\"line\">            result = word</div><div class=\"line\">            <span class=\"keyword\">for</span> j, next_word <span class=\"keyword\">in</span> enumerate(words[i+<span class=\"number\">1</span>:], <span class=\"number\">1</span>):</div><div class=\"line\">                <span class=\"keyword\">if</span> j &lt; N_Gram:</div><div class=\"line\">                    result += <span class=\"string\">\" \"</span></div><div class=\"line\">                    result += next_word</div><div class=\"line\">                    print(<span class=\"string\">\"&#123;&#125;\\t&#123;&#125;\"</span>.format(result, <span class=\"number\">1</span>))</div><div class=\"line\">                    </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main(<span class=\"number\">5</span>)</div></pre></td></tr></table></figure>\n<p>如果你想构建一个<strong>N=5</strong>的N-Gram模型，那么在mapper里，就需要将2到5的分割方式都输出。还记得上面我有留一个悬念，为什么不考虑1-Gram么？因为显然1-Gram是没有用的，它并不能告诉我一个短语后面可能出现的词有什么。</p>\n<p><code>n_gram_reducer.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> groupby</div><div class=\"line\"><span class=\"keyword\">from</span> operator <span class=\"keyword\">import</span> itemgetter</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse_output</span><span class=\"params\">(std_input)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 利用generator节省MapReduce内存使用空间</span></div><div class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> std_input:</div><div class=\"line\">        <span class=\"keyword\">yield</span> line.strip().split(<span class=\"string\">\"\\t\"</span>)</div><div class=\"line\">        </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    data = parse_output(sys.stdin)</div><div class=\"line\">    <span class=\"keyword\">for</span> word, group <span class=\"keyword\">in</span> groupby(data, itemgetter(<span class=\"number\">0</span>)):</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            total_count = sum(int(count) <span class=\"keyword\">for</span> word, count <span class=\"keyword\">in</span> group)</div><div class=\"line\">            print(<span class=\"string\">\"&#123;&#125;\\t&#123;&#125;\"</span>.format(word, total_count))</div><div class=\"line\">        <span class=\"keyword\">except</span> ValueError:</div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">            </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>\n<p>这回的reducer我用到了<code>generator</code>来调用数据，这样做可以有效节省内存占用空间。因为随着输入数据量的越来越大，即便是5-Gram，依然也是个很庞大的记录数量。下面的主函数部分，我也放弃了之前的简单用法，用groupby可以明显提升代码的阅读逻辑，对<code>itertools.groupby</code>不太熟悉的朋友可以看<a href=\"https://docs.python.org/3/library/itertools.html\" target=\"_blank\" rel=\"external\">这份官方文档</a>。</p>\n<h3 id=\"N-Gram测试结果\"><a href=\"#N-Gram测试结果\" class=\"headerlink\" title=\"N-Gram测试结果\"></a>N-Gram测试结果</h3><p>做下一步之前，我们先来本地测试一下这一对mapper和reducer是否好用。</p>\n<p>测试文档：我直接把<a href=\"https://en.wikipedia.org/wiki/MapReduce\" target=\"_blank\" rel=\"external\">MapReduce</a>的Wiki里头一段关于它的说明解释，粘贴下来作为测试文档用。\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop:~/src/p2py# cat input/file2.txt | ./n_gram_mapper.py | sort | ./n_gram_reducer.py</div><div class=\"line\">a cluster\t1</div><div class=\"line\">a good\t1</div><div class=\"line\">a good mapreduce\t1</div><div class=\"line\">a good mapreduce algorithm\t1</div><div class=\"line\">a map\t1</div><div class=\"line\">a map procedure\t1</div><div class=\"line\">a map procedure method\t1</div><div class=\"line\">a map procedure method that\t1</div><div class=\"line\">a mapreduce\t1</div><div class=\"line\">a mapreduce program\t1</div><div class=\"line\">a mapreduce program is\t1</div><div class=\"line\">a mapreduce program is composed\t1</div><div class=\"line\">...</div><div class=\"line\">and reduce\t3</div><div class=\"line\">and reduce capabilities\t1</div><div class=\"line\">and reduce functions\t2</div><div class=\"line\">...</div><div class=\"line\">map and\t3</div><div class=\"line\">map and reduce\t3</div><div class=\"line\">map and reduce capabilities\t1</div><div class=\"line\">map and reduce functions\t2</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<p>我这里就截取一部分结果，实在太长了……</p>\n<h3 id=\"构建预测概率的模型\"><a href=\"#构建预测概率的模型\" class=\"headerlink\" title=\"构建预测概率的模型\"></a>构建预测概率的模型</h3><p>我们现在已经有了N-Gram切割后的结果了，下一步就是要在此基础上分析每一个词汇或者短语后面可能出现的内容，这里其实可以理解成构建一个概率模型，很简单一个概率模型。</p>\n<p>举例说明，我们先来看刚才的结果生成的一部分\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">and data\t1</div><div class=\"line\">and development\t1</div><div class=\"line\">and fault\t3</div><div class=\"line\">and generating\t1</div><div class=\"line\">and less\t1</div><div class=\"line\">and providing\t1</div><div class=\"line\">and reduce\t3</div><div class=\"line\">and scatter\t1</div><div class=\"line\">and sorting\t1</div></pre></td></tr></table></figure></p>\n<p>先仅仅分析and之后可能出现的词汇，所有的情况都在这里摆着了。那这时候autocomplete会如何给出推荐呢？很显然的，fault和reduce会放到头两个推荐对吧，为什么？这其实就是个概率的问题：and后接一个词在文中出现了<code>1+1+3+1+1+1+3+1+1=13</code>次，那fault和reduce推荐的概率就是<code>3/13</code>，剩下的所有都是<code>1/13</code>的概率。对于<code>autocomplete</code>系统来说，这意味着当用户输入了and之后，它认为用户更有可能继续输入的是fault和reduce，因为从它以往经验（系统所得到的输入）来看，fault和reduce出现的频次更多一些，相比较于其他的结果。因此，下一步工作，我们需要得到一个类似于<code>and&lt;\\t&gt;data=1</code>这样的数据记录样式，来统计所有的短语之后跟随的词汇以及它出现的频次。这里我们之所以不用概率来进行记录，是因为从刚才的计算过程来看，词频和概率是正相关的，那么就没必要多算一步记录概率了。</p>\n<p><code>prob_mapper.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> string</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">(threshold)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> sys.stdin:</div><div class=\"line\">        words_phrase, count = line.strip().split(<span class=\"string\">\"\\t\"</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> int(count) &lt; threshold:</div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">            </div><div class=\"line\">        words = words_phrase.strip().split(<span class=\"string\">\" \"</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> len(words) &lt; <span class=\"number\">2</span>:</div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">            </div><div class=\"line\">        print(<span class=\"string\">\"&#123;&#125;\\t&#123;&#125;\"</span>.format(<span class=\"string\">' '</span>.join(words[:<span class=\"number\">-1</span>]), words[<span class=\"number\">-1</span>] + <span class=\"string\">\"=\"</span> + count))</div><div class=\"line\">        </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main(<span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n<p>mapper的工作其实很简单，基本没有什么需要说明的。需要注意的是，这里我加入了一个threshold参数，意义是为了筛选掉一部分出现频次太低的结果。刚才举的例子里，每个结果出现的频次其实都不高，这样threshold肯定是没用的，但实际生产中，比如像Google和百度这样的超大规模的搜索引擎，每天可能抓取的数据量十分庞大。事实上，我们每次在搜索框中输入内容，得到的联想其实都在二十条以内，一般来说不会给太多的，太多的话，用户筛选起来也是个麻烦。那对于那些基本很少出现的词组组合，也就没必要存储下来，被搜索到的概率太低，如果全部都记录下来，对数据库的存储容量是个很大的负担。</p>\n<p><code>prob_reducer.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> groupby</div><div class=\"line\"><span class=\"keyword\">from</span> operator <span class=\"keyword\">import</span> itemgetter</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse_output</span><span class=\"params\">(std_input)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> std_input:</div><div class=\"line\">        <span class=\"keyword\">yield</span> line.strip().split(<span class=\"string\">\"\\t\"</span>)</div><div class=\"line\">        </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">(n_gram)</span>:</span></div><div class=\"line\">    data = parse_output(sys.stdin)</div><div class=\"line\">    <span class=\"keyword\">for</span> starting_phrase, group <span class=\"keyword\">in</span> groupby(data, itemgetter(<span class=\"number\">0</span>)):</div><div class=\"line\">        result = &#123;&#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> _, word_count <span class=\"keyword\">in</span> group:</div><div class=\"line\">            word, count = word_count.split(<span class=\"string\">\"=\"</span>)</div><div class=\"line\">            count = int(count)</div><div class=\"line\">            <span class=\"keyword\">if</span> count <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> result:</div><div class=\"line\">                result[count] = []</div><div class=\"line\">            result[count].append(word)</div><div class=\"line\">            </div><div class=\"line\">        i = <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> result.items():</div><div class=\"line\">            <span class=\"keyword\">if</span> i &lt; n_gram:</div><div class=\"line\">                <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> value:</div><div class=\"line\">                    print(<span class=\"string\">\"&#123;&#125;,&#123;&#125;,&#123;&#125;\"</span>.format(starting_phrase, word, key))</div><div class=\"line\">                    i += <span class=\"number\">1</span></div><div class=\"line\">                    </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main(<span class=\"number\">4</span>)</div></pre></td></tr></table></figure>\n<p><code>starting_phrase</code>代表的是用户输入的部分，<code>following_word</code>代表的是后面可能出现的词汇，<code>count</code>顾名思义就是指词频了。在reducer中，我们先按照词频的不同将可能出现的词汇分组放置，然后再根据我们需要的N-Gram大小来依次输出。这里的参数n_gram和之前n_gram_mapper里的n_gram意思一样，但取值可以不同。</p>\n<hr>\n<h3 id=\"预测概率的测试结果\"><a href=\"#预测概率的测试结果\" class=\"headerlink\" title=\"预测概率的测试结果\"></a>预测概率的测试结果</h3><p>下面我们来看看本地测试结果吧，就用上一步n_gram_reducer得出的结果继续操作。</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop:~/src/p2py# cat result.txt | ./prob_mapper.py | ./prob_reducer.py </div><div class=\"line\">and,fault,3</div><div class=\"line\">and fault,tolerance,3</div><div class=\"line\">and,reduce,3</div><div class=\"line\">and reduce,functions,2</div><div class=\"line\">big,data,2</div><div class=\"line\">communication,cost,2</div><div class=\"line\">fault,tolerance,3</div><div class=\"line\">is,a,2</div><div class=\"line\">map,and,3</div><div class=\"line\">map and,reduce,3</div><div class=\"line\">map and reduce,functions,2</div><div class=\"line\">mapreduce,framework,3</div><div class=\"line\">method,that,2</div><div class=\"line\">method that,performs,2</div><div class=\"line\">model,and,2</div><div class=\"line\">model,is,2</div><div class=\"line\">not,the,2</div><div class=\"line\">of,the,4</div><div class=\"line\">of the,mapreduce,2</div><div class=\"line\">of the mapreduce,framework,2</div><div class=\"line\">optimizing,the,2</div><div class=\"line\">reduce,functions,2</div><div class=\"line\">such,as,2</div><div class=\"line\">that,performs,2</div><div class=\"line\">the,mapreduce,4</div><div class=\"line\">the mapreduce,framework,3</div><div class=\"line\">the,various,2</div></pre></td></tr></table></figure>\n<p>因为之前在mapper里我们将threshold设置为2，这里我们就可以看到结果中只有词频不小于2次的。</p>\n<h3 id=\"运行在Hadoop上\"><a href=\"#运行在Hadoop上\" class=\"headerlink\" title=\"运行在Hadoop上\"></a>运行在Hadoop上</h3><p>刚才在本地跑过了之后，下面来进行Hadoop上的测试。为了方便快捷，我编写了一个script来运行两对mapper和reducer，最后把得到的数据从HDFS里导出到本地。\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop:~/src/p2py# ./run_script.sh </div><div class=\"line\">    </div><div class=\"line\">Cleaning old results in /output...</div><div class=\"line\">17/10/10 01:30:20 INFO fs.TrashPolicyDefault: Namenode trash configuration: Deletion interval = 0 minutes, Emptier interval = 0 minutes.</div><div class=\"line\">Deleted /output</div><div class=\"line\">    </div><div class=\"line\">Running python in Hadoop by hadoop streaming...</div><div class=\"line\">    </div><div class=\"line\">packageJobJar: [/tmp/hadoop-unjar5398292596529368576/] [] /tmp/streamjob5913697815224381390.jar tmpDir=null</div><div class=\"line\">17/10/10 01:30:22 INFO client.RMProxy: Connecting to ResourceManager at hadoop-master/172.18.0.2:8032</div><div class=\"line\">17/10/10 01:30:22 INFO client.RMProxy: Connecting to ResourceManager at hadoop-master/172.18.0.2:8032</div><div class=\"line\">17/10/10 01:30:23 INFO mapred.FileInputFormat: Total input paths to process : 1</div><div class=\"line\">...</div><div class=\"line\">17/10/10 01:30:49 INFO streaming.StreamJob: Output directory: /output/first</div><div class=\"line\">    </div><div class=\"line\">Running 2nd mapper and reducer...</div><div class=\"line\">    </div><div class=\"line\">packageJobJar: [/tmp/hadoop-unjar6814698868258273333/] [] /tmp/streamjob6470458846508985375.jar tmpDir=null</div><div class=\"line\">17/10/10 01:30:51 INFO client.RMProxy: Connecting to ResourceManager at hadoop-master/172.18.0.2:8032</div><div class=\"line\">17/10/10 01:30:51 INFO client.RMProxy: Connecting to ResourceManager at hadoop-master/172.18.0.2:8032</div><div class=\"line\">17/10/10 01:30:52 INFO mapred.FileInputFormat: Total input paths to process : 1</div><div class=\"line\">...</div><div class=\"line\">17/10/10 01:31:13 INFO streaming.StreamJob: Output directory: /output/second</div><div class=\"line\">    </div><div class=\"line\">Moving outputs from HDFS to local...</div><div class=\"line\">    </div><div class=\"line\">Got the output!</div></pre></td></tr></table></figure></p>\n<p>一切顺利运行！最终结果也被成功导出到本地。</p>\n<hr>\n<h2 id=\"导入数据库\"><a href=\"#导入数据库\" class=\"headerlink\" title=\"导入数据库\"></a>导入数据库</h2><p>其实到上一小节，MapReduce的工作就都做完了，但为了让<code>autocomplete</code>可以展现出应有的效果，这里还需要将刚才生成的数据导出到数据库中，以便之后和Web结合来体现功能。</p>\n<p>数据库我用的是MySQL，大家可以任意选择。下面是我的数据库操作代码：\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> MySQLdb <span class=\"keyword\">as</span> mdb</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read_data</span><span class=\"params\">(file)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> file.readlines():</div><div class=\"line\">        <span class=\"keyword\">yield</span> line.strip().split(<span class=\"string\">\",\"</span>)</div><div class=\"line\">        </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">(input_data)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">with</span> mdb.connect(<span class=\"string\">'localhost'</span>, <span class=\"string\">'username'</span>, <span class=\"string\">'password'</span>, <span class=\"string\">'dbname'</span>) <span class=\"keyword\">as</span> cur:</div><div class=\"line\">        cur.execute(<span class=\"string\">\"DROP TABLE IF EXISTS output\"</span>)</div><div class=\"line\">        cur.execute(</div><div class=\"line\">            <span class=\"string\">\"CREATE TABLE output(starting_phrase VARCHAR(250), following_word VARCHAR(250), count INT)\"</span>)</div><div class=\"line\">        <span class=\"keyword\">with</span> open(input_data, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> file:</div><div class=\"line\">            <span class=\"keyword\">for</span> starting_phrase, following_word, count <span class=\"keyword\">in</span> read_data(file):</div><div class=\"line\">                cur.execute(</div><div class=\"line\">                    <span class=\"string\">\"INSERT INTO output(starting_phrase, following_word, count) \\</span></div><div class=\"line\"><span class=\"string\">                     VALUES('&#123;&#125;', '&#123;&#125;', &#123;&#125;)\"</span>.format(starting_phrase, following_word, count))</div><div class=\"line\">                     </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main(<span class=\"string\">\"output\"</span>)</div></pre></td></tr></table></figure></p>\n<p>数据库中显示的结果：\n<img src=\"/images/autocomplete/database.png\" alt=\"database\"></p>\n<hr>\n<h2 id=\"展示结果\"><a href=\"#展示结果\" class=\"headerlink\" title=\"展示结果\"></a>展示结果</h2><p>我简单做了一个Web展示的页面，基于Ajax和PHP，连接数据库后，测试结果如下图所示：\n<img src=\"/images/autocomplete/ggif.gif\" alt=\"test\"></p>\n<hr>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>本文从零开始，不太详细的介绍了<code>autocomplete</code>的工作原理，以及如何利用Python和MapReduce来处理数据。相比较Java实现这些内容而言，Python确实需要注意更多的细节，毕竟Java是Hadoop原生环境，configuration的配置真的是方便。之前做wordcount时没有觉得Python+Hadoop Streaming的方式有什么问题，因为Python天生的简洁特质，感觉比Java啰里啰嗦的舒服多了。但这次的代码实现上就看出端倪了，Python下更多的细节部分需要开发者自己写代码去维护，就像不同的mapper，reducer之间的数据传输，还有输出到数据库保存。</p>\n<p>一路从头看到这里的朋友，感谢你的阅读，如果有疑惑，欢迎👇下面留言，如果文章中有什么不对的地方，也欢迎批评和指正。</p>\n<hr>\n<h1 id=\"Related-Links\"><a href=\"#Related-Links\" class=\"headerlink\" title=\"Related Links\"></a>Related Links</h1><ol>\n<li><a href=\"http://blog.sciencenet.cn/blog-713101-797384.html\" target=\"_blank\" rel=\"external\">N-gram的原理、用途和研究</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/autocomplete/autocomplete.png\" alt=\"search autocomplete\">\n记得很早的时候，刚开始接触搜索引擎，那时候Google还没有被墙，百度也是刚刚诞生没多久，无论我在输入框内输入什么，只是显示我输入的内容，并没有任何联想功能提示我接下来可能匹配的内容。有时候想找个东西，可就是死活想不起来准确的名字或者描述方式，这个时候搜索引擎也帮不了你，你只能变着法的尝试各种输入，来寻求最终你想要的结果。后来搜索引擎加入了联想功能，这着实是一大进步，极大地提高了搜索效率。有的时候，我们对于想查询的某一问题的提问方式是很模糊的，这个时候当你输入了一些关键词，发现搜索引擎会根据你的输入给你一些后续内容的建议，会让你更容易的找到自己想要的答案。</p>\n<h1 id=\"本文目的\"><a href=\"#本文目的\" class=\"headerlink\" title=\"本文目的\"></a>本文目的</h1><p>上一篇我在《用Python在Hadoop上跑MapReduce》中介绍了一些关于如何利用<code>Hadoop Streaming</code>运行Python版MapReduce的简单操作，如何实现词频统计就像是MapReduce中的<em>Hello World</em>，不过做完了入门教程，为了深入学习，还得需要更多的练习。</p>\n<p>在这篇文章中，我将会带各位实现一个很简单的搜索联想功能，比较粗糙，但是看起来也挺像那么回事的~</p>","more":"<hr>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>为了实现<code>autocomplete</code>，首先需要搞清楚它背后的原理，搜索引擎究竟是根据什么来给出提示的？比如我输入一个<code>autocomplete</code>之后，为什么后面推荐的是<em>python</em>，<em>algorithm</em>之类的，而不是<em>Naruto</em>，<em>One Piece</em>这些呢？</p>\n<p>无论是百度还是谷歌，其实在大家用它们的搜索引擎收集你需要的信息的时候，它们也同样在收集信息。它们收集了大量的用户搜索的输入信息，同时还在抓取各种网页内容的信息，简单来说，搜索引擎通过某种算法将各种收集到的资料综合到一起，最终给出了一个输入联想的列表，这就是自动补全功能。</p>\n<p>私下里作为学习MapReduce的项目，我们肯定不可能去试图实现真正的搜索引擎。不过做一个简陋版的，帮助自己理解<code>autocomplete</code>背后的实现原理，以及如何利用MapReduce来实现，也是足够的。</p>\n<hr>\n<h2 id=\"N-Gram\"><a href=\"#N-Gram\" class=\"headerlink\" title=\"N-Gram\"></a>N-Gram</h2><p>对于autocomplete背后实现的原理，很重要的一点就是N-Gram，<a href=\"http://blog.sciencenet.cn/blog-713101-797384.html\" target=\"_blank\" rel=\"external\">这篇文章</a>有简明的介绍，举个例子好了：<code>implement search autocomplete in python</code></p>\n<ul>\n<li>这句话如果按2-Gram划分的话，就是<code>implement search</code>，<code>search autocomplete</code>，<code>autocomplete in</code>，<code>in python</code>；</li>\n<li>那么按照3-Gram划分的话，就是<code>implement search autocomplete</code>，<code>search autocomplete in</code>，<code>autocomplete in python</code>；</li>\n<li>按照4-Gram划分的话，就是<code>implement search autocomplete in</code>，<code>search autocomplete in python</code>；</li>\n<li>按照5-Gram划分的话，就是一整句话，不作任何切割。</li>\n</ul>\n<p>这里我没有给出1-Gram的例子，各位可以思考一下是为什么，这里先卖个关子，下面会提到原因。这里我们先回头思考一下搜索引擎给出的联想词汇，比如我输入了一个<code>autocomplete</code>，那么后面你觉得是给出<code>in python</code>看上去更自然还是<code>Transformer</code>更合理？显然是前者对么，如果给出了后者，你可能会想：<code>autocomplete Transformer</code>是什么鬼？！难道是某种新型变形金刚么？没听过啊！那之所以会有这样的感觉，是因为从我们平时获取的信息中，我们对于<code>autocomplete</code>这个词后面的衔接词接收到的也是<code>in python</code>远远多于<code>Transformer</code>，对吧？所以说到这里就大概有点明晰了，搜索引擎对于联想词汇的推荐也有这方面的考虑，我们给输入一个或多个引导词，<code>autocomplete</code>功能将后面最有可能出现的几种选择展现给我们。所以这也是为什么用到N-Gram的原因，这里其实就是一个句子分割的过程。</p>\n<p>那么这里就引出了下一个问题：是该基于一句话最后一个词来预测后面的推荐，还是根据更多的词甚至一整句来预测下面的出现呢？</p>\n<p>还继续以上面的例子说好了。假设我已经输入了<code>implement search autocomplete in</code>，如果是按照最后一个出现的词来进行联想，那么<code>in</code>后面其实可以跟很多很多内容，都不会违和，对吧？比如<code>in box</code>，<code>in air</code>，<code>in heart</code>等等，但如果把这些联想放到一整句中，显然是不太合理的。因此，我们在实现<code>autocomplete</code>的时候，其实是<strong>基于N-Gram预测N-Gram</strong>。</p>\n<p>那到这里，其实<code>autocomplete</code>的实现的大致思路就应该有了。我们需要将大批量的文档用N-Gram的处理方式进行切割，统计相同短语出现的频次，构建N-Gram的模型，然后找出每个短语之后出现频次最高的几个词汇作为预测保存下来。最终将结果存入数据库，以方便之后调用。下面我们就来看看如何一步步具体实现。</p>\n<hr>\n<h2 id=\"MapReduce实现\"><a href=\"#MapReduce实现\" class=\"headerlink\" title=\"MapReduce实现\"></a>MapReduce实现</h2><h3 id=\"N-Gram模型构建\"><a href=\"#N-Gram模型构建\" class=\"headerlink\" title=\"N-Gram模型构建\"></a>N-Gram模型构建</h3><p>在这次的代码实现中，我们需要用到两个mapper和reducer。首先，我们需要一对mapper和reducer将输入的文档进行切割。</p>\n<p><code>n_gram_mapper.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> string</div><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">(N_Gram)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> sys.stdin:</div><div class=\"line\">        <span class=\"comment\"># 去除所有的标点符号</span></div><div class=\"line\">        translator = str.maketrans(string.punctuation, <span class=\"string\">\" \"</span> * len(string.punctuation))</div><div class=\"line\">        line = line.translate(translator).strip().lower()</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\"># 去除所有的数字</span></div><div class=\"line\">        line = re.sub(<span class=\"string\">\"\\d\"</span>, <span class=\"string\">\" \"</span>, line)</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\"># 按照空格或者\\t来切割</span></div><div class=\"line\">        words = re.split(<span class=\"string\">\"\\\\s+\"</span>, line)</div><div class=\"line\">        <span class=\"keyword\">if</span> len(words) &lt; <span class=\"number\">2</span>:</div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">            </div><div class=\"line\">        <span class=\"keyword\">for</span> i, word <span class=\"keyword\">in</span> enumerate(words):</div><div class=\"line\">            result = word</div><div class=\"line\">            <span class=\"keyword\">for</span> j, next_word <span class=\"keyword\">in</span> enumerate(words[i+<span class=\"number\">1</span>:], <span class=\"number\">1</span>):</div><div class=\"line\">                <span class=\"keyword\">if</span> j &lt; N_Gram:</div><div class=\"line\">                    result += <span class=\"string\">\" \"</span></div><div class=\"line\">                    result += next_word</div><div class=\"line\">                    print(<span class=\"string\">\"&#123;&#125;\\t&#123;&#125;\"</span>.format(result, <span class=\"number\">1</span>))</div><div class=\"line\">                    </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main(<span class=\"number\">5</span>)</div></pre></td></tr></table></figure>\n<p>如果你想构建一个<strong>N=5</strong>的N-Gram模型，那么在mapper里，就需要将2到5的分割方式都输出。还记得上面我有留一个悬念，为什么不考虑1-Gram么？因为显然1-Gram是没有用的，它并不能告诉我一个短语后面可能出现的词有什么。</p>\n<p><code>n_gram_reducer.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> groupby</div><div class=\"line\"><span class=\"keyword\">from</span> operator <span class=\"keyword\">import</span> itemgetter</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse_output</span><span class=\"params\">(std_input)</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 利用generator节省MapReduce内存使用空间</span></div><div class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> std_input:</div><div class=\"line\">        <span class=\"keyword\">yield</span> line.strip().split(<span class=\"string\">\"\\t\"</span>)</div><div class=\"line\">        </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    data = parse_output(sys.stdin)</div><div class=\"line\">    <span class=\"keyword\">for</span> word, group <span class=\"keyword\">in</span> groupby(data, itemgetter(<span class=\"number\">0</span>)):</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            total_count = sum(int(count) <span class=\"keyword\">for</span> word, count <span class=\"keyword\">in</span> group)</div><div class=\"line\">            print(<span class=\"string\">\"&#123;&#125;\\t&#123;&#125;\"</span>.format(word, total_count))</div><div class=\"line\">        <span class=\"keyword\">except</span> ValueError:</div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">            </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>\n<p>这回的reducer我用到了<code>generator</code>来调用数据，这样做可以有效节省内存占用空间。因为随着输入数据量的越来越大，即便是5-Gram，依然也是个很庞大的记录数量。下面的主函数部分，我也放弃了之前的简单用法，用groupby可以明显提升代码的阅读逻辑，对<code>itertools.groupby</code>不太熟悉的朋友可以看<a href=\"https://docs.python.org/3/library/itertools.html\" target=\"_blank\" rel=\"external\">这份官方文档</a>。</p>\n<h3 id=\"N-Gram测试结果\"><a href=\"#N-Gram测试结果\" class=\"headerlink\" title=\"N-Gram测试结果\"></a>N-Gram测试结果</h3><p>做下一步之前，我们先来本地测试一下这一对mapper和reducer是否好用。</p>\n<p>测试文档：我直接把<a href=\"https://en.wikipedia.org/wiki/MapReduce\" target=\"_blank\" rel=\"external\">MapReduce</a>的Wiki里头一段关于它的说明解释，粘贴下来作为测试文档用。\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop:~/src/p2py# cat input/file2.txt | ./n_gram_mapper.py | sort | ./n_gram_reducer.py</div><div class=\"line\">a cluster\t1</div><div class=\"line\">a good\t1</div><div class=\"line\">a good mapreduce\t1</div><div class=\"line\">a good mapreduce algorithm\t1</div><div class=\"line\">a map\t1</div><div class=\"line\">a map procedure\t1</div><div class=\"line\">a map procedure method\t1</div><div class=\"line\">a map procedure method that\t1</div><div class=\"line\">a mapreduce\t1</div><div class=\"line\">a mapreduce program\t1</div><div class=\"line\">a mapreduce program is\t1</div><div class=\"line\">a mapreduce program is composed\t1</div><div class=\"line\">...</div><div class=\"line\">and reduce\t3</div><div class=\"line\">and reduce capabilities\t1</div><div class=\"line\">and reduce functions\t2</div><div class=\"line\">...</div><div class=\"line\">map and\t3</div><div class=\"line\">map and reduce\t3</div><div class=\"line\">map and reduce capabilities\t1</div><div class=\"line\">map and reduce functions\t2</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<p>我这里就截取一部分结果，实在太长了……</p>\n<h3 id=\"构建预测概率的模型\"><a href=\"#构建预测概率的模型\" class=\"headerlink\" title=\"构建预测概率的模型\"></a>构建预测概率的模型</h3><p>我们现在已经有了N-Gram切割后的结果了，下一步就是要在此基础上分析每一个词汇或者短语后面可能出现的内容，这里其实可以理解成构建一个概率模型，很简单一个概率模型。</p>\n<p>举例说明，我们先来看刚才的结果生成的一部分\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">and data\t1</div><div class=\"line\">and development\t1</div><div class=\"line\">and fault\t3</div><div class=\"line\">and generating\t1</div><div class=\"line\">and less\t1</div><div class=\"line\">and providing\t1</div><div class=\"line\">and reduce\t3</div><div class=\"line\">and scatter\t1</div><div class=\"line\">and sorting\t1</div></pre></td></tr></table></figure></p>\n<p>先仅仅分析and之后可能出现的词汇，所有的情况都在这里摆着了。那这时候autocomplete会如何给出推荐呢？很显然的，fault和reduce会放到头两个推荐对吧，为什么？这其实就是个概率的问题：and后接一个词在文中出现了<code>1+1+3+1+1+1+3+1+1=13</code>次，那fault和reduce推荐的概率就是<code>3/13</code>，剩下的所有都是<code>1/13</code>的概率。对于<code>autocomplete</code>系统来说，这意味着当用户输入了and之后，它认为用户更有可能继续输入的是fault和reduce，因为从它以往经验（系统所得到的输入）来看，fault和reduce出现的频次更多一些，相比较于其他的结果。因此，下一步工作，我们需要得到一个类似于<code>and&lt;\\t&gt;data=1</code>这样的数据记录样式，来统计所有的短语之后跟随的词汇以及它出现的频次。这里我们之所以不用概率来进行记录，是因为从刚才的计算过程来看，词频和概率是正相关的，那么就没必要多算一步记录概率了。</p>\n<p><code>prob_mapper.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> string</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">(threshold)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> sys.stdin:</div><div class=\"line\">        words_phrase, count = line.strip().split(<span class=\"string\">\"\\t\"</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> int(count) &lt; threshold:</div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">            </div><div class=\"line\">        words = words_phrase.strip().split(<span class=\"string\">\" \"</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> len(words) &lt; <span class=\"number\">2</span>:</div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">            </div><div class=\"line\">        print(<span class=\"string\">\"&#123;&#125;\\t&#123;&#125;\"</span>.format(<span class=\"string\">' '</span>.join(words[:<span class=\"number\">-1</span>]), words[<span class=\"number\">-1</span>] + <span class=\"string\">\"=\"</span> + count))</div><div class=\"line\">        </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main(<span class=\"number\">2</span>)</div></pre></td></tr></table></figure>\n<p>mapper的工作其实很简单，基本没有什么需要说明的。需要注意的是，这里我加入了一个threshold参数，意义是为了筛选掉一部分出现频次太低的结果。刚才举的例子里，每个结果出现的频次其实都不高，这样threshold肯定是没用的，但实际生产中，比如像Google和百度这样的超大规模的搜索引擎，每天可能抓取的数据量十分庞大。事实上，我们每次在搜索框中输入内容，得到的联想其实都在二十条以内，一般来说不会给太多的，太多的话，用户筛选起来也是个麻烦。那对于那些基本很少出现的词组组合，也就没必要存储下来，被搜索到的概率太低，如果全部都记录下来，对数据库的存储容量是个很大的负担。</p>\n<p><code>prob_reducer.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> groupby</div><div class=\"line\"><span class=\"keyword\">from</span> operator <span class=\"keyword\">import</span> itemgetter</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse_output</span><span class=\"params\">(std_input)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> std_input:</div><div class=\"line\">        <span class=\"keyword\">yield</span> line.strip().split(<span class=\"string\">\"\\t\"</span>)</div><div class=\"line\">        </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">(n_gram)</span>:</span></div><div class=\"line\">    data = parse_output(sys.stdin)</div><div class=\"line\">    <span class=\"keyword\">for</span> starting_phrase, group <span class=\"keyword\">in</span> groupby(data, itemgetter(<span class=\"number\">0</span>)):</div><div class=\"line\">        result = &#123;&#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> _, word_count <span class=\"keyword\">in</span> group:</div><div class=\"line\">            word, count = word_count.split(<span class=\"string\">\"=\"</span>)</div><div class=\"line\">            count = int(count)</div><div class=\"line\">            <span class=\"keyword\">if</span> count <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> result:</div><div class=\"line\">                result[count] = []</div><div class=\"line\">            result[count].append(word)</div><div class=\"line\">            </div><div class=\"line\">        i = <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> result.items():</div><div class=\"line\">            <span class=\"keyword\">if</span> i &lt; n_gram:</div><div class=\"line\">                <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> value:</div><div class=\"line\">                    print(<span class=\"string\">\"&#123;&#125;,&#123;&#125;,&#123;&#125;\"</span>.format(starting_phrase, word, key))</div><div class=\"line\">                    i += <span class=\"number\">1</span></div><div class=\"line\">                    </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main(<span class=\"number\">4</span>)</div></pre></td></tr></table></figure>\n<p><code>starting_phrase</code>代表的是用户输入的部分，<code>following_word</code>代表的是后面可能出现的词汇，<code>count</code>顾名思义就是指词频了。在reducer中，我们先按照词频的不同将可能出现的词汇分组放置，然后再根据我们需要的N-Gram大小来依次输出。这里的参数n_gram和之前n_gram_mapper里的n_gram意思一样，但取值可以不同。</p>\n<hr>\n<h3 id=\"预测概率的测试结果\"><a href=\"#预测概率的测试结果\" class=\"headerlink\" title=\"预测概率的测试结果\"></a>预测概率的测试结果</h3><p>下面我们来看看本地测试结果吧，就用上一步n_gram_reducer得出的结果继续操作。</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop:~/src/p2py# cat result.txt | ./prob_mapper.py | ./prob_reducer.py </div><div class=\"line\">and,fault,3</div><div class=\"line\">and fault,tolerance,3</div><div class=\"line\">and,reduce,3</div><div class=\"line\">and reduce,functions,2</div><div class=\"line\">big,data,2</div><div class=\"line\">communication,cost,2</div><div class=\"line\">fault,tolerance,3</div><div class=\"line\">is,a,2</div><div class=\"line\">map,and,3</div><div class=\"line\">map and,reduce,3</div><div class=\"line\">map and reduce,functions,2</div><div class=\"line\">mapreduce,framework,3</div><div class=\"line\">method,that,2</div><div class=\"line\">method that,performs,2</div><div class=\"line\">model,and,2</div><div class=\"line\">model,is,2</div><div class=\"line\">not,the,2</div><div class=\"line\">of,the,4</div><div class=\"line\">of the,mapreduce,2</div><div class=\"line\">of the mapreduce,framework,2</div><div class=\"line\">optimizing,the,2</div><div class=\"line\">reduce,functions,2</div><div class=\"line\">such,as,2</div><div class=\"line\">that,performs,2</div><div class=\"line\">the,mapreduce,4</div><div class=\"line\">the mapreduce,framework,3</div><div class=\"line\">the,various,2</div></pre></td></tr></table></figure>\n<p>因为之前在mapper里我们将threshold设置为2，这里我们就可以看到结果中只有词频不小于2次的。</p>\n<h3 id=\"运行在Hadoop上\"><a href=\"#运行在Hadoop上\" class=\"headerlink\" title=\"运行在Hadoop上\"></a>运行在Hadoop上</h3><p>刚才在本地跑过了之后，下面来进行Hadoop上的测试。为了方便快捷，我编写了一个script来运行两对mapper和reducer，最后把得到的数据从HDFS里导出到本地。\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop:~/src/p2py# ./run_script.sh </div><div class=\"line\">    </div><div class=\"line\">Cleaning old results in /output...</div><div class=\"line\">17/10/10 01:30:20 INFO fs.TrashPolicyDefault: Namenode trash configuration: Deletion interval = 0 minutes, Emptier interval = 0 minutes.</div><div class=\"line\">Deleted /output</div><div class=\"line\">    </div><div class=\"line\">Running python in Hadoop by hadoop streaming...</div><div class=\"line\">    </div><div class=\"line\">packageJobJar: [/tmp/hadoop-unjar5398292596529368576/] [] /tmp/streamjob5913697815224381390.jar tmpDir=null</div><div class=\"line\">17/10/10 01:30:22 INFO client.RMProxy: Connecting to ResourceManager at hadoop-master/172.18.0.2:8032</div><div class=\"line\">17/10/10 01:30:22 INFO client.RMProxy: Connecting to ResourceManager at hadoop-master/172.18.0.2:8032</div><div class=\"line\">17/10/10 01:30:23 INFO mapred.FileInputFormat: Total input paths to process : 1</div><div class=\"line\">...</div><div class=\"line\">17/10/10 01:30:49 INFO streaming.StreamJob: Output directory: /output/first</div><div class=\"line\">    </div><div class=\"line\">Running 2nd mapper and reducer...</div><div class=\"line\">    </div><div class=\"line\">packageJobJar: [/tmp/hadoop-unjar6814698868258273333/] [] /tmp/streamjob6470458846508985375.jar tmpDir=null</div><div class=\"line\">17/10/10 01:30:51 INFO client.RMProxy: Connecting to ResourceManager at hadoop-master/172.18.0.2:8032</div><div class=\"line\">17/10/10 01:30:51 INFO client.RMProxy: Connecting to ResourceManager at hadoop-master/172.18.0.2:8032</div><div class=\"line\">17/10/10 01:30:52 INFO mapred.FileInputFormat: Total input paths to process : 1</div><div class=\"line\">...</div><div class=\"line\">17/10/10 01:31:13 INFO streaming.StreamJob: Output directory: /output/second</div><div class=\"line\">    </div><div class=\"line\">Moving outputs from HDFS to local...</div><div class=\"line\">    </div><div class=\"line\">Got the output!</div></pre></td></tr></table></figure></p>\n<p>一切顺利运行！最终结果也被成功导出到本地。</p>\n<hr>\n<h2 id=\"导入数据库\"><a href=\"#导入数据库\" class=\"headerlink\" title=\"导入数据库\"></a>导入数据库</h2><p>其实到上一小节，MapReduce的工作就都做完了，但为了让<code>autocomplete</code>可以展现出应有的效果，这里还需要将刚才生成的数据导出到数据库中，以便之后和Web结合来体现功能。</p>\n<p>数据库我用的是MySQL，大家可以任意选择。下面是我的数据库操作代码：\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> MySQLdb <span class=\"keyword\">as</span> mdb</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read_data</span><span class=\"params\">(file)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> file.readlines():</div><div class=\"line\">        <span class=\"keyword\">yield</span> line.strip().split(<span class=\"string\">\",\"</span>)</div><div class=\"line\">        </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">(input_data)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">with</span> mdb.connect(<span class=\"string\">'localhost'</span>, <span class=\"string\">'username'</span>, <span class=\"string\">'password'</span>, <span class=\"string\">'dbname'</span>) <span class=\"keyword\">as</span> cur:</div><div class=\"line\">        cur.execute(<span class=\"string\">\"DROP TABLE IF EXISTS output\"</span>)</div><div class=\"line\">        cur.execute(</div><div class=\"line\">            <span class=\"string\">\"CREATE TABLE output(starting_phrase VARCHAR(250), following_word VARCHAR(250), count INT)\"</span>)</div><div class=\"line\">        <span class=\"keyword\">with</span> open(input_data, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> file:</div><div class=\"line\">            <span class=\"keyword\">for</span> starting_phrase, following_word, count <span class=\"keyword\">in</span> read_data(file):</div><div class=\"line\">                cur.execute(</div><div class=\"line\">                    <span class=\"string\">\"INSERT INTO output(starting_phrase, following_word, count) \\</span></div><div class=\"line\"><span class=\"string\">                     VALUES('&#123;&#125;', '&#123;&#125;', &#123;&#125;)\"</span>.format(starting_phrase, following_word, count))</div><div class=\"line\">                     </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main(<span class=\"string\">\"output\"</span>)</div></pre></td></tr></table></figure></p>\n<p>数据库中显示的结果：\n<img src=\"/images/autocomplete/database.png\" alt=\"database\"></p>\n<hr>\n<h2 id=\"展示结果\"><a href=\"#展示结果\" class=\"headerlink\" title=\"展示结果\"></a>展示结果</h2><p>我简单做了一个Web展示的页面，基于Ajax和PHP，连接数据库后，测试结果如下图所示：\n<img src=\"/images/autocomplete/ggif.gif\" alt=\"test\"></p>\n<hr>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>本文从零开始，不太详细的介绍了<code>autocomplete</code>的工作原理，以及如何利用Python和MapReduce来处理数据。相比较Java实现这些内容而言，Python确实需要注意更多的细节，毕竟Java是Hadoop原生环境，configuration的配置真的是方便。之前做wordcount时没有觉得Python+Hadoop Streaming的方式有什么问题，因为Python天生的简洁特质，感觉比Java啰里啰嗦的舒服多了。但这次的代码实现上就看出端倪了，Python下更多的细节部分需要开发者自己写代码去维护，就像不同的mapper，reducer之间的数据传输，还有输出到数据库保存。</p>\n<p>一路从头看到这里的朋友，感谢你的阅读，如果有疑惑，欢迎👇下面留言，如果文章中有什么不对的地方，也欢迎批评和指正。</p>\n<hr>\n<h1 id=\"Related-Links\"><a href=\"#Related-Links\" class=\"headerlink\" title=\"Related Links\"></a>Related Links</h1><ol>\n<li><a href=\"http://blog.sciencenet.cn/blog-713101-797384.html\" target=\"_blank\" rel=\"external\">N-gram的原理、用途和研究</a></li>\n</ol>"},{"title":"用Python在Hadoop上跑MapReduce","date":"2017-09-29T23:15:51.000Z","_content":"\n# 本文目的\n这篇文章主要会给大家介绍一下如何将Python和Hadoop结合起来工作。有接触过MapReduce的朋友都知道，Hadoop的运行环境主要是Java，一般介绍Hadoop和MapReduce的教程和书籍也都是基于Java的。因为我个人对Java并不太感冒，一直以来钟情于Python的简洁实用理念，同时又对MapReduce有兴趣，因此萌生了Python的MapReduce结合的想法。本文也是我经过Google学习他人教程，以及自己实际练习得出来的一些心得，在此分享给各位。\n\n<!--more-->\n\n---\n# 环境搭建\n首先，你需要有个Hadoop的运行环境，还有Python运行环境。本文主要目的不在分享安装环境，因此有从零开始的朋友，可以先去百度或者Google上搜一下相关教程。下面分享几个相关的教程：\n- [Hadoop: Setting up a Single Node Cluster](http://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/SingleCluster.html)\n- [Hadoop安装教程_单机/伪分布式配置_Hadoop2.6.0/Ubuntu14.04](http://www.powerxing.com/install-hadoop/)\n- [使用Docker在本地搭建Hadoop分布式集群](http://www.tashan10.com/yong-dockerda-jian-hadoopwei-fen-bu-shi-ji-qun/)\n\n---\n# MapReduce in Python\n下面我就来看Python里如何实现mapper和reducer。\n## mapper.py\nmapper要做的工作就是从`stdin`里读取数据，然后分割成`<key, value>`的pair。这里以最基础的word count为例，`key`就是指文章中拆出来的词，`value`就是指每个词的个数。mapper是不会将相同的词的个数进行统计加和的，那是reducer的工作，因此mapper的输出就是由很多行`<key> 1`组成，下面会看到程序运行实际的结果。\n\n`mapper.py`\n```python\n#!/usr/bin/env python3\n    \nimport sys\n    \n# 从stdin中获取输出信息\nfor line in sys.stdin:\n    words = line.strip().split(\" \")\n    for word in words:\n    \n        # output format: word'\\t'1\n        print(\"{0}\\t{1}\".format(word, 1))\n```\n---\n\n## reducer.py\n上面提到了，mapper只进行词汇分割，计数为1的工作，那么reducer就是用来将相同词汇的出现次数进行统计加和的工作。同mapper一样，reducer也是从`stdin`中获取输入，然后将结果输出到`stdout`。\n\n`reducer.py`\n```python\n#!/usr/bin/env python3\n    \nimport sys\n    \nlast_word = None\ntotal_count = 0\n    \nfor line in sys.stdin:\n    word, count = line.strip().split(\"\\t\")\n    count = int(count)\n    \n    # 如果当前的word不等于上一个，说明开始新的了\n    if last_word and last_word != word:\n        # 这里输出结果，相当于把结果写进stdout\n        print(\"{0}\\t{1}\".format(last_word, total_count))\n        total_count = 0\n    last_word = word\n    total_count += count\n    \n# 不要忘记最后一个word的输出\nif last_word:\n    print(\"{0}\\t{1}\".format(last_word, total_count))\n```\n---\n\n# 本地测试\n我们先来本地测试一下正确性。\n```console\nYuanMBP:src Vergil$ echo \"东 南 西 北 中 发 白\" | demo/mapper.py \n东   1\n南   1\n西   1\n北   1\n中   1\n发   1\n白   1\n```\n\n再来看一下reducer：\n```console\nYuanMBP:src Vergil$ echo \"东 南 西 北 东 中 东 发 东 白\" | demo/mapper.py | sort | demo/reducer.py \n东   4\n中   1\n北   1\n南   1\n发   1\n白   1\n西   1\n```\n\n请注意，这里我在运行mapper和reducer之间加入了一个sort，这是必须的，了解map-reduce工作原理的朋友应该都明白这里为什么有一个sort，如果不加的话，我们的东风杠就识别不了啦。我们在写mapper和reducer的时候是不需要关注它排序的问题，因为Hadoop中的map-reduce会自动进行排序。\n```console\nYuanMBP:src Vergil$ echo \"东 南 西 北 东 中 东 发 东 白\" | demo/mapper.py | demo/reducer.py \n东   1\n南   1\n西   1\n北   1\n东   1\n中   1\n东   1\n发   1\n东   1\n白   1\n```\n\n---\n# 在Hadoop上跑程序\n\n## 准备测试数据\n\n我的运行环境是在Docker上搭建的，首先我们需要先把用来测试的文章放到HDFS里\n```console\nroot@hadoop-master:~/src/demo# hdfs dfs -put words1.txt /input\nroot@hadoop-master:~/src/demo# hdfs dfs -ls /input\nFound 1 item\n-rw-r--r--   2 root supergroup        127 2017-09-30 03:57 /input/words1.txt\nroot@hadoop-master:~/src/demo#\n```\n    \n`words1.txt`\n```\nLet me write down something trivial\nsomething that is not important\nsomething that looks like bullshit\nyes that is what I want\n```\n我就随便写了几句放在`words1.txt`里，看看运行结果是否正确。\n\n---\n## 运行MapReduce\n\n用过Java版Hadoop的朋友，应该还有印象如何编译运行吧，其实就和运行Java程序的过程很像。但这里用Python来执行，就稍微有些不太一样了。首先我们需要用到一个`hadoop-streaming-2.x.x.jar`这样的一个工具，这里xx代表版本号。它的具体解释可以参考Hadoop官方给的[Document](http://hadoop.apache.org/docs/r1.2.1/streaming.html#Hadoop+Streaming)，我这里就做个简单的介绍。**Hadoop Streaming**是Hadoop提供的一个工具，可以让你以任意的可执行程序或脚本，来创建和运行MapReduce，这里官网给了一个简单的例子：\n```console\n$HADOOP_HOME/bin/hadoop  jar $HADOOP_HOME/hadoop-streaming.jar \\\n    -input myInputDirs \\\n    -output myOutputDir \\\n    -mapper /bin/cat \\\n    -reducer /bin/wc\n```\n\n---\n现在，我们来用Hadoop Streaming来运行自己的程序。\n```console\nroot@hadoop-master:~/src/demo# hadoop jar ../hadoop-streaming-2.7.2.jar \\\n> -input /input \\\n> -output /output \\\n> -mapper mapper.py \\\n> -reducer reducer.py \\\n> -file mapper.py \\\n> -file reducer.py\n```\n\n---\n这里有两点需要注意：\n- 后面的两个`-file`是必须要加的，否则程序无法顺利运行；\n- `mapper.py`和`reducer.py`要提前记得赋予它们可执行的属性。\n\n接下来，我们来验收一下程序的结果：\n```console\nroot@hadoop-master:~/src/demo# hdfs dfs -ls /output\nFound 2 items\n-rw-r--r--   2 root supergroup          0 2017-09-30 04:31 /output/_SUCCESS\n-rw-r--r--   2 root supergroup        128 2017-09-30 04:31 /output/part-00000\nroot@hadoop-master:~/src/demo# hdfs dfs -cat /output/part*\nI   1\nLet 1\nbullshit    1\ndown    1\nimportant   1\nis  2\nlike    1\nlooks   1\nme  1\nnot 1\nsomething   3\nthat    3\ntrivial 1\nwant    1\nwhat    1\nwrite   1\nyes 1\nroot@hadoop-master:~/src/demo#\n```\n\n---\n试一下多文件看看有没有问题，我将words1.txt复制出一模一样的两份，也就是现在有三份相同的输入文件，再来跑一遍试试：\n```console\nroot@hadoop-master:~/src/demo# hdfs dfs -rm -r /output\n17/09/30 04:48:37 INFO fs.TrashPolicyDefault: Namenode trash configuration: Deletion interval = 0 minutes, Emptier interval = 0 minutes.\nDeleted /output\nroot@hadoop-master:~/src/demo# ./run_script.sh /input /output mapper.py reducer.py\n    \nRunning python in Hadoop by hadoop streaming...\n```\n这里我自己做了`run_script.sh`这样子一个shell script，用来缩短执行命令的长度，不然每次都要输入那么长真的好麻烦……\n```console\nroot@hadoop-master:~/src/demo# hdfs dfs -cat /output/part*\nI   3\nLet 3\nbullshit    3\ndown    3\nimportant   3\nis  6\nlike    3\nlooks   3\nme  3\nnot 3\nsomething   9\nthat    9\ntrivial 3\nwant    3\nwhat    3\nwrite   3\nyes 3\n```\n\n看上去没有任何问题。\n\n---\n# 后记\n更多的关于Hadoop Streaming的内容，还希望大家去官网文档中查阅。例如像分配map和reduce的数量，设置partitioner，这样的参数都可以通过Hadoop Streaming来调整，还是很有意思的。\n\n在下一篇关于MapReduce的文章中我会介绍一个相比较于word count复杂一点的例子，依然是用Python和Hadoop的结合。\n\n---\n# Related Links\n- [Writing an hadoop mapreduce program in python](http://www.michael-noll.com/tutorials/writing-an-hadoop-mapreduce-program-in-python/)\n- [Hadoop Streaming Documentation](http://hadoop.apache.org/docs/r1.2.1/streaming.html#Hadoop+Streaming)","source":"_posts/Map-reduce-works-perfectly-with-Python.md","raw":"---\ntitle: 用Python在Hadoop上跑MapReduce\ndate: 2017-09-29 16:15:51\ntags:\n    - Hadoop\n    - Python\n    - Docker\n    - MapReduce\ncategories:\n    - Big Data\n---\n\n# 本文目的\n这篇文章主要会给大家介绍一下如何将Python和Hadoop结合起来工作。有接触过MapReduce的朋友都知道，Hadoop的运行环境主要是Java，一般介绍Hadoop和MapReduce的教程和书籍也都是基于Java的。因为我个人对Java并不太感冒，一直以来钟情于Python的简洁实用理念，同时又对MapReduce有兴趣，因此萌生了Python的MapReduce结合的想法。本文也是我经过Google学习他人教程，以及自己实际练习得出来的一些心得，在此分享给各位。\n\n<!--more-->\n\n---\n# 环境搭建\n首先，你需要有个Hadoop的运行环境，还有Python运行环境。本文主要目的不在分享安装环境，因此有从零开始的朋友，可以先去百度或者Google上搜一下相关教程。下面分享几个相关的教程：\n- [Hadoop: Setting up a Single Node Cluster](http://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/SingleCluster.html)\n- [Hadoop安装教程_单机/伪分布式配置_Hadoop2.6.0/Ubuntu14.04](http://www.powerxing.com/install-hadoop/)\n- [使用Docker在本地搭建Hadoop分布式集群](http://www.tashan10.com/yong-dockerda-jian-hadoopwei-fen-bu-shi-ji-qun/)\n\n---\n# MapReduce in Python\n下面我就来看Python里如何实现mapper和reducer。\n## mapper.py\nmapper要做的工作就是从`stdin`里读取数据，然后分割成`<key, value>`的pair。这里以最基础的word count为例，`key`就是指文章中拆出来的词，`value`就是指每个词的个数。mapper是不会将相同的词的个数进行统计加和的，那是reducer的工作，因此mapper的输出就是由很多行`<key> 1`组成，下面会看到程序运行实际的结果。\n\n`mapper.py`\n```python\n#!/usr/bin/env python3\n    \nimport sys\n    \n# 从stdin中获取输出信息\nfor line in sys.stdin:\n    words = line.strip().split(\" \")\n    for word in words:\n    \n        # output format: word'\\t'1\n        print(\"{0}\\t{1}\".format(word, 1))\n```\n---\n\n## reducer.py\n上面提到了，mapper只进行词汇分割，计数为1的工作，那么reducer就是用来将相同词汇的出现次数进行统计加和的工作。同mapper一样，reducer也是从`stdin`中获取输入，然后将结果输出到`stdout`。\n\n`reducer.py`\n```python\n#!/usr/bin/env python3\n    \nimport sys\n    \nlast_word = None\ntotal_count = 0\n    \nfor line in sys.stdin:\n    word, count = line.strip().split(\"\\t\")\n    count = int(count)\n    \n    # 如果当前的word不等于上一个，说明开始新的了\n    if last_word and last_word != word:\n        # 这里输出结果，相当于把结果写进stdout\n        print(\"{0}\\t{1}\".format(last_word, total_count))\n        total_count = 0\n    last_word = word\n    total_count += count\n    \n# 不要忘记最后一个word的输出\nif last_word:\n    print(\"{0}\\t{1}\".format(last_word, total_count))\n```\n---\n\n# 本地测试\n我们先来本地测试一下正确性。\n```console\nYuanMBP:src Vergil$ echo \"东 南 西 北 中 发 白\" | demo/mapper.py \n东   1\n南   1\n西   1\n北   1\n中   1\n发   1\n白   1\n```\n\n再来看一下reducer：\n```console\nYuanMBP:src Vergil$ echo \"东 南 西 北 东 中 东 发 东 白\" | demo/mapper.py | sort | demo/reducer.py \n东   4\n中   1\n北   1\n南   1\n发   1\n白   1\n西   1\n```\n\n请注意，这里我在运行mapper和reducer之间加入了一个sort，这是必须的，了解map-reduce工作原理的朋友应该都明白这里为什么有一个sort，如果不加的话，我们的东风杠就识别不了啦。我们在写mapper和reducer的时候是不需要关注它排序的问题，因为Hadoop中的map-reduce会自动进行排序。\n```console\nYuanMBP:src Vergil$ echo \"东 南 西 北 东 中 东 发 东 白\" | demo/mapper.py | demo/reducer.py \n东   1\n南   1\n西   1\n北   1\n东   1\n中   1\n东   1\n发   1\n东   1\n白   1\n```\n\n---\n# 在Hadoop上跑程序\n\n## 准备测试数据\n\n我的运行环境是在Docker上搭建的，首先我们需要先把用来测试的文章放到HDFS里\n```console\nroot@hadoop-master:~/src/demo# hdfs dfs -put words1.txt /input\nroot@hadoop-master:~/src/demo# hdfs dfs -ls /input\nFound 1 item\n-rw-r--r--   2 root supergroup        127 2017-09-30 03:57 /input/words1.txt\nroot@hadoop-master:~/src/demo#\n```\n    \n`words1.txt`\n```\nLet me write down something trivial\nsomething that is not important\nsomething that looks like bullshit\nyes that is what I want\n```\n我就随便写了几句放在`words1.txt`里，看看运行结果是否正确。\n\n---\n## 运行MapReduce\n\n用过Java版Hadoop的朋友，应该还有印象如何编译运行吧，其实就和运行Java程序的过程很像。但这里用Python来执行，就稍微有些不太一样了。首先我们需要用到一个`hadoop-streaming-2.x.x.jar`这样的一个工具，这里xx代表版本号。它的具体解释可以参考Hadoop官方给的[Document](http://hadoop.apache.org/docs/r1.2.1/streaming.html#Hadoop+Streaming)，我这里就做个简单的介绍。**Hadoop Streaming**是Hadoop提供的一个工具，可以让你以任意的可执行程序或脚本，来创建和运行MapReduce，这里官网给了一个简单的例子：\n```console\n$HADOOP_HOME/bin/hadoop  jar $HADOOP_HOME/hadoop-streaming.jar \\\n    -input myInputDirs \\\n    -output myOutputDir \\\n    -mapper /bin/cat \\\n    -reducer /bin/wc\n```\n\n---\n现在，我们来用Hadoop Streaming来运行自己的程序。\n```console\nroot@hadoop-master:~/src/demo# hadoop jar ../hadoop-streaming-2.7.2.jar \\\n> -input /input \\\n> -output /output \\\n> -mapper mapper.py \\\n> -reducer reducer.py \\\n> -file mapper.py \\\n> -file reducer.py\n```\n\n---\n这里有两点需要注意：\n- 后面的两个`-file`是必须要加的，否则程序无法顺利运行；\n- `mapper.py`和`reducer.py`要提前记得赋予它们可执行的属性。\n\n接下来，我们来验收一下程序的结果：\n```console\nroot@hadoop-master:~/src/demo# hdfs dfs -ls /output\nFound 2 items\n-rw-r--r--   2 root supergroup          0 2017-09-30 04:31 /output/_SUCCESS\n-rw-r--r--   2 root supergroup        128 2017-09-30 04:31 /output/part-00000\nroot@hadoop-master:~/src/demo# hdfs dfs -cat /output/part*\nI   1\nLet 1\nbullshit    1\ndown    1\nimportant   1\nis  2\nlike    1\nlooks   1\nme  1\nnot 1\nsomething   3\nthat    3\ntrivial 1\nwant    1\nwhat    1\nwrite   1\nyes 1\nroot@hadoop-master:~/src/demo#\n```\n\n---\n试一下多文件看看有没有问题，我将words1.txt复制出一模一样的两份，也就是现在有三份相同的输入文件，再来跑一遍试试：\n```console\nroot@hadoop-master:~/src/demo# hdfs dfs -rm -r /output\n17/09/30 04:48:37 INFO fs.TrashPolicyDefault: Namenode trash configuration: Deletion interval = 0 minutes, Emptier interval = 0 minutes.\nDeleted /output\nroot@hadoop-master:~/src/demo# ./run_script.sh /input /output mapper.py reducer.py\n    \nRunning python in Hadoop by hadoop streaming...\n```\n这里我自己做了`run_script.sh`这样子一个shell script，用来缩短执行命令的长度，不然每次都要输入那么长真的好麻烦……\n```console\nroot@hadoop-master:~/src/demo# hdfs dfs -cat /output/part*\nI   3\nLet 3\nbullshit    3\ndown    3\nimportant   3\nis  6\nlike    3\nlooks   3\nme  3\nnot 3\nsomething   9\nthat    9\ntrivial 3\nwant    3\nwhat    3\nwrite   3\nyes 3\n```\n\n看上去没有任何问题。\n\n---\n# 后记\n更多的关于Hadoop Streaming的内容，还希望大家去官网文档中查阅。例如像分配map和reduce的数量，设置partitioner，这样的参数都可以通过Hadoop Streaming来调整，还是很有意思的。\n\n在下一篇关于MapReduce的文章中我会介绍一个相比较于word count复杂一点的例子，依然是用Python和Hadoop的结合。\n\n---\n# Related Links\n- [Writing an hadoop mapreduce program in python](http://www.michael-noll.com/tutorials/writing-an-hadoop-mapreduce-program-in-python/)\n- [Hadoop Streaming Documentation](http://hadoop.apache.org/docs/r1.2.1/streaming.html#Hadoop+Streaming)","slug":"Map-reduce-works-perfectly-with-Python","published":1,"updated":"2017-10-31T23:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9os2v9y0006u8yu3k2pis4j","content":"<h1 id=\"本文目的\"><a href=\"#本文目的\" class=\"headerlink\" title=\"本文目的\"></a>本文目的</h1><p>这篇文章主要会给大家介绍一下如何将Python和Hadoop结合起来工作。有接触过MapReduce的朋友都知道，Hadoop的运行环境主要是Java，一般介绍Hadoop和MapReduce的教程和书籍也都是基于Java的。因为我个人对Java并不太感冒，一直以来钟情于Python的简洁实用理念，同时又对MapReduce有兴趣，因此萌生了Python的MapReduce结合的想法。本文也是我经过Google学习他人教程，以及自己实际练习得出来的一些心得，在此分享给各位。</p>\n<a id=\"more\"></a>\n<hr>\n<h1 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h1><p>首先，你需要有个Hadoop的运行环境，还有Python运行环境。本文主要目的不在分享安装环境，因此有从零开始的朋友，可以先去百度或者Google上搜一下相关教程。下面分享几个相关的教程：</p>\n<ul>\n<li><a href=\"http://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/SingleCluster.html\" target=\"_blank\" rel=\"external\">Hadoop: Setting up a Single Node Cluster</a></li>\n<li><a href=\"http://www.powerxing.com/install-hadoop/\" target=\"_blank\" rel=\"external\">Hadoop安装教程_单机/伪分布式配置_Hadoop2.6.0/Ubuntu14.04</a></li>\n<li><a href=\"http://www.tashan10.com/yong-dockerda-jian-hadoopwei-fen-bu-shi-ji-qun/\" target=\"_blank\" rel=\"external\">使用Docker在本地搭建Hadoop分布式集群</a></li>\n</ul>\n<hr>\n<h1 id=\"MapReduce-in-Python\"><a href=\"#MapReduce-in-Python\" class=\"headerlink\" title=\"MapReduce in Python\"></a>MapReduce in Python</h1><p>下面我就来看Python里如何实现mapper和reducer。</p>\n<h2 id=\"mapper-py\"><a href=\"#mapper-py\" class=\"headerlink\" title=\"mapper.py\"></a>mapper.py</h2><p>mapper要做的工作就是从<code>stdin</code>里读取数据，然后分割成<code>&lt;key, value&gt;</code>的pair。这里以最基础的word count为例，<code>key</code>就是指文章中拆出来的词，<code>value</code>就是指每个词的个数。mapper是不会将相同的词的个数进行统计加和的，那是reducer的工作，因此mapper的输出就是由很多行<code>&lt;key&gt; 1</code>组成，下面会看到程序运行实际的结果。</p>\n<p><code>mapper.py</code>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\"># 从stdin中获取输出信息</span></div><div class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> sys.stdin:</div><div class=\"line\">    words = line.strip().split(<span class=\"string\">\" \"</span>)</div><div class=\"line\">    <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> words:</div><div class=\"line\">    </div><div class=\"line\">        <span class=\"comment\"># output format: word'\\t'1</span></div><div class=\"line\">        print(<span class=\"string\">\"&#123;0&#125;\\t&#123;1&#125;\"</span>.format(word, <span class=\"number\">1</span>))</div></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"reducer-py\"><a href=\"#reducer-py\" class=\"headerlink\" title=\"reducer.py\"></a>reducer.py</h2><p>上面提到了，mapper只进行词汇分割，计数为1的工作，那么reducer就是用来将相同词汇的出现次数进行统计加和的工作。同mapper一样，reducer也是从<code>stdin</code>中获取输入，然后将结果输出到<code>stdout</code>。</p>\n<p><code>reducer.py</code>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\">    </div><div class=\"line\">last_word = <span class=\"keyword\">None</span></div><div class=\"line\">total_count = <span class=\"number\">0</span></div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> sys.stdin:</div><div class=\"line\">    word, count = line.strip().split(<span class=\"string\">\"\\t\"</span>)</div><div class=\"line\">    count = int(count)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\"># 如果当前的word不等于上一个，说明开始新的了</span></div><div class=\"line\">    <span class=\"keyword\">if</span> last_word <span class=\"keyword\">and</span> last_word != word:</div><div class=\"line\">        <span class=\"comment\"># 这里输出结果，相当于把结果写进stdout</span></div><div class=\"line\">        print(<span class=\"string\">\"&#123;0&#125;\\t&#123;1&#125;\"</span>.format(last_word, total_count))</div><div class=\"line\">        total_count = <span class=\"number\">0</span></div><div class=\"line\">    last_word = word</div><div class=\"line\">    total_count += count</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\"># 不要忘记最后一个word的输出</span></div><div class=\"line\"><span class=\"keyword\">if</span> last_word:</div><div class=\"line\">    print(<span class=\"string\">\"&#123;0&#125;\\t&#123;1&#125;\"</span>.format(last_word, total_count))</div></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"本地测试\"><a href=\"#本地测试\" class=\"headerlink\" title=\"本地测试\"></a>本地测试</h1><p>我们先来本地测试一下正确性。\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">YuanMBP:src Vergil$ echo \"东 南 西 北 中 发 白\" | demo/mapper.py </div><div class=\"line\">东   1</div><div class=\"line\">南   1</div><div class=\"line\">西   1</div><div class=\"line\">北   1</div><div class=\"line\">中   1</div><div class=\"line\">发   1</div><div class=\"line\">白   1</div></pre></td></tr></table></figure></p>\n<p>再来看一下reducer：\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">YuanMBP:src Vergil$ echo \"东 南 西 北 东 中 东 发 东 白\" | demo/mapper.py | sort | demo/reducer.py </div><div class=\"line\">东   4</div><div class=\"line\">中   1</div><div class=\"line\">北   1</div><div class=\"line\">南   1</div><div class=\"line\">发   1</div><div class=\"line\">白   1</div><div class=\"line\">西   1</div></pre></td></tr></table></figure></p>\n<p>请注意，这里我在运行mapper和reducer之间加入了一个sort，这是必须的，了解map-reduce工作原理的朋友应该都明白这里为什么有一个sort，如果不加的话，我们的东风杠就识别不了啦。我们在写mapper和reducer的时候是不需要关注它排序的问题，因为Hadoop中的map-reduce会自动进行排序。\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">YuanMBP:src Vergil$ echo \"东 南 西 北 东 中 东 发 东 白\" | demo/mapper.py | demo/reducer.py </div><div class=\"line\">东   1</div><div class=\"line\">南   1</div><div class=\"line\">西   1</div><div class=\"line\">北   1</div><div class=\"line\">东   1</div><div class=\"line\">中   1</div><div class=\"line\">东   1</div><div class=\"line\">发   1</div><div class=\"line\">东   1</div><div class=\"line\">白   1</div></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"在Hadoop上跑程序\"><a href=\"#在Hadoop上跑程序\" class=\"headerlink\" title=\"在Hadoop上跑程序\"></a>在Hadoop上跑程序</h1><h2 id=\"准备测试数据\"><a href=\"#准备测试数据\" class=\"headerlink\" title=\"准备测试数据\"></a>准备测试数据</h2><p>我的运行环境是在Docker上搭建的，首先我们需要先把用来测试的文章放到HDFS里\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop-master:~/src/demo# hdfs dfs -put words1.txt /input</div><div class=\"line\">root@hadoop-master:~/src/demo# hdfs dfs -ls /input</div><div class=\"line\">Found 1 item</div><div class=\"line\">-rw-r--r--   2 root supergroup        127 2017-09-30 03:57 /input/words1.txt</div><div class=\"line\">root@hadoop-master:~/src/demo#</div></pre></td></tr></table></figure></p>\n<p><code>words1.txt</code>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Let me write down something trivial</div><div class=\"line\">something that is not important</div><div class=\"line\">something that looks like bullshit</div><div class=\"line\">yes that is what I want</div></pre></td></tr></table></figure></p>\n<p>我就随便写了几句放在<code>words1.txt</code>里，看看运行结果是否正确。</p>\n<hr>\n<h2 id=\"运行MapReduce\"><a href=\"#运行MapReduce\" class=\"headerlink\" title=\"运行MapReduce\"></a>运行MapReduce</h2><p>用过Java版Hadoop的朋友，应该还有印象如何编译运行吧，其实就和运行Java程序的过程很像。但这里用Python来执行，就稍微有些不太一样了。首先我们需要用到一个<code>hadoop-streaming-2.x.x.jar</code>这样的一个工具，这里xx代表版本号。它的具体解释可以参考Hadoop官方给的<a href=\"http://hadoop.apache.org/docs/r1.2.1/streaming.html#Hadoop+Streaming\" target=\"_blank\" rel=\"external\">Document</a>，我这里就做个简单的介绍。<strong>Hadoop Streaming</strong>是Hadoop提供的一个工具，可以让你以任意的可执行程序或脚本，来创建和运行MapReduce，这里官网给了一个简单的例子：\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span>HADOOP_HOME/bin/hadoop  jar $HADOOP_HOME/hadoop-streaming.jar \\</div><div class=\"line\">    -input myInputDirs \\</div><div class=\"line\">    -output myOutputDir \\</div><div class=\"line\">    -mapper /bin/cat \\</div><div class=\"line\">    -reducer /bin/wc</div></pre></td></tr></table></figure></p>\n<hr>\n<p>现在，我们来用Hadoop Streaming来运行自己的程序。\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop-master:~/src/demo# hadoop jar ../hadoop-streaming-2.7.2.jar \\</div><div class=\"line\"><span class=\"meta\">&gt;</span> -input /input \\</div><div class=\"line\"><span class=\"meta\">&gt;</span> -output /output \\</div><div class=\"line\"><span class=\"meta\">&gt;</span> -mapper mapper.py \\</div><div class=\"line\"><span class=\"meta\">&gt;</span> -reducer reducer.py \\</div><div class=\"line\"><span class=\"meta\">&gt;</span> -file mapper.py \\</div><div class=\"line\"><span class=\"meta\">&gt;</span> -file reducer.py</div></pre></td></tr></table></figure></p>\n<hr>\n<p>这里有两点需要注意：</p>\n<ul>\n<li>后面的两个<code>-file</code>是必须要加的，否则程序无法顺利运行；</li>\n<li><code>mapper.py</code>和<code>reducer.py</code>要提前记得赋予它们可执行的属性。</li>\n</ul>\n<p>接下来，我们来验收一下程序的结果：\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop-master:~/src/demo# hdfs dfs -ls /output</div><div class=\"line\">Found 2 items</div><div class=\"line\">-rw-r--r--   2 root supergroup          0 2017-09-30 04:31 /output/_SUCCESS</div><div class=\"line\">-rw-r--r--   2 root supergroup        128 2017-09-30 04:31 /output/part-00000</div><div class=\"line\">root@hadoop-master:~/src/demo# hdfs dfs -cat /output/part*</div><div class=\"line\">I   1</div><div class=\"line\">Let 1</div><div class=\"line\">bullshit    1</div><div class=\"line\">down    1</div><div class=\"line\">important   1</div><div class=\"line\">is  2</div><div class=\"line\">like    1</div><div class=\"line\">looks   1</div><div class=\"line\">me  1</div><div class=\"line\">not 1</div><div class=\"line\">something   3</div><div class=\"line\">that    3</div><div class=\"line\">trivial 1</div><div class=\"line\">want    1</div><div class=\"line\">what    1</div><div class=\"line\">write   1</div><div class=\"line\">yes 1</div><div class=\"line\">root@hadoop-master:~/src/demo#</div></pre></td></tr></table></figure></p>\n<hr>\n<p>试一下多文件看看有没有问题，我将words1.txt复制出一模一样的两份，也就是现在有三份相同的输入文件，再来跑一遍试试：\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop-master:~/src/demo# hdfs dfs -rm -r /output</div><div class=\"line\">17/09/30 04:48:37 INFO fs.TrashPolicyDefault: Namenode trash configuration: Deletion interval = 0 minutes, Emptier interval = 0 minutes.</div><div class=\"line\">Deleted /output</div><div class=\"line\">root@hadoop-master:~/src/demo# ./run_script.sh /input /output mapper.py reducer.py</div><div class=\"line\">    </div><div class=\"line\">Running python in Hadoop by hadoop streaming...</div></pre></td></tr></table></figure></p>\n<p>这里我自己做了<code>run_script.sh</code>这样子一个shell script，用来缩短执行命令的长度，不然每次都要输入那么长真的好麻烦……\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop-master:~/src/demo# hdfs dfs -cat /output/part*</div><div class=\"line\">I   3</div><div class=\"line\">Let 3</div><div class=\"line\">bullshit    3</div><div class=\"line\">down    3</div><div class=\"line\">important   3</div><div class=\"line\">is  6</div><div class=\"line\">like    3</div><div class=\"line\">looks   3</div><div class=\"line\">me  3</div><div class=\"line\">not 3</div><div class=\"line\">something   9</div><div class=\"line\">that    9</div><div class=\"line\">trivial 3</div><div class=\"line\">want    3</div><div class=\"line\">what    3</div><div class=\"line\">write   3</div><div class=\"line\">yes 3</div></pre></td></tr></table></figure></p>\n<p>看上去没有任何问题。</p>\n<hr>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>更多的关于Hadoop Streaming的内容，还希望大家去官网文档中查阅。例如像分配map和reduce的数量，设置partitioner，这样的参数都可以通过Hadoop Streaming来调整，还是很有意思的。</p>\n<p>在下一篇关于MapReduce的文章中我会介绍一个相比较于word count复杂一点的例子，依然是用Python和Hadoop的结合。</p>\n<hr>\n<h1 id=\"Related-Links\"><a href=\"#Related-Links\" class=\"headerlink\" title=\"Related Links\"></a>Related Links</h1><ul>\n<li><a href=\"http://www.michael-noll.com/tutorials/writing-an-hadoop-mapreduce-program-in-python/\" target=\"_blank\" rel=\"external\">Writing an hadoop mapreduce program in python</a></li>\n<li><a href=\"http://hadoop.apache.org/docs/r1.2.1/streaming.html#Hadoop+Streaming\" target=\"_blank\" rel=\"external\">Hadoop Streaming Documentation</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"本文目的\"><a href=\"#本文目的\" class=\"headerlink\" title=\"本文目的\"></a>本文目的</h1><p>这篇文章主要会给大家介绍一下如何将Python和Hadoop结合起来工作。有接触过MapReduce的朋友都知道，Hadoop的运行环境主要是Java，一般介绍Hadoop和MapReduce的教程和书籍也都是基于Java的。因为我个人对Java并不太感冒，一直以来钟情于Python的简洁实用理念，同时又对MapReduce有兴趣，因此萌生了Python的MapReduce结合的想法。本文也是我经过Google学习他人教程，以及自己实际练习得出来的一些心得，在此分享给各位。</p>","more":"<hr>\n<h1 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h1><p>首先，你需要有个Hadoop的运行环境，还有Python运行环境。本文主要目的不在分享安装环境，因此有从零开始的朋友，可以先去百度或者Google上搜一下相关教程。下面分享几个相关的教程：</p>\n<ul>\n<li><a href=\"http://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/SingleCluster.html\" target=\"_blank\" rel=\"external\">Hadoop: Setting up a Single Node Cluster</a></li>\n<li><a href=\"http://www.powerxing.com/install-hadoop/\" target=\"_blank\" rel=\"external\">Hadoop安装教程_单机/伪分布式配置_Hadoop2.6.0/Ubuntu14.04</a></li>\n<li><a href=\"http://www.tashan10.com/yong-dockerda-jian-hadoopwei-fen-bu-shi-ji-qun/\" target=\"_blank\" rel=\"external\">使用Docker在本地搭建Hadoop分布式集群</a></li>\n</ul>\n<hr>\n<h1 id=\"MapReduce-in-Python\"><a href=\"#MapReduce-in-Python\" class=\"headerlink\" title=\"MapReduce in Python\"></a>MapReduce in Python</h1><p>下面我就来看Python里如何实现mapper和reducer。</p>\n<h2 id=\"mapper-py\"><a href=\"#mapper-py\" class=\"headerlink\" title=\"mapper.py\"></a>mapper.py</h2><p>mapper要做的工作就是从<code>stdin</code>里读取数据，然后分割成<code>&lt;key, value&gt;</code>的pair。这里以最基础的word count为例，<code>key</code>就是指文章中拆出来的词，<code>value</code>就是指每个词的个数。mapper是不会将相同的词的个数进行统计加和的，那是reducer的工作，因此mapper的输出就是由很多行<code>&lt;key&gt; 1</code>组成，下面会看到程序运行实际的结果。</p>\n<p><code>mapper.py</code>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\"># 从stdin中获取输出信息</span></div><div class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> sys.stdin:</div><div class=\"line\">    words = line.strip().split(<span class=\"string\">\" \"</span>)</div><div class=\"line\">    <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> words:</div><div class=\"line\">    </div><div class=\"line\">        <span class=\"comment\"># output format: word'\\t'1</span></div><div class=\"line\">        print(<span class=\"string\">\"&#123;0&#125;\\t&#123;1&#125;\"</span>.format(word, <span class=\"number\">1</span>))</div></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"reducer-py\"><a href=\"#reducer-py\" class=\"headerlink\" title=\"reducer.py\"></a>reducer.py</h2><p>上面提到了，mapper只进行词汇分割，计数为1的工作，那么reducer就是用来将相同词汇的出现次数进行统计加和的工作。同mapper一样，reducer也是从<code>stdin</code>中获取输入，然后将结果输出到<code>stdout</code>。</p>\n<p><code>reducer.py</code>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\">    </div><div class=\"line\">last_word = <span class=\"keyword\">None</span></div><div class=\"line\">total_count = <span class=\"number\">0</span></div><div class=\"line\">    </div><div class=\"line\"><span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> sys.stdin:</div><div class=\"line\">    word, count = line.strip().split(<span class=\"string\">\"\\t\"</span>)</div><div class=\"line\">    count = int(count)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\"># 如果当前的word不等于上一个，说明开始新的了</span></div><div class=\"line\">    <span class=\"keyword\">if</span> last_word <span class=\"keyword\">and</span> last_word != word:</div><div class=\"line\">        <span class=\"comment\"># 这里输出结果，相当于把结果写进stdout</span></div><div class=\"line\">        print(<span class=\"string\">\"&#123;0&#125;\\t&#123;1&#125;\"</span>.format(last_word, total_count))</div><div class=\"line\">        total_count = <span class=\"number\">0</span></div><div class=\"line\">    last_word = word</div><div class=\"line\">    total_count += count</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\"># 不要忘记最后一个word的输出</span></div><div class=\"line\"><span class=\"keyword\">if</span> last_word:</div><div class=\"line\">    print(<span class=\"string\">\"&#123;0&#125;\\t&#123;1&#125;\"</span>.format(last_word, total_count))</div></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"本地测试\"><a href=\"#本地测试\" class=\"headerlink\" title=\"本地测试\"></a>本地测试</h1><p>我们先来本地测试一下正确性。\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">YuanMBP:src Vergil$ echo \"东 南 西 北 中 发 白\" | demo/mapper.py </div><div class=\"line\">东   1</div><div class=\"line\">南   1</div><div class=\"line\">西   1</div><div class=\"line\">北   1</div><div class=\"line\">中   1</div><div class=\"line\">发   1</div><div class=\"line\">白   1</div></pre></td></tr></table></figure></p>\n<p>再来看一下reducer：\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">YuanMBP:src Vergil$ echo \"东 南 西 北 东 中 东 发 东 白\" | demo/mapper.py | sort | demo/reducer.py </div><div class=\"line\">东   4</div><div class=\"line\">中   1</div><div class=\"line\">北   1</div><div class=\"line\">南   1</div><div class=\"line\">发   1</div><div class=\"line\">白   1</div><div class=\"line\">西   1</div></pre></td></tr></table></figure></p>\n<p>请注意，这里我在运行mapper和reducer之间加入了一个sort，这是必须的，了解map-reduce工作原理的朋友应该都明白这里为什么有一个sort，如果不加的话，我们的东风杠就识别不了啦。我们在写mapper和reducer的时候是不需要关注它排序的问题，因为Hadoop中的map-reduce会自动进行排序。\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">YuanMBP:src Vergil$ echo \"东 南 西 北 东 中 东 发 东 白\" | demo/mapper.py | demo/reducer.py </div><div class=\"line\">东   1</div><div class=\"line\">南   1</div><div class=\"line\">西   1</div><div class=\"line\">北   1</div><div class=\"line\">东   1</div><div class=\"line\">中   1</div><div class=\"line\">东   1</div><div class=\"line\">发   1</div><div class=\"line\">东   1</div><div class=\"line\">白   1</div></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"在Hadoop上跑程序\"><a href=\"#在Hadoop上跑程序\" class=\"headerlink\" title=\"在Hadoop上跑程序\"></a>在Hadoop上跑程序</h1><h2 id=\"准备测试数据\"><a href=\"#准备测试数据\" class=\"headerlink\" title=\"准备测试数据\"></a>准备测试数据</h2><p>我的运行环境是在Docker上搭建的，首先我们需要先把用来测试的文章放到HDFS里\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop-master:~/src/demo# hdfs dfs -put words1.txt /input</div><div class=\"line\">root@hadoop-master:~/src/demo# hdfs dfs -ls /input</div><div class=\"line\">Found 1 item</div><div class=\"line\">-rw-r--r--   2 root supergroup        127 2017-09-30 03:57 /input/words1.txt</div><div class=\"line\">root@hadoop-master:~/src/demo#</div></pre></td></tr></table></figure></p>\n<p><code>words1.txt</code>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Let me write down something trivial</div><div class=\"line\">something that is not important</div><div class=\"line\">something that looks like bullshit</div><div class=\"line\">yes that is what I want</div></pre></td></tr></table></figure></p>\n<p>我就随便写了几句放在<code>words1.txt</code>里，看看运行结果是否正确。</p>\n<hr>\n<h2 id=\"运行MapReduce\"><a href=\"#运行MapReduce\" class=\"headerlink\" title=\"运行MapReduce\"></a>运行MapReduce</h2><p>用过Java版Hadoop的朋友，应该还有印象如何编译运行吧，其实就和运行Java程序的过程很像。但这里用Python来执行，就稍微有些不太一样了。首先我们需要用到一个<code>hadoop-streaming-2.x.x.jar</code>这样的一个工具，这里xx代表版本号。它的具体解释可以参考Hadoop官方给的<a href=\"http://hadoop.apache.org/docs/r1.2.1/streaming.html#Hadoop+Streaming\" target=\"_blank\" rel=\"external\">Document</a>，我这里就做个简单的介绍。<strong>Hadoop Streaming</strong>是Hadoop提供的一个工具，可以让你以任意的可执行程序或脚本，来创建和运行MapReduce，这里官网给了一个简单的例子：\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span>HADOOP_HOME/bin/hadoop  jar $HADOOP_HOME/hadoop-streaming.jar \\</div><div class=\"line\">    -input myInputDirs \\</div><div class=\"line\">    -output myOutputDir \\</div><div class=\"line\">    -mapper /bin/cat \\</div><div class=\"line\">    -reducer /bin/wc</div></pre></td></tr></table></figure></p>\n<hr>\n<p>现在，我们来用Hadoop Streaming来运行自己的程序。\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop-master:~/src/demo# hadoop jar ../hadoop-streaming-2.7.2.jar \\</div><div class=\"line\"><span class=\"meta\">&gt;</span> -input /input \\</div><div class=\"line\"><span class=\"meta\">&gt;</span> -output /output \\</div><div class=\"line\"><span class=\"meta\">&gt;</span> -mapper mapper.py \\</div><div class=\"line\"><span class=\"meta\">&gt;</span> -reducer reducer.py \\</div><div class=\"line\"><span class=\"meta\">&gt;</span> -file mapper.py \\</div><div class=\"line\"><span class=\"meta\">&gt;</span> -file reducer.py</div></pre></td></tr></table></figure></p>\n<hr>\n<p>这里有两点需要注意：</p>\n<ul>\n<li>后面的两个<code>-file</code>是必须要加的，否则程序无法顺利运行；</li>\n<li><code>mapper.py</code>和<code>reducer.py</code>要提前记得赋予它们可执行的属性。</li>\n</ul>\n<p>接下来，我们来验收一下程序的结果：\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop-master:~/src/demo# hdfs dfs -ls /output</div><div class=\"line\">Found 2 items</div><div class=\"line\">-rw-r--r--   2 root supergroup          0 2017-09-30 04:31 /output/_SUCCESS</div><div class=\"line\">-rw-r--r--   2 root supergroup        128 2017-09-30 04:31 /output/part-00000</div><div class=\"line\">root@hadoop-master:~/src/demo# hdfs dfs -cat /output/part*</div><div class=\"line\">I   1</div><div class=\"line\">Let 1</div><div class=\"line\">bullshit    1</div><div class=\"line\">down    1</div><div class=\"line\">important   1</div><div class=\"line\">is  2</div><div class=\"line\">like    1</div><div class=\"line\">looks   1</div><div class=\"line\">me  1</div><div class=\"line\">not 1</div><div class=\"line\">something   3</div><div class=\"line\">that    3</div><div class=\"line\">trivial 1</div><div class=\"line\">want    1</div><div class=\"line\">what    1</div><div class=\"line\">write   1</div><div class=\"line\">yes 1</div><div class=\"line\">root@hadoop-master:~/src/demo#</div></pre></td></tr></table></figure></p>\n<hr>\n<p>试一下多文件看看有没有问题，我将words1.txt复制出一模一样的两份，也就是现在有三份相同的输入文件，再来跑一遍试试：\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop-master:~/src/demo# hdfs dfs -rm -r /output</div><div class=\"line\">17/09/30 04:48:37 INFO fs.TrashPolicyDefault: Namenode trash configuration: Deletion interval = 0 minutes, Emptier interval = 0 minutes.</div><div class=\"line\">Deleted /output</div><div class=\"line\">root@hadoop-master:~/src/demo# ./run_script.sh /input /output mapper.py reducer.py</div><div class=\"line\">    </div><div class=\"line\">Running python in Hadoop by hadoop streaming...</div></pre></td></tr></table></figure></p>\n<p>这里我自己做了<code>run_script.sh</code>这样子一个shell script，用来缩短执行命令的长度，不然每次都要输入那么长真的好麻烦……\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@hadoop-master:~/src/demo# hdfs dfs -cat /output/part*</div><div class=\"line\">I   3</div><div class=\"line\">Let 3</div><div class=\"line\">bullshit    3</div><div class=\"line\">down    3</div><div class=\"line\">important   3</div><div class=\"line\">is  6</div><div class=\"line\">like    3</div><div class=\"line\">looks   3</div><div class=\"line\">me  3</div><div class=\"line\">not 3</div><div class=\"line\">something   9</div><div class=\"line\">that    9</div><div class=\"line\">trivial 3</div><div class=\"line\">want    3</div><div class=\"line\">what    3</div><div class=\"line\">write   3</div><div class=\"line\">yes 3</div></pre></td></tr></table></figure></p>\n<p>看上去没有任何问题。</p>\n<hr>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>更多的关于Hadoop Streaming的内容，还希望大家去官网文档中查阅。例如像分配map和reduce的数量，设置partitioner，这样的参数都可以通过Hadoop Streaming来调整，还是很有意思的。</p>\n<p>在下一篇关于MapReduce的文章中我会介绍一个相比较于word count复杂一点的例子，依然是用Python和Hadoop的结合。</p>\n<hr>\n<h1 id=\"Related-Links\"><a href=\"#Related-Links\" class=\"headerlink\" title=\"Related Links\"></a>Related Links</h1><ul>\n<li><a href=\"http://www.michael-noll.com/tutorials/writing-an-hadoop-mapreduce-program-in-python/\" target=\"_blank\" rel=\"external\">Writing an hadoop mapreduce program in python</a></li>\n<li><a href=\"http://hadoop.apache.org/docs/r1.2.1/streaming.html#Hadoop+Streaming\" target=\"_blank\" rel=\"external\">Hadoop Streaming Documentation</a></li>\n</ul>"},{"title":"Migrated from Heroku to Netlify","date":"2017-09-29T00:25:25.000Z","_content":"\n之前学习ruby on rails的时候，开始接触的Heroku。这次部署个人博客，想着Heroku应该是个不错的选择吧，但试用了几天的Heroku之后，我决定还是转到其他地方部署我的blog，为什么呢？原因有二：\n\n1. 免费的Heroku App，如果搁置时间长了一直无人访问的话，再次访问是需要一定时间等待激活的，就像是电脑睡眠了等着叫醒一样。付费的话太贵，对于只是搭载个人博客而言不太划算；\n2. Heroku服务器是在美国和欧洲，而且一个App只能存在在某一个区域，不可变。所以对于国内的朋友，登录我的博客有时会有不小的延迟，虽然对于一个静态网站，本来也无需很快的响应速度，但配合第一条，这个时间有时真的让人无语……\n\n<!--more-->\n\n那之所以选择Netlify也是有两个原因：\n\n1. 不存在Heroku的第一个问题；\n2. 静态内容部署采用的是global CDN方式，这样用户登录博客的时候会根据用户所在地选取最近的节点获取信息。\n\n除了这两点以外，Netlify的设置界面也做得十分简洁易用，相比Heroku而言，甚至连部署都更加简单，除了利用git部署，还可以直接把生成好的静态网页文件夹拖动到一个部署框内\n\n![drag_deploy](/images/drag_deploy.png)","source":"_posts/Netlify.md","raw":"---\ntitle: Migrated from Heroku to Netlify\ndate: 2017-09-28 17:25:25\ntags:\n    - Netlify\n    - migrate\n    - Heroku\n    - static site\ncategories:\n    - general\n---\n\n之前学习ruby on rails的时候，开始接触的Heroku。这次部署个人博客，想着Heroku应该是个不错的选择吧，但试用了几天的Heroku之后，我决定还是转到其他地方部署我的blog，为什么呢？原因有二：\n\n1. 免费的Heroku App，如果搁置时间长了一直无人访问的话，再次访问是需要一定时间等待激活的，就像是电脑睡眠了等着叫醒一样。付费的话太贵，对于只是搭载个人博客而言不太划算；\n2. Heroku服务器是在美国和欧洲，而且一个App只能存在在某一个区域，不可变。所以对于国内的朋友，登录我的博客有时会有不小的延迟，虽然对于一个静态网站，本来也无需很快的响应速度，但配合第一条，这个时间有时真的让人无语……\n\n<!--more-->\n\n那之所以选择Netlify也是有两个原因：\n\n1. 不存在Heroku的第一个问题；\n2. 静态内容部署采用的是global CDN方式，这样用户登录博客的时候会根据用户所在地选取最近的节点获取信息。\n\n除了这两点以外，Netlify的设置界面也做得十分简洁易用，相比Heroku而言，甚至连部署都更加简单，除了利用git部署，还可以直接把生成好的静态网页文件夹拖动到一个部署框内\n\n![drag_deploy](/images/drag_deploy.png)","slug":"Netlify","published":1,"updated":"2017-10-05T00:16:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9os2va00008u8yuycpuxdoq","content":"<p>之前学习ruby on rails的时候，开始接触的Heroku。这次部署个人博客，想着Heroku应该是个不错的选择吧，但试用了几天的Heroku之后，我决定还是转到其他地方部署我的blog，为什么呢？原因有二：</p>\n<ol>\n<li>免费的Heroku App，如果搁置时间长了一直无人访问的话，再次访问是需要一定时间等待激活的，就像是电脑睡眠了等着叫醒一样。付费的话太贵，对于只是搭载个人博客而言不太划算；</li>\n<li>Heroku服务器是在美国和欧洲，而且一个App只能存在在某一个区域，不可变。所以对于国内的朋友，登录我的博客有时会有不小的延迟，虽然对于一个静态网站，本来也无需很快的响应速度，但配合第一条，这个时间有时真的让人无语……</li>\n</ol>\n<a id=\"more\"></a>\n<p>那之所以选择Netlify也是有两个原因：</p>\n<ol>\n<li>不存在Heroku的第一个问题；</li>\n<li>静态内容部署采用的是global CDN方式，这样用户登录博客的时候会根据用户所在地选取最近的节点获取信息。</li>\n</ol>\n<p>除了这两点以外，Netlify的设置界面也做得十分简洁易用，相比Heroku而言，甚至连部署都更加简单，除了利用git部署，还可以直接把生成好的静态网页文件夹拖动到一个部署框内</p>\n<p><img src=\"/images/drag_deploy.png\" alt=\"drag_deploy\"></p>\n","site":{"data":{}},"excerpt":"<p>之前学习ruby on rails的时候，开始接触的Heroku。这次部署个人博客，想着Heroku应该是个不错的选择吧，但试用了几天的Heroku之后，我决定还是转到其他地方部署我的blog，为什么呢？原因有二：</p>\n<ol>\n<li>免费的Heroku App，如果搁置时间长了一直无人访问的话，再次访问是需要一定时间等待激活的，就像是电脑睡眠了等着叫醒一样。付费的话太贵，对于只是搭载个人博客而言不太划算；</li>\n<li>Heroku服务器是在美国和欧洲，而且一个App只能存在在某一个区域，不可变。所以对于国内的朋友，登录我的博客有时会有不小的延迟，虽然对于一个静态网站，本来也无需很快的响应速度，但配合第一条，这个时间有时真的让人无语……</li>\n</ol>","more":"<p>那之所以选择Netlify也是有两个原因：</p>\n<ol>\n<li>不存在Heroku的第一个问题；</li>\n<li>静态内容部署采用的是global CDN方式，这样用户登录博客的时候会根据用户所在地选取最近的节点获取信息。</li>\n</ol>\n<p>除了这两点以外，Netlify的设置界面也做得十分简洁易用，相比Heroku而言，甚至连部署都更加简单，除了利用git部署，还可以直接把生成好的静态网页文件夹拖动到一个部署框内</p>\n<p><img src=\"/images/drag_deploy.png\" alt=\"drag_deploy\"></p>"},{"title":"Selenium和BeautifulSoup的简单应用：爬取Pythonbooks.org","date":"2017-11-06T22:23:06.000Z","_content":"\n使用Python是个很有意思的体验，语法相对简单，各种包的支持也非常到位，因此无论用Python解决什么问题，都觉得弹指间可以让其灰飞烟灭。作为一个工具，一种编程语言，在帮助不同人群实现各种有趣的小目标这点上，Python真的是无出其右。\n\n# 本文目的\nPython中有一种很好玩的应用，就是爬虫，简单说就是通过它，用户可以抓取网页上的信息。比如，在本篇文章中，我就将介绍自己爬取Pythonbooks网站的过程，以此来让各位对爬虫有个大概的认识，并且描述过程中我也会顺带介绍一下Selenium和BeautifulSoup两个爬虫中常用包的用法。\n\n<!--more-->\n\n在Python的学习过程中，我相信每一位“Pythoner”都会经历这样一个过程：市面上这么多本Python的书籍和教程，究竟哪一个才是最好的呢？国外有个叫*Dibya Chakravorty*的哥们在当初学习Python的时候也思考到这个问题，于是他就做了一个网站，`Pythonbooks.org`，专门来统计不同应用领域下的Python书籍，以及它们的评分，评分是根据书的销售情况来计算的。所以今天我就用爬虫的方式来带各位看一下他网站上是怎么说的。\n\n---\n# 环境需求\n我是在Python3下运行的爬虫，用到的包就两个：`Selenium`和`BeautifulSoup`，安装最新版就可以。\n\n下面我们先来看一下这两个包究竟都是做什么的，为什么我会用到它们。\n\n---\n# Selenium和BeautifulSoup\n打开Selenium官网，第一句话就是 _Selenium automates browsers._ 。没了，就这一句，就说明了Selenium的作用，它就是用来模拟操作浏览器的工具，通过API，用户可以用代码来操作浏览器上网页的跳转，关闭，填写表单等操作。\n\n那BeautifulSoup的作用呢？以下引用Wikipedia：\n> Beautiful Soup is a Python package for parsing HTML and XML documents (including having malformed markup, i.e. non-closed tags, so named after tag soup). It creates a parse tree for parsed pages that can be used to extract data from HTML, which is useful for web scraping.\n\n所以BeautifulSoup的作用就是用来从HTML和XML等文件中提取所需信息。BeautifulSoup实际上是bs4模块的一个子模块，bs4的作用极其强大，可以针对各种内容分割和获取信息，BeautifulSoup是其专门针对HTML和XML的。因为本文只用到BeautifulSoup，因此其他的模块内容就暂不介绍了，有兴趣的朋友可以自行查阅。\n\n简单介绍两个工具包之后，接下来让我们开始网站的爬取工作吧。\n\n---\n# 网站爬取\n\n在正式爬取之前，我们还有一个问题需要解决，就是这个网站的规模和动态程度，如果只是纯静态网页，而且只要爬取一个页面，那其实很容易。或者如果只要爬取3、5个网页，那我们完全可以手动跳转每个网页然后运行一遍程序，也不过就运行3、5遍而已，但当网页数量比较多的时候，这么不自动化的办法就显得很麻烦。\n\n![website](/images/crawl/website.png)\n\n![menu](/images/crawl/menu.png)\n\n这个网站上已经针对不同领域，为用户区分好了所有的Python书籍归属种类。这点真的非常方便，这样我就只需要按照他网站给出的分类分别爬取下来就可以了，但这里种类的繁多，一个网页一个网页的手动跳转就很麻烦了，所以这里就需要Selenium来模拟鼠标的点击操作，进行网页的跳转，然后用BS爬取内容。这就是整个爬取过程的初步思考。\n\n---\n## 初始化webdriver\n\n```python\ndef init_driver():\n    driver = webdriver.Firefox()\n    # driver.wait = WebDriverWait(driver, 5)\n    return driver\n```\n\n用Selenium来模拟浏览器的各种行为，就需要先进行webdriver的初始化，如上面的代码所示。中间注释掉的那一行可加可不加，它的作用主要就是考虑到有些网页是动态呈现内容，在输入网址之后加载网页到完全加载完毕可能需要等待一段时间，WebDriverWait就是用来告诉driver可以考虑的等待时间范围。一般来说都会搭配该类下的unitil、until_not方法和expected_conditions使用，本文用不到这些内容，所以就不深讲了，有兴趣的朋友可以看[这里](https://huilansame.github.io/huilansame.github.io/archivers/sleep-implicitlywait-wait)\n\n---\n## 爬取分类\n从这里开始，我们就要正式爬取网站内容了。首先需要先把所有的分类获取，这样也方便我们最后整理信息，无论是以哪种方式存储。\n\n```python\nurl = \"http://pythonbooks.org/\"\nmenu = [\"Intermediate\", \"Topical\", \"Others\"]\ncategories = {'Beginner': 'http://pythonbooks.org/for-programming-beginners'}\n    \ndef crawl_category(driver, url, categories, menu):\n    driver.get(url)\n    for m in menu:\n        sub_menus = {}\n        driver.find_element_by_link_text(m).click()\n        \n        # 停顿一下以等待下级菜单的弹出\n        time.sleep(0.2)\n        try:\n            sub_menu_block = driver.find_element_by_xpath(\"//li[@class='dropdown open']\")\n            sub_menu_name = sub_menu_block.find_element_by_tag_name(\"ul\")\n            for sub_menu, sub_menu_link in zip(sub_menu_name.text.split('\\n'), sub_menu_name.find_elements_by_css_selector('a')):\n                sub_menus[sub_menu] = sub_menu_link.get_attribute('href')\n        except NoSuchElementException:\n            pass\n            \n        categories[m] = sub_menus\n```\n\n这里有细心的朋友可能看到我一开始给了一个categories的字典变量，里面有内容，而不是空的。这里之所以这样做，是因为在网页上显示的四个总分类中，只有Beginner是没有下级菜单的，所以这里就单独处理一下。\n\n代码中`driver.find_element_by_xpath(\"//li[@class='dropdown open']\")`，这句就是获得了弹出的下级菜单中的内容。具体的对照请看下图：\n\n![crawl_menu](/images/crawl/crawl_menu.png)\n\n`for`循环中，两个遍历的变量，前者是获取的分类的string值，后者是对应的链接地址。我将它们都存进一个字典中，这样在下面爬取内容的时候，只需要对该字典遍历一遍就可以了。\n\n---\n## 爬取书籍信息\n上面我们已经将书籍分类都汇总好了，下面就开始挨个网页的爬取书籍的信息。这里书籍的信息我主要就爬取了五个：标题，作者，出版日期，分数，和封面图像。为了存储和打印方便，我就讲书籍信息封装成一个类，如下所示：\n\n```python\nclass BookInfo():\n    def __init__(self, title, author, score, pub_date, href):\n        self.title = title\n        self.author = author\n        self.score = score\n        self.pub_date = pub_date\n        self.href = href\n        \n    def __str__(self):\n        return \"Book '{}' written by {}, {}. Popularity score: {}\".format(self.title, self.author, self.pub_date, self.score)\n```\n\n接下来就是对页面的爬取工作，先贴代码：\n\n```python\ndef crawl_book_info(driver, url):\n    driver.get(url)\n    html = driver.page_source\n    \n    # 等待网页加载分数\n    time.sleep(2)\n    \n    soup = BeautifulSoup(html, 'html.parser')\n    \n    book_blocks = soup.find('div', id='result-content')\n    \n    book_block_list = []\n    for book_block in book_blocks.find_all(class_='row book-wrapper-row'):\n        book_block_list.append(book_block)\n    \n    book_list = []\n    scores = driver.find_elements_by_xpath(\"//div[@class='bar']\")\n    for book, score in zip(book_block_list, scores):\n        title = book.find('h2').string\n        pub_date = book.find('span', class_=\"publication-date\").string.strip()\n        author = book.find('h3').string.strip()[3:]\n        href = book.find('img')['src']\n        book_list.append(BookInfo(title, author, score.text, pub_date, href))\n        \n    return book_list\n```\n\n内容比较多，我们一点点来看。首先我们看看每个字段的位置。\n\n![crawl_book](/images/crawl/crawl_book.png)\n\n我在一开始做这部分的时候是想用BS就可以了，因为在HTML中各元素的位置一目了然，爬取十分方便。但后来发现分数这一项，死活爬不下来，每次用BS去找这一块，返回的都是空。猜测可能是分数是动态生成的关系，因此BS抓取不到，具体内在原因没有去详细了解，如果有大神知道是怎么回事，还希望不吝赐教。后来我实在没有办法，就只好改用Selenium来抓取，`driver.find_elements_by_xpath(\"//div[@class='bar']\")`。正因为分数是动态生成，所以在加载网页之后需要给一个延迟，等一下分数的刷新。分数和书籍是一一对应的，所以在`for`循环中用`zip`对两者一起进行协同遍历就可以了。\n\n---\n# 存储书籍信息\n\n我们已经将书籍信息全部抓取下来，下面就是要考虑如何存储的问题。我这里是将所有的书按照分类（如果有第二级分类，就按照第二级）存储到一个markdown文件里。markdown最大的有点是，很方便转成html文件，这样既利于存储也利于展示。代码如下，因为这部分比较简单，我想就不用解释太多了。\n\n```python\ndef book_save(books_list, cat, sub_cat=None):\n    \n    # 如果存在二级分类，就把一级二级拼起来作为文件名\n    title = str(cat) + '-' + str(sub_cat) if sub_cat else str(cat)\n    \n    with open('../Pythonbooks-' + title + '.md', 'w') as file:\n        if not sub_cat:\n            file.write(\"# {}\\n\\n\".format(cat))\n        else:\n            file.write(\"# {} - {}\\n\\n\".format(cat, sub_cat))\n        num = 1\n        for book in books_list:\n            file.write(\"## {}. {}\\n\".format(num, book.title))\n            file.write(\"![{}_cover]({})\\n\\n\".format(book.title, book.href))\n            file.write(\"Author: {}\\n\\n\".format(book.author))\n            file.write(\"{}\\n\\n\".format(book.pub_date))\n            file.write(\"**Popularity score: {}**\\n\\n\".format(book.score))\n            file.write(\"------------\\n\")\n            num += 1\n```\n\n---\n# 主函数：功能串联\n\n主函数主要就是将各个部分串联起来，具体代码如下：\n\n```python\nif __name__ == \"__main__\":\n    url = \"http://pythonbooks.org/\"\n    menu = [\"Intermediate\", \"Topical\", \"Others\"]\n    categories = {'Beginner': 'http://pythonbooks.org/for-programming-beginners'}\n    \n    driver = init_driver()\n    crawl_category(driver, url, categories, menu)\n    \n    all_books = {}\n    \n    for key, value in categories.items():\n    \n        # 如果一级分类的value是字典的话，那就说明还存在二级分类\n        if key not in all_books and not isinstance(value, str):\n            all_books[key] = {}\n            \n        try:\n            for k, v in value.items():\n                book_list = crawl_book_info(driver, v)\n                all_books[key][k] = book_list\n                book_save(book_list, key, sub_cat=k)\n        except:\n            book_list = crawl_book_info(driver, value)\n            all_books[key] = book_list\n            book_save(book_list, key)\n            \n    driver.quit()\n```\n\n在所有的分类中，只有`Beginner`是没有二级分类的，因此需要对它进行单独处理。对应到代码中，就是except下面的内容。\n\n我在主函数里还设置了一个`all_books`的变量，但其实并没有用到。因为一开始我本打算先存到一个字典变量中在，再对该变量进行遍历，一个一个将书籍信息存到文件中。后来发现其实并不需要，完全可以边爬取边存。\n\n好了，所有的爬取内容就都结束了，当你运行程序之后就会看到Firfox浏览器自动弹出，然后逐个页面的自己跳转，最后浏览器关闭的时候，你也就收获了一大堆的md文件。\n![md_files](/images/crawl/md_files.png)\n\nmd的内容如下图所示：\n![md_file](/images/crawl/md_file.png)\n\n将md渲染成HTML后在网页中显示是这样的：\n![md_result](/images/crawl/md_result.png)\n\n---\n# 结语\n相对来说，这次的爬取任务很简单，因为网站没有反爬机制。其实在爬取过程中，最难的，最体现斗智斗勇的地方，就是反爬与反反爬，这方面我不是很了解。因为一般用到爬虫的时候都是确实切身需要的时候，并非为了技术而去钻研，所以大部分时候爬的都是一些明面上的可搜集的数据。网上关于Python爬虫的介绍和例子其实有很多很多，现如今，除了数据分析，机器学习这部分，恐怕大多数人都是因为爬虫的趣味性和实用性在学Python吧。\n\n在本文的最后，我给出了几个很有帮助的链接，对于想要学习Selenium和BeautifulSoup的朋友，值得一看。\n\n---\n# Related Links\n1. [Python Selenium——一定要会用的Selenium的等待，三种等待方式解读](https://huilansame.github.io/huilansame.github.io/archivers/sleep-implicitlywait-wait)\n2. [selenium + python 中文文档](https://python-selenium-zh.readthedocs.io/zh_CN/latest/)\n3. [Beautiful Soup 4.2.0 中文文档](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html)\n4. [Beautiful Soup 的用法](http://wiki.jikexueyuan.com/project/python-crawler-guide/beautiful-soup.html)\n5. [Python爬虫利器五之Selenium的用法](http://cuiqingcai.com/2599.html)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Python-Books-Crawler.md","raw":"---\ntitle: Selenium和BeautifulSoup的简单应用：爬取Pythonbooks.org\ndate: 2017-11-06 14:23:06\ntags:\n    - Python\n    - Selenium\n    - BeautifulSoup\n    - crawler\ncategories:\n    - Web Application\n---\n\n使用Python是个很有意思的体验，语法相对简单，各种包的支持也非常到位，因此无论用Python解决什么问题，都觉得弹指间可以让其灰飞烟灭。作为一个工具，一种编程语言，在帮助不同人群实现各种有趣的小目标这点上，Python真的是无出其右。\n\n# 本文目的\nPython中有一种很好玩的应用，就是爬虫，简单说就是通过它，用户可以抓取网页上的信息。比如，在本篇文章中，我就将介绍自己爬取Pythonbooks网站的过程，以此来让各位对爬虫有个大概的认识，并且描述过程中我也会顺带介绍一下Selenium和BeautifulSoup两个爬虫中常用包的用法。\n\n<!--more-->\n\n在Python的学习过程中，我相信每一位“Pythoner”都会经历这样一个过程：市面上这么多本Python的书籍和教程，究竟哪一个才是最好的呢？国外有个叫*Dibya Chakravorty*的哥们在当初学习Python的时候也思考到这个问题，于是他就做了一个网站，`Pythonbooks.org`，专门来统计不同应用领域下的Python书籍，以及它们的评分，评分是根据书的销售情况来计算的。所以今天我就用爬虫的方式来带各位看一下他网站上是怎么说的。\n\n---\n# 环境需求\n我是在Python3下运行的爬虫，用到的包就两个：`Selenium`和`BeautifulSoup`，安装最新版就可以。\n\n下面我们先来看一下这两个包究竟都是做什么的，为什么我会用到它们。\n\n---\n# Selenium和BeautifulSoup\n打开Selenium官网，第一句话就是 _Selenium automates browsers._ 。没了，就这一句，就说明了Selenium的作用，它就是用来模拟操作浏览器的工具，通过API，用户可以用代码来操作浏览器上网页的跳转，关闭，填写表单等操作。\n\n那BeautifulSoup的作用呢？以下引用Wikipedia：\n> Beautiful Soup is a Python package for parsing HTML and XML documents (including having malformed markup, i.e. non-closed tags, so named after tag soup). It creates a parse tree for parsed pages that can be used to extract data from HTML, which is useful for web scraping.\n\n所以BeautifulSoup的作用就是用来从HTML和XML等文件中提取所需信息。BeautifulSoup实际上是bs4模块的一个子模块，bs4的作用极其强大，可以针对各种内容分割和获取信息，BeautifulSoup是其专门针对HTML和XML的。因为本文只用到BeautifulSoup，因此其他的模块内容就暂不介绍了，有兴趣的朋友可以自行查阅。\n\n简单介绍两个工具包之后，接下来让我们开始网站的爬取工作吧。\n\n---\n# 网站爬取\n\n在正式爬取之前，我们还有一个问题需要解决，就是这个网站的规模和动态程度，如果只是纯静态网页，而且只要爬取一个页面，那其实很容易。或者如果只要爬取3、5个网页，那我们完全可以手动跳转每个网页然后运行一遍程序，也不过就运行3、5遍而已，但当网页数量比较多的时候，这么不自动化的办法就显得很麻烦。\n\n![website](/images/crawl/website.png)\n\n![menu](/images/crawl/menu.png)\n\n这个网站上已经针对不同领域，为用户区分好了所有的Python书籍归属种类。这点真的非常方便，这样我就只需要按照他网站给出的分类分别爬取下来就可以了，但这里种类的繁多，一个网页一个网页的手动跳转就很麻烦了，所以这里就需要Selenium来模拟鼠标的点击操作，进行网页的跳转，然后用BS爬取内容。这就是整个爬取过程的初步思考。\n\n---\n## 初始化webdriver\n\n```python\ndef init_driver():\n    driver = webdriver.Firefox()\n    # driver.wait = WebDriverWait(driver, 5)\n    return driver\n```\n\n用Selenium来模拟浏览器的各种行为，就需要先进行webdriver的初始化，如上面的代码所示。中间注释掉的那一行可加可不加，它的作用主要就是考虑到有些网页是动态呈现内容，在输入网址之后加载网页到完全加载完毕可能需要等待一段时间，WebDriverWait就是用来告诉driver可以考虑的等待时间范围。一般来说都会搭配该类下的unitil、until_not方法和expected_conditions使用，本文用不到这些内容，所以就不深讲了，有兴趣的朋友可以看[这里](https://huilansame.github.io/huilansame.github.io/archivers/sleep-implicitlywait-wait)\n\n---\n## 爬取分类\n从这里开始，我们就要正式爬取网站内容了。首先需要先把所有的分类获取，这样也方便我们最后整理信息，无论是以哪种方式存储。\n\n```python\nurl = \"http://pythonbooks.org/\"\nmenu = [\"Intermediate\", \"Topical\", \"Others\"]\ncategories = {'Beginner': 'http://pythonbooks.org/for-programming-beginners'}\n    \ndef crawl_category(driver, url, categories, menu):\n    driver.get(url)\n    for m in menu:\n        sub_menus = {}\n        driver.find_element_by_link_text(m).click()\n        \n        # 停顿一下以等待下级菜单的弹出\n        time.sleep(0.2)\n        try:\n            sub_menu_block = driver.find_element_by_xpath(\"//li[@class='dropdown open']\")\n            sub_menu_name = sub_menu_block.find_element_by_tag_name(\"ul\")\n            for sub_menu, sub_menu_link in zip(sub_menu_name.text.split('\\n'), sub_menu_name.find_elements_by_css_selector('a')):\n                sub_menus[sub_menu] = sub_menu_link.get_attribute('href')\n        except NoSuchElementException:\n            pass\n            \n        categories[m] = sub_menus\n```\n\n这里有细心的朋友可能看到我一开始给了一个categories的字典变量，里面有内容，而不是空的。这里之所以这样做，是因为在网页上显示的四个总分类中，只有Beginner是没有下级菜单的，所以这里就单独处理一下。\n\n代码中`driver.find_element_by_xpath(\"//li[@class='dropdown open']\")`，这句就是获得了弹出的下级菜单中的内容。具体的对照请看下图：\n\n![crawl_menu](/images/crawl/crawl_menu.png)\n\n`for`循环中，两个遍历的变量，前者是获取的分类的string值，后者是对应的链接地址。我将它们都存进一个字典中，这样在下面爬取内容的时候，只需要对该字典遍历一遍就可以了。\n\n---\n## 爬取书籍信息\n上面我们已经将书籍分类都汇总好了，下面就开始挨个网页的爬取书籍的信息。这里书籍的信息我主要就爬取了五个：标题，作者，出版日期，分数，和封面图像。为了存储和打印方便，我就讲书籍信息封装成一个类，如下所示：\n\n```python\nclass BookInfo():\n    def __init__(self, title, author, score, pub_date, href):\n        self.title = title\n        self.author = author\n        self.score = score\n        self.pub_date = pub_date\n        self.href = href\n        \n    def __str__(self):\n        return \"Book '{}' written by {}, {}. Popularity score: {}\".format(self.title, self.author, self.pub_date, self.score)\n```\n\n接下来就是对页面的爬取工作，先贴代码：\n\n```python\ndef crawl_book_info(driver, url):\n    driver.get(url)\n    html = driver.page_source\n    \n    # 等待网页加载分数\n    time.sleep(2)\n    \n    soup = BeautifulSoup(html, 'html.parser')\n    \n    book_blocks = soup.find('div', id='result-content')\n    \n    book_block_list = []\n    for book_block in book_blocks.find_all(class_='row book-wrapper-row'):\n        book_block_list.append(book_block)\n    \n    book_list = []\n    scores = driver.find_elements_by_xpath(\"//div[@class='bar']\")\n    for book, score in zip(book_block_list, scores):\n        title = book.find('h2').string\n        pub_date = book.find('span', class_=\"publication-date\").string.strip()\n        author = book.find('h3').string.strip()[3:]\n        href = book.find('img')['src']\n        book_list.append(BookInfo(title, author, score.text, pub_date, href))\n        \n    return book_list\n```\n\n内容比较多，我们一点点来看。首先我们看看每个字段的位置。\n\n![crawl_book](/images/crawl/crawl_book.png)\n\n我在一开始做这部分的时候是想用BS就可以了，因为在HTML中各元素的位置一目了然，爬取十分方便。但后来发现分数这一项，死活爬不下来，每次用BS去找这一块，返回的都是空。猜测可能是分数是动态生成的关系，因此BS抓取不到，具体内在原因没有去详细了解，如果有大神知道是怎么回事，还希望不吝赐教。后来我实在没有办法，就只好改用Selenium来抓取，`driver.find_elements_by_xpath(\"//div[@class='bar']\")`。正因为分数是动态生成，所以在加载网页之后需要给一个延迟，等一下分数的刷新。分数和书籍是一一对应的，所以在`for`循环中用`zip`对两者一起进行协同遍历就可以了。\n\n---\n# 存储书籍信息\n\n我们已经将书籍信息全部抓取下来，下面就是要考虑如何存储的问题。我这里是将所有的书按照分类（如果有第二级分类，就按照第二级）存储到一个markdown文件里。markdown最大的有点是，很方便转成html文件，这样既利于存储也利于展示。代码如下，因为这部分比较简单，我想就不用解释太多了。\n\n```python\ndef book_save(books_list, cat, sub_cat=None):\n    \n    # 如果存在二级分类，就把一级二级拼起来作为文件名\n    title = str(cat) + '-' + str(sub_cat) if sub_cat else str(cat)\n    \n    with open('../Pythonbooks-' + title + '.md', 'w') as file:\n        if not sub_cat:\n            file.write(\"# {}\\n\\n\".format(cat))\n        else:\n            file.write(\"# {} - {}\\n\\n\".format(cat, sub_cat))\n        num = 1\n        for book in books_list:\n            file.write(\"## {}. {}\\n\".format(num, book.title))\n            file.write(\"![{}_cover]({})\\n\\n\".format(book.title, book.href))\n            file.write(\"Author: {}\\n\\n\".format(book.author))\n            file.write(\"{}\\n\\n\".format(book.pub_date))\n            file.write(\"**Popularity score: {}**\\n\\n\".format(book.score))\n            file.write(\"------------\\n\")\n            num += 1\n```\n\n---\n# 主函数：功能串联\n\n主函数主要就是将各个部分串联起来，具体代码如下：\n\n```python\nif __name__ == \"__main__\":\n    url = \"http://pythonbooks.org/\"\n    menu = [\"Intermediate\", \"Topical\", \"Others\"]\n    categories = {'Beginner': 'http://pythonbooks.org/for-programming-beginners'}\n    \n    driver = init_driver()\n    crawl_category(driver, url, categories, menu)\n    \n    all_books = {}\n    \n    for key, value in categories.items():\n    \n        # 如果一级分类的value是字典的话，那就说明还存在二级分类\n        if key not in all_books and not isinstance(value, str):\n            all_books[key] = {}\n            \n        try:\n            for k, v in value.items():\n                book_list = crawl_book_info(driver, v)\n                all_books[key][k] = book_list\n                book_save(book_list, key, sub_cat=k)\n        except:\n            book_list = crawl_book_info(driver, value)\n            all_books[key] = book_list\n            book_save(book_list, key)\n            \n    driver.quit()\n```\n\n在所有的分类中，只有`Beginner`是没有二级分类的，因此需要对它进行单独处理。对应到代码中，就是except下面的内容。\n\n我在主函数里还设置了一个`all_books`的变量，但其实并没有用到。因为一开始我本打算先存到一个字典变量中在，再对该变量进行遍历，一个一个将书籍信息存到文件中。后来发现其实并不需要，完全可以边爬取边存。\n\n好了，所有的爬取内容就都结束了，当你运行程序之后就会看到Firfox浏览器自动弹出，然后逐个页面的自己跳转，最后浏览器关闭的时候，你也就收获了一大堆的md文件。\n![md_files](/images/crawl/md_files.png)\n\nmd的内容如下图所示：\n![md_file](/images/crawl/md_file.png)\n\n将md渲染成HTML后在网页中显示是这样的：\n![md_result](/images/crawl/md_result.png)\n\n---\n# 结语\n相对来说，这次的爬取任务很简单，因为网站没有反爬机制。其实在爬取过程中，最难的，最体现斗智斗勇的地方，就是反爬与反反爬，这方面我不是很了解。因为一般用到爬虫的时候都是确实切身需要的时候，并非为了技术而去钻研，所以大部分时候爬的都是一些明面上的可搜集的数据。网上关于Python爬虫的介绍和例子其实有很多很多，现如今，除了数据分析，机器学习这部分，恐怕大多数人都是因为爬虫的趣味性和实用性在学Python吧。\n\n在本文的最后，我给出了几个很有帮助的链接，对于想要学习Selenium和BeautifulSoup的朋友，值得一看。\n\n---\n# Related Links\n1. [Python Selenium——一定要会用的Selenium的等待，三种等待方式解读](https://huilansame.github.io/huilansame.github.io/archivers/sleep-implicitlywait-wait)\n2. [selenium + python 中文文档](https://python-selenium-zh.readthedocs.io/zh_CN/latest/)\n3. [Beautiful Soup 4.2.0 中文文档](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html)\n4. [Beautiful Soup 的用法](http://wiki.jikexueyuan.com/project/python-crawler-guide/beautiful-soup.html)\n5. [Python爬虫利器五之Selenium的用法](http://cuiqingcai.com/2599.html)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Python-Books-Crawler","published":1,"updated":"2017-11-07T02:47:10.000Z","_id":"cj9os2va10009u8yu9u0ikkdu","comments":1,"layout":"post","photos":[],"link":"","content":"<p>使用Python是个很有意思的体验，语法相对简单，各种包的支持也非常到位，因此无论用Python解决什么问题，都觉得弹指间可以让其灰飞烟灭。作为一个工具，一种编程语言，在帮助不同人群实现各种有趣的小目标这点上，Python真的是无出其右。</p>\n<h1 id=\"本文目的\"><a href=\"#本文目的\" class=\"headerlink\" title=\"本文目的\"></a>本文目的</h1><p>Python中有一种很好玩的应用，就是爬虫，简单说就是通过它，用户可以抓取网页上的信息。比如，在本篇文章中，我就将介绍自己爬取Pythonbooks网站的过程，以此来让各位对爬虫有个大概的认识，并且描述过程中我也会顺带介绍一下Selenium和BeautifulSoup两个爬虫中常用包的用法。</p>\n<a id=\"more\"></a>\n<p>在Python的学习过程中，我相信每一位“Pythoner”都会经历这样一个过程：市面上这么多本Python的书籍和教程，究竟哪一个才是最好的呢？国外有个叫<em>Dibya Chakravorty</em>的哥们在当初学习Python的时候也思考到这个问题，于是他就做了一个网站，<code>Pythonbooks.org</code>，专门来统计不同应用领域下的Python书籍，以及它们的评分，评分是根据书的销售情况来计算的。所以今天我就用爬虫的方式来带各位看一下他网站上是怎么说的。</p>\n<hr>\n<h1 id=\"环境需求\"><a href=\"#环境需求\" class=\"headerlink\" title=\"环境需求\"></a>环境需求</h1><p>我是在Python3下运行的爬虫，用到的包就两个：<code>Selenium</code>和<code>BeautifulSoup</code>，安装最新版就可以。</p>\n<p>下面我们先来看一下这两个包究竟都是做什么的，为什么我会用到它们。</p>\n<hr>\n<h1 id=\"Selenium和BeautifulSoup\"><a href=\"#Selenium和BeautifulSoup\" class=\"headerlink\" title=\"Selenium和BeautifulSoup\"></a>Selenium和BeautifulSoup</h1><p>打开Selenium官网，第一句话就是 <em>Selenium automates browsers.</em> 。没了，就这一句，就说明了Selenium的作用，它就是用来模拟操作浏览器的工具，通过API，用户可以用代码来操作浏览器上网页的跳转，关闭，填写表单等操作。</p>\n<p>那BeautifulSoup的作用呢？以下引用Wikipedia：</p>\n<blockquote>\n<p>Beautiful Soup is a Python package for parsing HTML and XML documents (including having malformed markup, i.e. non-closed tags, so named after tag soup). It creates a parse tree for parsed pages that can be used to extract data from HTML, which is useful for web scraping.</p>\n</blockquote>\n<p>所以BeautifulSoup的作用就是用来从HTML和XML等文件中提取所需信息。BeautifulSoup实际上是bs4模块的一个子模块，bs4的作用极其强大，可以针对各种内容分割和获取信息，BeautifulSoup是其专门针对HTML和XML的。因为本文只用到BeautifulSoup，因此其他的模块内容就暂不介绍了，有兴趣的朋友可以自行查阅。</p>\n<p>简单介绍两个工具包之后，接下来让我们开始网站的爬取工作吧。</p>\n<hr>\n<h1 id=\"网站爬取\"><a href=\"#网站爬取\" class=\"headerlink\" title=\"网站爬取\"></a>网站爬取</h1><p>在正式爬取之前，我们还有一个问题需要解决，就是这个网站的规模和动态程度，如果只是纯静态网页，而且只要爬取一个页面，那其实很容易。或者如果只要爬取3、5个网页，那我们完全可以手动跳转每个网页然后运行一遍程序，也不过就运行3、5遍而已，但当网页数量比较多的时候，这么不自动化的办法就显得很麻烦。</p>\n<p><img src=\"/images/crawl/website.png\" alt=\"website\"></p>\n<p><img src=\"/images/crawl/menu.png\" alt=\"menu\"></p>\n<p>这个网站上已经针对不同领域，为用户区分好了所有的Python书籍归属种类。这点真的非常方便，这样我就只需要按照他网站给出的分类分别爬取下来就可以了，但这里种类的繁多，一个网页一个网页的手动跳转就很麻烦了，所以这里就需要Selenium来模拟鼠标的点击操作，进行网页的跳转，然后用BS爬取内容。这就是整个爬取过程的初步思考。</p>\n<hr>\n<h2 id=\"初始化webdriver\"><a href=\"#初始化webdriver\" class=\"headerlink\" title=\"初始化webdriver\"></a>初始化webdriver</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init_driver</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    driver = webdriver.Firefox()</div><div class=\"line\">    <span class=\"comment\"># driver.wait = WebDriverWait(driver, 5)</span></div><div class=\"line\">    <span class=\"keyword\">return</span> driver</div></pre></td></tr></table></figure>\n<p>用Selenium来模拟浏览器的各种行为，就需要先进行webdriver的初始化，如上面的代码所示。中间注释掉的那一行可加可不加，它的作用主要就是考虑到有些网页是动态呈现内容，在输入网址之后加载网页到完全加载完毕可能需要等待一段时间，WebDriverWait就是用来告诉driver可以考虑的等待时间范围。一般来说都会搭配该类下的unitil、until_not方法和expected_conditions使用，本文用不到这些内容，所以就不深讲了，有兴趣的朋友可以看<a href=\"https://huilansame.github.io/huilansame.github.io/archivers/sleep-implicitlywait-wait\" target=\"_blank\" rel=\"external\">这里</a></p>\n<hr>\n<h2 id=\"爬取分类\"><a href=\"#爬取分类\" class=\"headerlink\" title=\"爬取分类\"></a>爬取分类</h2><p>从这里开始，我们就要正式爬取网站内容了。首先需要先把所有的分类获取，这样也方便我们最后整理信息，无论是以哪种方式存储。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">url = <span class=\"string\">\"http://pythonbooks.org/\"</span></div><div class=\"line\">menu = [<span class=\"string\">\"Intermediate\"</span>, <span class=\"string\">\"Topical\"</span>, <span class=\"string\">\"Others\"</span>]</div><div class=\"line\">categories = &#123;<span class=\"string\">'Beginner'</span>: <span class=\"string\">'http://pythonbooks.org/for-programming-beginners'</span>&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">crawl_category</span><span class=\"params\">(driver, url, categories, menu)</span>:</span></div><div class=\"line\">    driver.get(url)</div><div class=\"line\">    <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> menu:</div><div class=\"line\">        sub_menus = &#123;&#125;</div><div class=\"line\">        driver.find_element_by_link_text(m).click()</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\"># 停顿一下以等待下级菜单的弹出</span></div><div class=\"line\">        time.sleep(<span class=\"number\">0.2</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            sub_menu_block = driver.find_element_by_xpath(<span class=\"string\">\"//li[@class='dropdown open']\"</span>)</div><div class=\"line\">            sub_menu_name = sub_menu_block.find_element_by_tag_name(<span class=\"string\">\"ul\"</span>)</div><div class=\"line\">            <span class=\"keyword\">for</span> sub_menu, sub_menu_link <span class=\"keyword\">in</span> zip(sub_menu_name.text.split(<span class=\"string\">'\\n'</span>), sub_menu_name.find_elements_by_css_selector(<span class=\"string\">'a'</span>)):</div><div class=\"line\">                sub_menus[sub_menu] = sub_menu_link.get_attribute(<span class=\"string\">'href'</span>)</div><div class=\"line\">        <span class=\"keyword\">except</span> NoSuchElementException:</div><div class=\"line\">            <span class=\"keyword\">pass</span></div><div class=\"line\">            </div><div class=\"line\">        categories[m] = sub_menus</div></pre></td></tr></table></figure>\n<p>这里有细心的朋友可能看到我一开始给了一个categories的字典变量，里面有内容，而不是空的。这里之所以这样做，是因为在网页上显示的四个总分类中，只有Beginner是没有下级菜单的，所以这里就单独处理一下。</p>\n<p>代码中<code>driver.find_element_by_xpath(&quot;//li[@class=&#39;dropdown open&#39;]&quot;)</code>，这句就是获得了弹出的下级菜单中的内容。具体的对照请看下图：</p>\n<p><img src=\"/images/crawl/crawl_menu.png\" alt=\"crawl_menu\"></p>\n<p><code>for</code>循环中，两个遍历的变量，前者是获取的分类的string值，后者是对应的链接地址。我将它们都存进一个字典中，这样在下面爬取内容的时候，只需要对该字典遍历一遍就可以了。</p>\n<hr>\n<h2 id=\"爬取书籍信息\"><a href=\"#爬取书籍信息\" class=\"headerlink\" title=\"爬取书籍信息\"></a>爬取书籍信息</h2><p>上面我们已经将书籍分类都汇总好了，下面就开始挨个网页的爬取书籍的信息。这里书籍的信息我主要就爬取了五个：标题，作者，出版日期，分数，和封面图像。为了存储和打印方便，我就讲书籍信息封装成一个类，如下所示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookInfo</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, title, author, score, pub_date, href)</span>:</span></div><div class=\"line\">        self.title = title</div><div class=\"line\">        self.author = author</div><div class=\"line\">        self.score = score</div><div class=\"line\">        self.pub_date = pub_date</div><div class=\"line\">        self.href = href</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Book '&#123;&#125;' written by &#123;&#125;, &#123;&#125;. Popularity score: &#123;&#125;\"</span>.format(self.title, self.author, self.pub_date, self.score)</div></pre></td></tr></table></figure>\n<p>接下来就是对页面的爬取工作，先贴代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">crawl_book_info</span><span class=\"params\">(driver, url)</span>:</span></div><div class=\"line\">    driver.get(url)</div><div class=\"line\">    html = driver.page_source</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\"># 等待网页加载分数</span></div><div class=\"line\">    time.sleep(<span class=\"number\">2</span>)</div><div class=\"line\">    </div><div class=\"line\">    soup = BeautifulSoup(html, <span class=\"string\">'html.parser'</span>)</div><div class=\"line\">    </div><div class=\"line\">    book_blocks = soup.find(<span class=\"string\">'div'</span>, id=<span class=\"string\">'result-content'</span>)</div><div class=\"line\">    </div><div class=\"line\">    book_block_list = []</div><div class=\"line\">    <span class=\"keyword\">for</span> book_block <span class=\"keyword\">in</span> book_blocks.find_all(class_=<span class=\"string\">'row book-wrapper-row'</span>):</div><div class=\"line\">        book_block_list.append(book_block)</div><div class=\"line\">    </div><div class=\"line\">    book_list = []</div><div class=\"line\">    scores = driver.find_elements_by_xpath(<span class=\"string\">\"//div[@class='bar']\"</span>)</div><div class=\"line\">    <span class=\"keyword\">for</span> book, score <span class=\"keyword\">in</span> zip(book_block_list, scores):</div><div class=\"line\">        title = book.find(<span class=\"string\">'h2'</span>).string</div><div class=\"line\">        pub_date = book.find(<span class=\"string\">'span'</span>, class_=<span class=\"string\">\"publication-date\"</span>).string.strip()</div><div class=\"line\">        author = book.find(<span class=\"string\">'h3'</span>).string.strip()[<span class=\"number\">3</span>:]</div><div class=\"line\">        href = book.find(<span class=\"string\">'img'</span>)[<span class=\"string\">'src'</span>]</div><div class=\"line\">        book_list.append(BookInfo(title, author, score.text, pub_date, href))</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"keyword\">return</span> book_list</div></pre></td></tr></table></figure>\n<p>内容比较多，我们一点点来看。首先我们看看每个字段的位置。</p>\n<p><img src=\"/images/crawl/crawl_book.png\" alt=\"crawl_book\"></p>\n<p>我在一开始做这部分的时候是想用BS就可以了，因为在HTML中各元素的位置一目了然，爬取十分方便。但后来发现分数这一项，死活爬不下来，每次用BS去找这一块，返回的都是空。猜测可能是分数是动态生成的关系，因此BS抓取不到，具体内在原因没有去详细了解，如果有大神知道是怎么回事，还希望不吝赐教。后来我实在没有办法，就只好改用Selenium来抓取，<code>driver.find_elements_by_xpath(&quot;//div[@class=&#39;bar&#39;]&quot;)</code>。正因为分数是动态生成，所以在加载网页之后需要给一个延迟，等一下分数的刷新。分数和书籍是一一对应的，所以在<code>for</code>循环中用<code>zip</code>对两者一起进行协同遍历就可以了。</p>\n<hr>\n<h1 id=\"存储书籍信息\"><a href=\"#存储书籍信息\" class=\"headerlink\" title=\"存储书籍信息\"></a>存储书籍信息</h1><p>我们已经将书籍信息全部抓取下来，下面就是要考虑如何存储的问题。我这里是将所有的书按照分类（如果有第二级分类，就按照第二级）存储到一个markdown文件里。markdown最大的有点是，很方便转成html文件，这样既利于存储也利于展示。代码如下，因为这部分比较简单，我想就不用解释太多了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">book_save</span><span class=\"params\">(books_list, cat, sub_cat=None)</span>:</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\"># 如果存在二级分类，就把一级二级拼起来作为文件名</span></div><div class=\"line\">    title = str(cat) + <span class=\"string\">'-'</span> + str(sub_cat) <span class=\"keyword\">if</span> sub_cat <span class=\"keyword\">else</span> str(cat)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'../Pythonbooks-'</span> + title + <span class=\"string\">'.md'</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> file:</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> sub_cat:</div><div class=\"line\">            file.write(<span class=\"string\">\"# &#123;&#125;\\n\\n\"</span>.format(cat))</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            file.write(<span class=\"string\">\"# &#123;&#125; - &#123;&#125;\\n\\n\"</span>.format(cat, sub_cat))</div><div class=\"line\">        num = <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">for</span> book <span class=\"keyword\">in</span> books_list:</div><div class=\"line\">            file.write(<span class=\"string\">\"## &#123;&#125;. &#123;&#125;\\n\"</span>.format(num, book.title))</div><div class=\"line\">            file.write(<span class=\"string\">\"![&#123;&#125;_cover](&#123;&#125;)\\n\\n\"</span>.format(book.title, book.href))</div><div class=\"line\">            file.write(<span class=\"string\">\"Author: &#123;&#125;\\n\\n\"</span>.format(book.author))</div><div class=\"line\">            file.write(<span class=\"string\">\"&#123;&#125;\\n\\n\"</span>.format(book.pub_date))</div><div class=\"line\">            file.write(<span class=\"string\">\"**Popularity score: &#123;&#125;**\\n\\n\"</span>.format(book.score))</div><div class=\"line\">            file.write(<span class=\"string\">\"------------\\n\"</span>)</div><div class=\"line\">            num += <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"主函数：功能串联\"><a href=\"#主函数：功能串联\" class=\"headerlink\" title=\"主函数：功能串联\"></a>主函数：功能串联</h1><p>主函数主要就是将各个部分串联起来，具体代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    url = <span class=\"string\">\"http://pythonbooks.org/\"</span></div><div class=\"line\">    menu = [<span class=\"string\">\"Intermediate\"</span>, <span class=\"string\">\"Topical\"</span>, <span class=\"string\">\"Others\"</span>]</div><div class=\"line\">    categories = &#123;<span class=\"string\">'Beginner'</span>: <span class=\"string\">'http://pythonbooks.org/for-programming-beginners'</span>&#125;</div><div class=\"line\">    </div><div class=\"line\">    driver = init_driver()</div><div class=\"line\">    crawl_category(driver, url, categories, menu)</div><div class=\"line\">    </div><div class=\"line\">    all_books = &#123;&#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> categories.items():</div><div class=\"line\">    </div><div class=\"line\">        <span class=\"comment\"># 如果一级分类的value是字典的话，那就说明还存在二级分类</span></div><div class=\"line\">        <span class=\"keyword\">if</span> key <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> all_books <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> isinstance(value, str):</div><div class=\"line\">            all_books[key] = &#123;&#125;</div><div class=\"line\">            </div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> value.items():</div><div class=\"line\">                book_list = crawl_book_info(driver, v)</div><div class=\"line\">                all_books[key][k] = book_list</div><div class=\"line\">                book_save(book_list, key, sub_cat=k)</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            book_list = crawl_book_info(driver, value)</div><div class=\"line\">            all_books[key] = book_list</div><div class=\"line\">            book_save(book_list, key)</div><div class=\"line\">            </div><div class=\"line\">    driver.quit()</div></pre></td></tr></table></figure>\n<p>在所有的分类中，只有<code>Beginner</code>是没有二级分类的，因此需要对它进行单独处理。对应到代码中，就是except下面的内容。</p>\n<p>我在主函数里还设置了一个<code>all_books</code>的变量，但其实并没有用到。因为一开始我本打算先存到一个字典变量中在，再对该变量进行遍历，一个一个将书籍信息存到文件中。后来发现其实并不需要，完全可以边爬取边存。</p>\n<p>好了，所有的爬取内容就都结束了，当你运行程序之后就会看到Firfox浏览器自动弹出，然后逐个页面的自己跳转，最后浏览器关闭的时候，你也就收获了一大堆的md文件。\n<img src=\"/images/crawl/md_files.png\" alt=\"md_files\"></p>\n<p>md的内容如下图所示：\n<img src=\"/images/crawl/md_file.png\" alt=\"md_file\"></p>\n<p>将md渲染成HTML后在网页中显示是这样的：\n<img src=\"/images/crawl/md_result.png\" alt=\"md_result\"></p>\n<hr>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>相对来说，这次的爬取任务很简单，因为网站没有反爬机制。其实在爬取过程中，最难的，最体现斗智斗勇的地方，就是反爬与反反爬，这方面我不是很了解。因为一般用到爬虫的时候都是确实切身需要的时候，并非为了技术而去钻研，所以大部分时候爬的都是一些明面上的可搜集的数据。网上关于Python爬虫的介绍和例子其实有很多很多，现如今，除了数据分析，机器学习这部分，恐怕大多数人都是因为爬虫的趣味性和实用性在学Python吧。</p>\n<p>在本文的最后，我给出了几个很有帮助的链接，对于想要学习Selenium和BeautifulSoup的朋友，值得一看。</p>\n<hr>\n<h1 id=\"Related-Links\"><a href=\"#Related-Links\" class=\"headerlink\" title=\"Related Links\"></a>Related Links</h1><ol>\n<li><a href=\"https://huilansame.github.io/huilansame.github.io/archivers/sleep-implicitlywait-wait\" target=\"_blank\" rel=\"external\">Python Selenium——一定要会用的Selenium的等待，三种等待方式解读</a></li>\n<li><a href=\"https://python-selenium-zh.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">selenium + python 中文文档</a></li>\n<li><a href=\"https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html\" target=\"_blank\" rel=\"external\">Beautiful Soup 4.2.0 中文文档</a></li>\n<li><a href=\"http://wiki.jikexueyuan.com/project/python-crawler-guide/beautiful-soup.html\" target=\"_blank\" rel=\"external\">Beautiful Soup 的用法</a></li>\n<li><a href=\"http://cuiqingcai.com/2599.html\" target=\"_blank\" rel=\"external\">Python爬虫利器五之Selenium的用法</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>使用Python是个很有意思的体验，语法相对简单，各种包的支持也非常到位，因此无论用Python解决什么问题，都觉得弹指间可以让其灰飞烟灭。作为一个工具，一种编程语言，在帮助不同人群实现各种有趣的小目标这点上，Python真的是无出其右。</p>\n<h1 id=\"本文目的\"><a href=\"#本文目的\" class=\"headerlink\" title=\"本文目的\"></a>本文目的</h1><p>Python中有一种很好玩的应用，就是爬虫，简单说就是通过它，用户可以抓取网页上的信息。比如，在本篇文章中，我就将介绍自己爬取Pythonbooks网站的过程，以此来让各位对爬虫有个大概的认识，并且描述过程中我也会顺带介绍一下Selenium和BeautifulSoup两个爬虫中常用包的用法。</p>","more":"<p>在Python的学习过程中，我相信每一位“Pythoner”都会经历这样一个过程：市面上这么多本Python的书籍和教程，究竟哪一个才是最好的呢？国外有个叫<em>Dibya Chakravorty</em>的哥们在当初学习Python的时候也思考到这个问题，于是他就做了一个网站，<code>Pythonbooks.org</code>，专门来统计不同应用领域下的Python书籍，以及它们的评分，评分是根据书的销售情况来计算的。所以今天我就用爬虫的方式来带各位看一下他网站上是怎么说的。</p>\n<hr>\n<h1 id=\"环境需求\"><a href=\"#环境需求\" class=\"headerlink\" title=\"环境需求\"></a>环境需求</h1><p>我是在Python3下运行的爬虫，用到的包就两个：<code>Selenium</code>和<code>BeautifulSoup</code>，安装最新版就可以。</p>\n<p>下面我们先来看一下这两个包究竟都是做什么的，为什么我会用到它们。</p>\n<hr>\n<h1 id=\"Selenium和BeautifulSoup\"><a href=\"#Selenium和BeautifulSoup\" class=\"headerlink\" title=\"Selenium和BeautifulSoup\"></a>Selenium和BeautifulSoup</h1><p>打开Selenium官网，第一句话就是 <em>Selenium automates browsers.</em> 。没了，就这一句，就说明了Selenium的作用，它就是用来模拟操作浏览器的工具，通过API，用户可以用代码来操作浏览器上网页的跳转，关闭，填写表单等操作。</p>\n<p>那BeautifulSoup的作用呢？以下引用Wikipedia：</p>\n<blockquote>\n<p>Beautiful Soup is a Python package for parsing HTML and XML documents (including having malformed markup, i.e. non-closed tags, so named after tag soup). It creates a parse tree for parsed pages that can be used to extract data from HTML, which is useful for web scraping.</p>\n</blockquote>\n<p>所以BeautifulSoup的作用就是用来从HTML和XML等文件中提取所需信息。BeautifulSoup实际上是bs4模块的一个子模块，bs4的作用极其强大，可以针对各种内容分割和获取信息，BeautifulSoup是其专门针对HTML和XML的。因为本文只用到BeautifulSoup，因此其他的模块内容就暂不介绍了，有兴趣的朋友可以自行查阅。</p>\n<p>简单介绍两个工具包之后，接下来让我们开始网站的爬取工作吧。</p>\n<hr>\n<h1 id=\"网站爬取\"><a href=\"#网站爬取\" class=\"headerlink\" title=\"网站爬取\"></a>网站爬取</h1><p>在正式爬取之前，我们还有一个问题需要解决，就是这个网站的规模和动态程度，如果只是纯静态网页，而且只要爬取一个页面，那其实很容易。或者如果只要爬取3、5个网页，那我们完全可以手动跳转每个网页然后运行一遍程序，也不过就运行3、5遍而已，但当网页数量比较多的时候，这么不自动化的办法就显得很麻烦。</p>\n<p><img src=\"/images/crawl/website.png\" alt=\"website\"></p>\n<p><img src=\"/images/crawl/menu.png\" alt=\"menu\"></p>\n<p>这个网站上已经针对不同领域，为用户区分好了所有的Python书籍归属种类。这点真的非常方便，这样我就只需要按照他网站给出的分类分别爬取下来就可以了，但这里种类的繁多，一个网页一个网页的手动跳转就很麻烦了，所以这里就需要Selenium来模拟鼠标的点击操作，进行网页的跳转，然后用BS爬取内容。这就是整个爬取过程的初步思考。</p>\n<hr>\n<h2 id=\"初始化webdriver\"><a href=\"#初始化webdriver\" class=\"headerlink\" title=\"初始化webdriver\"></a>初始化webdriver</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init_driver</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    driver = webdriver.Firefox()</div><div class=\"line\">    <span class=\"comment\"># driver.wait = WebDriverWait(driver, 5)</span></div><div class=\"line\">    <span class=\"keyword\">return</span> driver</div></pre></td></tr></table></figure>\n<p>用Selenium来模拟浏览器的各种行为，就需要先进行webdriver的初始化，如上面的代码所示。中间注释掉的那一行可加可不加，它的作用主要就是考虑到有些网页是动态呈现内容，在输入网址之后加载网页到完全加载完毕可能需要等待一段时间，WebDriverWait就是用来告诉driver可以考虑的等待时间范围。一般来说都会搭配该类下的unitil、until_not方法和expected_conditions使用，本文用不到这些内容，所以就不深讲了，有兴趣的朋友可以看<a href=\"https://huilansame.github.io/huilansame.github.io/archivers/sleep-implicitlywait-wait\" target=\"_blank\" rel=\"external\">这里</a></p>\n<hr>\n<h2 id=\"爬取分类\"><a href=\"#爬取分类\" class=\"headerlink\" title=\"爬取分类\"></a>爬取分类</h2><p>从这里开始，我们就要正式爬取网站内容了。首先需要先把所有的分类获取，这样也方便我们最后整理信息，无论是以哪种方式存储。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">url = <span class=\"string\">\"http://pythonbooks.org/\"</span></div><div class=\"line\">menu = [<span class=\"string\">\"Intermediate\"</span>, <span class=\"string\">\"Topical\"</span>, <span class=\"string\">\"Others\"</span>]</div><div class=\"line\">categories = &#123;<span class=\"string\">'Beginner'</span>: <span class=\"string\">'http://pythonbooks.org/for-programming-beginners'</span>&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">crawl_category</span><span class=\"params\">(driver, url, categories, menu)</span>:</span></div><div class=\"line\">    driver.get(url)</div><div class=\"line\">    <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> menu:</div><div class=\"line\">        sub_menus = &#123;&#125;</div><div class=\"line\">        driver.find_element_by_link_text(m).click()</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\"># 停顿一下以等待下级菜单的弹出</span></div><div class=\"line\">        time.sleep(<span class=\"number\">0.2</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            sub_menu_block = driver.find_element_by_xpath(<span class=\"string\">\"//li[@class='dropdown open']\"</span>)</div><div class=\"line\">            sub_menu_name = sub_menu_block.find_element_by_tag_name(<span class=\"string\">\"ul\"</span>)</div><div class=\"line\">            <span class=\"keyword\">for</span> sub_menu, sub_menu_link <span class=\"keyword\">in</span> zip(sub_menu_name.text.split(<span class=\"string\">'\\n'</span>), sub_menu_name.find_elements_by_css_selector(<span class=\"string\">'a'</span>)):</div><div class=\"line\">                sub_menus[sub_menu] = sub_menu_link.get_attribute(<span class=\"string\">'href'</span>)</div><div class=\"line\">        <span class=\"keyword\">except</span> NoSuchElementException:</div><div class=\"line\">            <span class=\"keyword\">pass</span></div><div class=\"line\">            </div><div class=\"line\">        categories[m] = sub_menus</div></pre></td></tr></table></figure>\n<p>这里有细心的朋友可能看到我一开始给了一个categories的字典变量，里面有内容，而不是空的。这里之所以这样做，是因为在网页上显示的四个总分类中，只有Beginner是没有下级菜单的，所以这里就单独处理一下。</p>\n<p>代码中<code>driver.find_element_by_xpath(&quot;//li[@class=&#39;dropdown open&#39;]&quot;)</code>，这句就是获得了弹出的下级菜单中的内容。具体的对照请看下图：</p>\n<p><img src=\"/images/crawl/crawl_menu.png\" alt=\"crawl_menu\"></p>\n<p><code>for</code>循环中，两个遍历的变量，前者是获取的分类的string值，后者是对应的链接地址。我将它们都存进一个字典中，这样在下面爬取内容的时候，只需要对该字典遍历一遍就可以了。</p>\n<hr>\n<h2 id=\"爬取书籍信息\"><a href=\"#爬取书籍信息\" class=\"headerlink\" title=\"爬取书籍信息\"></a>爬取书籍信息</h2><p>上面我们已经将书籍分类都汇总好了，下面就开始挨个网页的爬取书籍的信息。这里书籍的信息我主要就爬取了五个：标题，作者，出版日期，分数，和封面图像。为了存储和打印方便，我就讲书籍信息封装成一个类，如下所示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookInfo</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, title, author, score, pub_date, href)</span>:</span></div><div class=\"line\">        self.title = title</div><div class=\"line\">        self.author = author</div><div class=\"line\">        self.score = score</div><div class=\"line\">        self.pub_date = pub_date</div><div class=\"line\">        self.href = href</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Book '&#123;&#125;' written by &#123;&#125;, &#123;&#125;. Popularity score: &#123;&#125;\"</span>.format(self.title, self.author, self.pub_date, self.score)</div></pre></td></tr></table></figure>\n<p>接下来就是对页面的爬取工作，先贴代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">crawl_book_info</span><span class=\"params\">(driver, url)</span>:</span></div><div class=\"line\">    driver.get(url)</div><div class=\"line\">    html = driver.page_source</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\"># 等待网页加载分数</span></div><div class=\"line\">    time.sleep(<span class=\"number\">2</span>)</div><div class=\"line\">    </div><div class=\"line\">    soup = BeautifulSoup(html, <span class=\"string\">'html.parser'</span>)</div><div class=\"line\">    </div><div class=\"line\">    book_blocks = soup.find(<span class=\"string\">'div'</span>, id=<span class=\"string\">'result-content'</span>)</div><div class=\"line\">    </div><div class=\"line\">    book_block_list = []</div><div class=\"line\">    <span class=\"keyword\">for</span> book_block <span class=\"keyword\">in</span> book_blocks.find_all(class_=<span class=\"string\">'row book-wrapper-row'</span>):</div><div class=\"line\">        book_block_list.append(book_block)</div><div class=\"line\">    </div><div class=\"line\">    book_list = []</div><div class=\"line\">    scores = driver.find_elements_by_xpath(<span class=\"string\">\"//div[@class='bar']\"</span>)</div><div class=\"line\">    <span class=\"keyword\">for</span> book, score <span class=\"keyword\">in</span> zip(book_block_list, scores):</div><div class=\"line\">        title = book.find(<span class=\"string\">'h2'</span>).string</div><div class=\"line\">        pub_date = book.find(<span class=\"string\">'span'</span>, class_=<span class=\"string\">\"publication-date\"</span>).string.strip()</div><div class=\"line\">        author = book.find(<span class=\"string\">'h3'</span>).string.strip()[<span class=\"number\">3</span>:]</div><div class=\"line\">        href = book.find(<span class=\"string\">'img'</span>)[<span class=\"string\">'src'</span>]</div><div class=\"line\">        book_list.append(BookInfo(title, author, score.text, pub_date, href))</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"keyword\">return</span> book_list</div></pre></td></tr></table></figure>\n<p>内容比较多，我们一点点来看。首先我们看看每个字段的位置。</p>\n<p><img src=\"/images/crawl/crawl_book.png\" alt=\"crawl_book\"></p>\n<p>我在一开始做这部分的时候是想用BS就可以了，因为在HTML中各元素的位置一目了然，爬取十分方便。但后来发现分数这一项，死活爬不下来，每次用BS去找这一块，返回的都是空。猜测可能是分数是动态生成的关系，因此BS抓取不到，具体内在原因没有去详细了解，如果有大神知道是怎么回事，还希望不吝赐教。后来我实在没有办法，就只好改用Selenium来抓取，<code>driver.find_elements_by_xpath(&quot;//div[@class=&#39;bar&#39;]&quot;)</code>。正因为分数是动态生成，所以在加载网页之后需要给一个延迟，等一下分数的刷新。分数和书籍是一一对应的，所以在<code>for</code>循环中用<code>zip</code>对两者一起进行协同遍历就可以了。</p>\n<hr>\n<h1 id=\"存储书籍信息\"><a href=\"#存储书籍信息\" class=\"headerlink\" title=\"存储书籍信息\"></a>存储书籍信息</h1><p>我们已经将书籍信息全部抓取下来，下面就是要考虑如何存储的问题。我这里是将所有的书按照分类（如果有第二级分类，就按照第二级）存储到一个markdown文件里。markdown最大的有点是，很方便转成html文件，这样既利于存储也利于展示。代码如下，因为这部分比较简单，我想就不用解释太多了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">book_save</span><span class=\"params\">(books_list, cat, sub_cat=None)</span>:</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\"># 如果存在二级分类，就把一级二级拼起来作为文件名</span></div><div class=\"line\">    title = str(cat) + <span class=\"string\">'-'</span> + str(sub_cat) <span class=\"keyword\">if</span> sub_cat <span class=\"keyword\">else</span> str(cat)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'../Pythonbooks-'</span> + title + <span class=\"string\">'.md'</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> file:</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> sub_cat:</div><div class=\"line\">            file.write(<span class=\"string\">\"# &#123;&#125;\\n\\n\"</span>.format(cat))</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            file.write(<span class=\"string\">\"# &#123;&#125; - &#123;&#125;\\n\\n\"</span>.format(cat, sub_cat))</div><div class=\"line\">        num = <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">for</span> book <span class=\"keyword\">in</span> books_list:</div><div class=\"line\">            file.write(<span class=\"string\">\"## &#123;&#125;. &#123;&#125;\\n\"</span>.format(num, book.title))</div><div class=\"line\">            file.write(<span class=\"string\">\"![&#123;&#125;_cover](&#123;&#125;)\\n\\n\"</span>.format(book.title, book.href))</div><div class=\"line\">            file.write(<span class=\"string\">\"Author: &#123;&#125;\\n\\n\"</span>.format(book.author))</div><div class=\"line\">            file.write(<span class=\"string\">\"&#123;&#125;\\n\\n\"</span>.format(book.pub_date))</div><div class=\"line\">            file.write(<span class=\"string\">\"**Popularity score: &#123;&#125;**\\n\\n\"</span>.format(book.score))</div><div class=\"line\">            file.write(<span class=\"string\">\"------------\\n\"</span>)</div><div class=\"line\">            num += <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"主函数：功能串联\"><a href=\"#主函数：功能串联\" class=\"headerlink\" title=\"主函数：功能串联\"></a>主函数：功能串联</h1><p>主函数主要就是将各个部分串联起来，具体代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    url = <span class=\"string\">\"http://pythonbooks.org/\"</span></div><div class=\"line\">    menu = [<span class=\"string\">\"Intermediate\"</span>, <span class=\"string\">\"Topical\"</span>, <span class=\"string\">\"Others\"</span>]</div><div class=\"line\">    categories = &#123;<span class=\"string\">'Beginner'</span>: <span class=\"string\">'http://pythonbooks.org/for-programming-beginners'</span>&#125;</div><div class=\"line\">    </div><div class=\"line\">    driver = init_driver()</div><div class=\"line\">    crawl_category(driver, url, categories, menu)</div><div class=\"line\">    </div><div class=\"line\">    all_books = &#123;&#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> categories.items():</div><div class=\"line\">    </div><div class=\"line\">        <span class=\"comment\"># 如果一级分类的value是字典的话，那就说明还存在二级分类</span></div><div class=\"line\">        <span class=\"keyword\">if</span> key <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> all_books <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> isinstance(value, str):</div><div class=\"line\">            all_books[key] = &#123;&#125;</div><div class=\"line\">            </div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> value.items():</div><div class=\"line\">                book_list = crawl_book_info(driver, v)</div><div class=\"line\">                all_books[key][k] = book_list</div><div class=\"line\">                book_save(book_list, key, sub_cat=k)</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            book_list = crawl_book_info(driver, value)</div><div class=\"line\">            all_books[key] = book_list</div><div class=\"line\">            book_save(book_list, key)</div><div class=\"line\">            </div><div class=\"line\">    driver.quit()</div></pre></td></tr></table></figure>\n<p>在所有的分类中，只有<code>Beginner</code>是没有二级分类的，因此需要对它进行单独处理。对应到代码中，就是except下面的内容。</p>\n<p>我在主函数里还设置了一个<code>all_books</code>的变量，但其实并没有用到。因为一开始我本打算先存到一个字典变量中在，再对该变量进行遍历，一个一个将书籍信息存到文件中。后来发现其实并不需要，完全可以边爬取边存。</p>\n<p>好了，所有的爬取内容就都结束了，当你运行程序之后就会看到Firfox浏览器自动弹出，然后逐个页面的自己跳转，最后浏览器关闭的时候，你也就收获了一大堆的md文件。\n<img src=\"/images/crawl/md_files.png\" alt=\"md_files\"></p>\n<p>md的内容如下图所示：\n<img src=\"/images/crawl/md_file.png\" alt=\"md_file\"></p>\n<p>将md渲染成HTML后在网页中显示是这样的：\n<img src=\"/images/crawl/md_result.png\" alt=\"md_result\"></p>\n<hr>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>相对来说，这次的爬取任务很简单，因为网站没有反爬机制。其实在爬取过程中，最难的，最体现斗智斗勇的地方，就是反爬与反反爬，这方面我不是很了解。因为一般用到爬虫的时候都是确实切身需要的时候，并非为了技术而去钻研，所以大部分时候爬的都是一些明面上的可搜集的数据。网上关于Python爬虫的介绍和例子其实有很多很多，现如今，除了数据分析，机器学习这部分，恐怕大多数人都是因为爬虫的趣味性和实用性在学Python吧。</p>\n<p>在本文的最后，我给出了几个很有帮助的链接，对于想要学习Selenium和BeautifulSoup的朋友，值得一看。</p>\n<hr>\n<h1 id=\"Related-Links\"><a href=\"#Related-Links\" class=\"headerlink\" title=\"Related Links\"></a>Related Links</h1><ol>\n<li><a href=\"https://huilansame.github.io/huilansame.github.io/archivers/sleep-implicitlywait-wait\" target=\"_blank\" rel=\"external\">Python Selenium——一定要会用的Selenium的等待，三种等待方式解读</a></li>\n<li><a href=\"https://python-selenium-zh.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"external\">selenium + python 中文文档</a></li>\n<li><a href=\"https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html\" target=\"_blank\" rel=\"external\">Beautiful Soup 4.2.0 中文文档</a></li>\n<li><a href=\"http://wiki.jikexueyuan.com/project/python-crawler-guide/beautiful-soup.html\" target=\"_blank\" rel=\"external\">Beautiful Soup 的用法</a></li>\n<li><a href=\"http://cuiqingcai.com/2599.html\" target=\"_blank\" rel=\"external\">Python爬虫利器五之Selenium的用法</a></li>\n</ol>"},{"title":"Hello World","comments":1,"_content":"\n# 前言\n\n终于将个人博客搭建起来了……虽然听说Hexo搭建博客十分容易，但对于前端完全不了解的我，颇费了一番功夫。\n\nHexo初始化这个博客目录时，自带了一个以“Hello World”为标题的文章，考虑到“Hello World”是作为学习编程代码第一课，作为一个标准码农的我就决定沿袭这个传统，\n从此开始自己的博客之旅。\n\n**_Hello Hexo_**\n\n**_Hello World_**\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntag:\n    - First\n    - Blog\ncategories:\n    - general\ncomments: true\n---\n\n# 前言\n\n终于将个人博客搭建起来了……虽然听说Hexo搭建博客十分容易，但对于前端完全不了解的我，颇费了一番功夫。\n\nHexo初始化这个博客目录时，自带了一个以“Hello World”为标题的文章，考虑到“Hello World”是作为学习编程代码第一课，作为一个标准码农的我就决定沿袭这个传统，\n从此开始自己的博客之旅。\n\n**_Hello Hexo_**\n\n**_Hello World_**\n","slug":"hello-world","published":1,"date":"2017-09-27T01:25:13.000Z","updated":"2017-10-05T00:15:27.000Z","layout":"post","photos":[],"link":"","_id":"cj9os2va2000cu8yukdasxxlh","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>终于将个人博客搭建起来了……虽然听说Hexo搭建博客十分容易，但对于前端完全不了解的我，颇费了一番功夫。</p>\n<p>Hexo初始化这个博客目录时，自带了一个以“Hello World”为标题的文章，考虑到“Hello World”是作为学习编程代码第一课，作为一个标准码农的我就决定沿袭这个传统，\n从此开始自己的博客之旅。</p>\n<p><strong><em>Hello Hexo</em></strong></p>\n<p><strong><em>Hello World</em></strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>终于将个人博客搭建起来了……虽然听说Hexo搭建博客十分容易，但对于前端完全不了解的我，颇费了一番功夫。</p>\n<p>Hexo初始化这个博客目录时，自带了一个以“Hello World”为标题的文章，考虑到“Hello World”是作为学习编程代码第一课，作为一个标准码农的我就决定沿袭这个传统，\n从此开始自己的博客之旅。</p>\n<p><strong><em>Hello Hexo</em></strong></p>\n<p><strong><em>Hello World</em></strong></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj9os2v9p0000u8yu50b4fryc","category_id":"cj9os2v9w0004u8yu8pfkztph","_id":"cj9os2va4000du8yukro30kal"},{"post_id":"cj9os2v9t0002u8yus8d9sos1","category_id":"cj9os2va1000au8yuq9m922lo","_id":"cj9os2va6000hu8yu3ikp4fnd"},{"post_id":"cj9os2v9y0006u8yu3k2pis4j","category_id":"cj9os2va1000au8yuq9m922lo","_id":"cj9os2va7000ku8yu54wl5nxz"},{"post_id":"cj9os2va00008u8yuycpuxdoq","category_id":"cj9os2va6000gu8yufbaug7en","_id":"cj9os2va8000pu8yuozv48h6l"},{"post_id":"cj9os2va10009u8yu9u0ikkdu","category_id":"cj9os2va7000mu8yunn1igdbq","_id":"cj9os2va9000su8yusqzca5uu"},{"post_id":"cj9os2va2000cu8yukdasxxlh","category_id":"cj9os2va6000gu8yufbaug7en","_id":"cj9os2va9000vu8yuchuaf924"}],"PostTag":[{"post_id":"cj9os2v9p0000u8yu50b4fryc","tag_id":"cj9os2v9x0005u8yuk54v8zlp","_id":"cj9os2va7000ju8yuathqubl2"},{"post_id":"cj9os2v9p0000u8yu50b4fryc","tag_id":"cj9os2va1000bu8yufd7dr82n","_id":"cj9os2va7000lu8yucz4wlvyz"},{"post_id":"cj9os2v9p0000u8yu50b4fryc","tag_id":"cj9os2va4000fu8yuk1wxbq9l","_id":"cj9os2va7000ou8yu72cizx4b"},{"post_id":"cj9os2v9t0002u8yus8d9sos1","tag_id":"cj9os2v9x0005u8yuk54v8zlp","_id":"cj9os2va9000uu8yuc5rjwt7p"},{"post_id":"cj9os2v9t0002u8yus8d9sos1","tag_id":"cj9os2va7000nu8yucqaviikk","_id":"cj9os2va9000wu8yuxtcxqo3t"},{"post_id":"cj9os2v9t0002u8yus8d9sos1","tag_id":"cj9os2va8000ru8yuls08hujf","_id":"cj9os2vaa000yu8yu2qd2kad5"},{"post_id":"cj9os2v9y0006u8yu3k2pis4j","tag_id":"cj9os2va7000nu8yucqaviikk","_id":"cj9os2vab0012u8yunys6jazt"},{"post_id":"cj9os2v9y0006u8yu3k2pis4j","tag_id":"cj9os2v9x0005u8yuk54v8zlp","_id":"cj9os2vab0013u8yuil5hwk7d"},{"post_id":"cj9os2v9y0006u8yu3k2pis4j","tag_id":"cj9os2vaa000zu8yu4lx8in08","_id":"cj9os2vab0015u8yunvx0z1my"},{"post_id":"cj9os2v9y0006u8yu3k2pis4j","tag_id":"cj9os2va8000ru8yuls08hujf","_id":"cj9os2vab0016u8yu36je7yj5"},{"post_id":"cj9os2va00008u8yuycpuxdoq","tag_id":"cj9os2vaa0011u8yupm1iloih","_id":"cj9os2vac001au8yu3ncvyvil"},{"post_id":"cj9os2va00008u8yuycpuxdoq","tag_id":"cj9os2vab0014u8yue22o5p92","_id":"cj9os2vac001bu8yuo3k001jo"},{"post_id":"cj9os2va00008u8yuycpuxdoq","tag_id":"cj9os2vab0017u8yugf14acrs","_id":"cj9os2vac001du8yujmkdh4at"},{"post_id":"cj9os2va00008u8yuycpuxdoq","tag_id":"cj9os2vac0018u8yuquo5dkol","_id":"cj9os2vad001eu8yuesim9i91"},{"post_id":"cj9os2va10009u8yu9u0ikkdu","tag_id":"cj9os2v9x0005u8yuk54v8zlp","_id":"cj9os2vad001hu8yu2rvcbvfd"},{"post_id":"cj9os2va10009u8yu9u0ikkdu","tag_id":"cj9os2vac0019u8yu2ec3csr5","_id":"cj9os2vad001iu8yu2zn1i7n5"},{"post_id":"cj9os2va10009u8yu9u0ikkdu","tag_id":"cj9os2vac001cu8yuz4zlmbh5","_id":"cj9os2vae001ku8yuw1z94u83"},{"post_id":"cj9os2va10009u8yu9u0ikkdu","tag_id":"cj9os2vad001fu8yuo7qx3anh","_id":"cj9os2vae001lu8yu15tesikd"},{"post_id":"cj9os2va2000cu8yukdasxxlh","tag_id":"cj9os2vad001gu8yuqvurtjbp","_id":"cj9os2vae001mu8yup6m5axm5"},{"post_id":"cj9os2va2000cu8yukdasxxlh","tag_id":"cj9os2vad001ju8yum3qdjk0y","_id":"cj9os2vae001nu8yukqnv8830"}],"Tag":[{"name":"Python","_id":"cj9os2v9x0005u8yuk54v8zlp"},{"name":"Pandas","_id":"cj9os2va1000bu8yufd7dr82n"},{"name":"Data analysis","_id":"cj9os2va4000fu8yuk1wxbq9l"},{"name":"Hadoop","_id":"cj9os2va7000nu8yucqaviikk"},{"name":"MapReduce","_id":"cj9os2va8000ru8yuls08hujf"},{"name":"Docker","_id":"cj9os2vaa000zu8yu4lx8in08"},{"name":"Netlify","_id":"cj9os2vaa0011u8yupm1iloih"},{"name":"migrate","_id":"cj9os2vab0014u8yue22o5p92"},{"name":"Heroku","_id":"cj9os2vab0017u8yugf14acrs"},{"name":"static site","_id":"cj9os2vac0018u8yuquo5dkol"},{"name":"Selenium","_id":"cj9os2vac0019u8yu2ec3csr5"},{"name":"BeautifulSoup","_id":"cj9os2vac001cu8yuz4zlmbh5"},{"name":"crawler","_id":"cj9os2vad001fu8yuo7qx3anh"},{"name":"First","_id":"cj9os2vad001gu8yuqvurtjbp"},{"name":"Blog","_id":"cj9os2vad001ju8yum3qdjk0y"}]}}